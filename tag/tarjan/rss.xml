<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Amentiraz • Posts by &#34;tarjan&#34; tag</title>
        <link>http://Amentiraz.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Mon, 29 Nov 2021 16:50:27 +0800</pubDate>
        <lastBuildDate>Mon, 29 Nov 2021 16:50:27 +0800</lastBuildDate>
        <category>DP</category>
        <category>算法</category>
        <category>Dijkstra</category>
        <category>书评</category>
        <category>LCA</category>
        <category>代码</category>
        <category>分布式</category>
        <category>数学建模</category>
        <category>TOPSIS</category>
        <category>Matlab</category>
        <category>Tarjan</category>
        <category>学习笔记</category>
        <category>C语言</category>
        <category>复习资料</category>
        <category>python</category>
        <category>论文</category>
        <category>笔记</category>
        <category>生活</category>
        <category>读书笔记</category>
        <category>杂</category>
        <category>层次分析法</category>
        <category>诗</category>
        <category>指针</category>
        <category>c语言</category>
        <category>插值算法</category>
        <category>线段树</category>
        <category>结构</category>
        <category>题解</category>
        <item>
            <guid isPermalink="true">http://amentiraz.github.io/2021/11/29/Tarjan/</guid>
            <title>Tarjan</title>
            <link>http://amentiraz.github.io/2021/11/29/Tarjan/</link>
            <category>算法</category>
            <category>Tarjan</category>
            <pubDate>Mon, 29 Nov 2021 16:50:27 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;
    &lt;div id=&#34;aplayer-JOchnjtC&#34; class=&#34;aplayer aplayer-tag-marker meting-tag-marker&#34;
         data-id=&#34;488388731&#34; data-server=&#34;netease&#34; data-type=&#34;song&#34; data-mode=&#34;circulation&#34; data-autoplay=&#34;true&#34; data-mutex=&#34;true&#34; data-listmaxheight=&#34;340px&#34; data-preload=&#34;none&#34; data-theme=&#34;#ad7a86&#34;
    &gt;&lt;/div&gt;
&lt;p&gt;想当年高中组织活动的时候我还专门写过 Tarjan 的流程和证明，如今已经忘的干干净净，原来的代码也找不到了，只能现写了。&lt;br&gt;
总的来说就是利用一个栈，将每个访问到的点 push 入栈，在寻找的过程中记录两个值，一个是 dfn—— 它是第几个搜索到的，一个是 low—— 它能衍生的点中 dfn 最小的值。如果一个点 dfn==low 说明它本身就是最小的点，把它及它栈以上的点全部 pop 出来就行，因为它上面的点必定是与它形成强联通分量。我们不妨假设它上面的点有不是它强联通分量的，那么此点在回溯到它本身的时候只有两种情况，一是它本身是强联通最小的点，那么在找到此点时会把它上面的点全部 pop 出去，另一种是它不是最小点，那么在遍历的过程中总会到第一种情况把它排除。&lt;br&gt;
Tarjan 程序是正确无误的，然后最后要跑一个拓扑，然鹅我不大会。luogu 上爆了 40pt，然后去看别人的题解秒懂。用拓扑可以优化掉 ans、Q、new_val 等等数组，估计就 80pt 了，然后我们还得用 dp 去解决菊花图这种类型的数据。&lt;br&gt;
这道题还给人一个教训是，对于缩点的题，我们记录下每条路径的开始与结束去构造新图，没必要单独列个 Q 这种数组。&lt;br&gt;
40pt 代码如下：&lt;br&gt;
（其实会个 Tarjan 就行了吧）&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int maxn = 100005 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n , m ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int head[maxn] , val[maxn] , nex[maxn] , cnt , to[maxn] , group[10004] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int tot , ind , a[10004] , stac[10004] , dfn[10004] , vis[10004] , low[10004] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue &amp;lt; int &amp;gt; Q[10004] ; int col , in[10004] , new_val[10004] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int ans[10004] , num ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void add ( int x , int y ) &amp;#123; nex[++cnt] = head[x] ; head[x] = cnt ; to[cnt] = y ; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void Tarjan ( int u ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfn[u] = low[u] = ++ tot ; vis[u] = 1 ; stac[++ind] = u ;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = head[u] ; i ; i = nex[i] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( ! dfn[to[i]] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Tarjan ( to[i] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            low[u] = min ( low[u] , low[to[i]] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else if ( vis[to[i]] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            low[u] = min ( low[u] , low[to[i]] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if ( low[u] == dfn[u] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int v ; col ++ ;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while ( v = stac[ind--] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Q[col].push ( v ) ; group[v] = col ;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            vis[v] = 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if ( v == u ) break ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void dfs ( int x , int val ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int flag = 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = head[x] ; i ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        flag = 1 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs ( to[i] , val + new_val[to[i]] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if ( ! flag ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans[++num] = val ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void topo ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= col ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( in[i] == 0 ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dfs ( i + n , new_val[i] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bool cmp ( int x , int y ) &amp;#123; return x &amp;gt; y ; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf ( &amp;quot;%d%d&amp;quot; , &amp;amp; n , &amp;amp; m ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) scanf ( &amp;quot;%d&amp;quot; , &amp;amp; a[i] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while ( m -- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int x , y ; scanf ( &amp;quot;%d%d&amp;quot; , &amp;amp; x , &amp;amp; y ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        add ( x , y ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( ! dfn[i] ) Tarjan ( i ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= col ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int new_node = i + n , val = 0 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while ( ! Q[i].empty ( ) ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int x = Q[i].front ( ) ; Q[i].pop ( ) ; val += a[x] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for ( int j = head[x] ; j ; j = nex[j] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if ( group[to[j]] == group[x] ) continue ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                add ( new_node , group[to[j]] + n ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                in[to[j]] ++ ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        new_val[i] = val ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    topo ( ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sort ( ans + 1 , ans + 1 + num , cmp ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf ( &amp;quot;%d&amp;quot; , ans[1] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
