{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amentiraz • All posts by \"python\" tag",
    "description": "",
    "home_page_url": "http://Amentiraz.github.io",
    "items": [
        {
            "id": "http://amentiraz.github.io/2022/01/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/",
            "url": "http://amentiraz.github.io/2022/01/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/",
            "title": "python学习笔记1",
            "date_published": "2022-01-12T11:55:31.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-FVVRxfLT\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1458550\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>除开函数外的 python 基础知识总汇，用于复习及查看，写的会很简略</p>\n<span id=\"more\"></span>\n<h3 id=\"基础知识\"><a class=\"markdownIt-Anchor\" href=\"#基础知识\">#</a> 基础知识</h3>\n<p>普通的除法：1/2  0.5<br>\n 整除: 1//2 0<br>\n 取模：%<br>\n 乘方：2<strong>3 (-3</strong>2 等同于 -(3**2))</p>\n<p>十六进制：0xAF<br>\n 八进制：010</p>\n<p>变量无需声明即可使用</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">3</span> </span><br><span class=\"line\">x * <span class=\"number\">2</span> </span><br><span class=\"line\">output : <span class=\"number\">6</span> </span><br></pre></td></tr></table></figure>\n<p>变量名命名同 C 语言</p>\n<p>print 在 python2 是语句，在 python3 中是函数，所以应当加上（）</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">input</span> ( <span class=\"string\">&quot;The meaning of life: &quot;</span> )</span><br><span class=\"line\">The meaning of life <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"built_in\">input</span> ( <span class=\"string\">&quot;x: &quot;</span> ) </span><br><span class=\"line\">x: <span class=\"number\">34</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = <span class=\"built_in\">input</span> ( <span class=\"string\">&quot;y: &quot;</span> ) </span><br><span class=\"line\">y : <span class=\"number\">42</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span> ( x * y ) </span><br><span class=\"line\"><span class=\"number\">1428</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">pow</span> ( <span class=\"number\">2</span> , <span class=\"number\">3</span> ) </span><br><span class=\"line\"><span class=\"number\">8</span> </span><br></pre></td></tr></table></figure>\n<p>round 函数会把浮点数四舍五入为最接近的整数值 （ py2 与 py3 对于 0.5 的取值有所不同）<br>\nabs 绝对值函数</p>\n<p>可以用变量来引用函数</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math </span><br><span class=\"line\">math.floor( <span class=\"number\">32.9</span> ) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> floor</span><br><span class=\"line\">floor</span><br><span class=\"line\"></span><br><span class=\"line\">foo = math.sqrt </span><br><span class=\"line\">foo ( <span class=\"number\">4</span> ) </span><br></pre></td></tr></table></figure>\n<p>math 中的 sqrt 不支持复数运算而 cmath 中支持</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> cmath</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cmath.sqrt ( -<span class=\"number\">1</span> ) </span><br><span class=\"line\"><span class=\"number\">1j</span></span><br><span class=\"line\"><span class=\"comment\"># 没有使用from 。。。import 。。。是因为一旦使用了这个语句那么就无法使用普通的sqrt了</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">1</span>+<span class=\"number\">3j</span>) * (<span class=\"number\">9</span>+<span class=\"number\">4j</span>) </span><br><span class=\"line\">(-<span class=\"number\">3</span>+<span class=\"number\">31j</span>) </span><br></pre></td></tr></table></figure>\n<p>字符串是值，就像数字一样，单引号和双引号没有本质区别<br>\n \\ 与 C 语言中一样使用<br>\n字符串之间可以拼接</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello,&quot;</span> + <span class=\"string\">&quot;world&quot;</span></span><br></pre></td></tr></table></figure>\n<p>转换成字符串有两种方式<br>\n str 将对象转换成用户看的，repr 转换成 python 表达式</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> ( <span class=\"built_in\">repr</span> ( <span class=\"string\">&quot;hello world&quot;</span> ) )</span><br><span class=\"line\"><span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> ( <span class=\"built_in\">str</span> ( <span class=\"string\">&quot;hello world &quot;</span> ) )</span><br><span class=\"line\">hello world </span><br></pre></td></tr></table></figure>\n<p>长字符串：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> ( <span class=\"string\">&quot;&quot;&quot; This is a very long string</span></span><br><span class=\"line\"><span class=\"string\">It continues here </span></span><br><span class=\"line\"><span class=\"string\">And it&#x27;s not over yet</span></span><br><span class=\"line\"><span class=\"string\">Still here &quot;&quot;&quot;</span> )</span><br><span class=\"line\"><span class=\"comment\"># 换行符可以被转义</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> ( <span class=\"string\">&quot;&quot;&quot; hello \\ </span></span><br><span class=\"line\"><span class=\"string\">world &quot;&quot;&quot;</span> ) </span><br></pre></td></tr></table></figure>\n<p>原始字符串</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path = <span class=\"string\">&#x27;c:\\\\program\\\\fnord&#x27;</span></span><br><span class=\"line\">path = <span class=\"string\">r&#x27;c:\\ll&quot;</span></span><br><span class=\"line\"><span class=\"string\"># r紧贴&#x27;</span>且字符串末尾不是\\</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列\"><a class=\"markdownIt-Anchor\" href=\"#序列\">#</a> 序列</h3>\n<p>列表和元组的区别在于列表可以修改而元组不可以</p>\n<p>通用的序列操作：索引，分片，加，乘<br>\n索引同数组，数组最后一个元素的位置标号为 - 1 如：greeting [-1]<br>\n print 的返回值是一个序列，所以我们可以如此调用</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fourth = <span class=\"built_in\">input</span> ( <span class=\"string\">&quot;Year: &quot;</span> )[<span class=\"number\">3</span>] </span><br></pre></td></tr></table></figure>\n<p>列表可以相加与相乘，例如</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">endings = [<span class=\"string\">&#x27;st&#x27;</span>,<span class=\"string\">&#x27;nd&#x27;</span>,<span class=\"string\">&#x27;rd&#x27;</span>]+<span class=\"number\">17</span> * [<span class=\"string\">&#x27;th&#x27;</span>,] \\ </span><br><span class=\"line\">+    [<span class=\"string\">&#x27;st&#x27;</span>,<span class=\"string\">&#x27;nd&#x27;</span>,<span class=\"string\">&#x27;rd&#x27;</span>]+ <span class=\"number\">7</span> * [<span class=\"string\">&#x27;th&#x27;</span>,]  \\</span><br><span class=\"line\">+ [<span class=\"string\">&#x27;st]</span></span><br><span class=\"line\"><span class=\"string\">[1,2,3] + [4,5,6]</span></span><br><span class=\"line\"><span class=\"string\">= [1,2,3,4,5,6]</span></span><br><span class=\"line\"><span class=\"string\"># 初始化一个长度为10 的列表</span></span><br><span class=\"line\"><span class=\"string\">sequence = [None] * 10 </span></span><br></pre></td></tr></table></figure>\n<p>分片<br>\n numbers [-3:-1]<br>\nnumbers[-3:]<br>\nnumbers[0::2]<br>\nnumbers[-1:0:-2]</p>\n<p>成员资格：in 函数</p>\n<p>长度：len<br>\n 最大值：max<br>\n 最小值：min</p>\n<h4 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h4>\n<p>list 函数 对立： ‘’.join (somelist)<br>\n 删除元素 del names [2]<br>\n 分片赋值：可以使用与原序列不等长的序列将分片替换（可以用来删除某一段）</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers[<span class=\"number\">1</span>:<span class=\"number\">1</span>] = [<span class=\"number\">2</span>, <span class=\"number\">3</span> ,<span class=\"number\">4</span> ]</span><br><span class=\"line\">numbers[<span class=\"number\">1</span>:<span class=\"number\">5</span>] = [] </span><br></pre></td></tr></table></figure>\n<p>.append( )<br>\n.count ( )<br>\n.extend ( ) 追加一个序列<br>\n.index ( ) 找出第一个匹配项索引位置<br>\n.insert (i , value) 插入<br>\n.pop ( ) 移除最后一个值并返回值<br>\n.remove ( ) 移除第一个匹配项<br>\n.reserve ( ) 反向存放<br>\n.sort ( ) 会该表原来的列表修改，也就是说修改副本不会影响原本，反之不然<br>\n<strong> sort 里面可以有参数如 cmp，key=len，reserve=True</strong><br>\nsorted ( ) 返回已排序的列表副本</p>\n<h4 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h4>\n<p>如果你用逗号分隔了一些值，那么你就自动创建了元组<br>\n tuple ( ) 类比于 list</p>\n<h3 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h3>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">format</span> = <span class=\"string\">&quot;hello , %s , %s enough for ya!&quot;</span> </span><br><span class=\"line\">values = ( <span class=\"string\">&#x27;world&#x27;</span> , <span class=\"string\">&#x27;Hot&#x27;</span> ) </span><br><span class=\"line\"><span class=\"built_in\">print</span> ( <span class=\"built_in\">format</span> % values ) </span><br></pre></td></tr></table></figure>\n<p>模板字符串：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> Template</span><br><span class=\"line\">s = Template ( <span class=\"string\">&#x27;$x , glorious $x &#x27;</span> ) </span><br><span class=\"line\">s.substitute ( x = <span class=\"string\">&#x27;slum&#x27;</span> ) </span><br><span class=\"line\"></span><br><span class=\"line\">s = Template ( <span class=\"string\">&quot;It&#x27;s $&#123;x&#125;tatic&quot;</span> ) </span><br><span class=\"line\">s.substitute ( x = <span class=\"string\">&#x27;slum&#x27;</span> ) </span><br><span class=\"line\"></span><br><span class=\"line\">s = Template ( <span class=\"string\">&#x27;A $thing must never $action&#x27;</span> ) </span><br><span class=\"line\">d = &#123; &#125; </span><br><span class=\"line\">d[<span class=\"string\">&#x27;thing&#x27;</span>] = <span class=\"string\">&#x27;gentleman&#x27;</span> </span><br><span class=\"line\">d[<span class=\"string\">&#x27;action&#x27;</span>] = <span class=\"string\">&#x27;show his socks&#x27;</span> </span><br><span class=\"line\">s.substitute ( d ) </span><br></pre></td></tr></table></figure>\n<p>转换符包括（注意顺序）</p>\n<ol>\n<li>%</li>\n<li>转换标志 ，- : 左对齐，+ : 正负号，&quot;&quot; 正数前保留空格，0：位数不够用零来凑</li>\n<li>最小值宽（若为 * 则从元组读入）例如’%. * s’ % (5 , ‘dada’)</li>\n<li>. 后跟精确度</li>\n</ol>\n<p>字符串方法：<br>\n.find (“target” ,start ,end ) 查找字串 (start end 可忽略)<br>\nsth.join ( )<br>\n.lower ( ) 转换成小写<br>\n.title ()  //.capwords () 标题<br>\n.replace (A , B) 查找并替换<br>\n.split ( ) join 的逆运算<br>\n.strip () 去除两侧空格，可自己添加例如.strip ( ’ * !’)<br>\n.translate ( ) &amp;&amp; .maketrans python3 有所区别，运用时自己网上查</p>\n<h3 id=\"字典\"><a class=\"markdownIt-Anchor\" href=\"#字典\">#</a> 字典</h3>\n<p>创建： phonebook = {‘A’ : 1 , ‘B’ : 2 …}<br>\n dict (序列)<br>\nlen ( )<br>\nd[k]<br>\nd[k] = v<br>\ndel d[k]<br>\n k in d 检查 d 中是否有含有键为 k 的项<br>\n字典可以嵌套，类比于多维数组</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template = <span class=\"string\">&quot;%(title)s , %(ooo)d &quot;</span> </span><br><span class=\"line\">data = &#123; <span class=\"string\">&#x27;title&#x27;</span> : <span class=\"string\">&#x27;fff&#x27;</span> , <span class=\"string\">&#x27;ooo&#x27;</span> : <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span> ( template % data )  </span><br></pre></td></tr></table></figure>\n<p>.clear ( ) 原本操作<br>\n.copy ( ) 替换值不变原本，修改值会变<br>\n.deepcopy (copy 函数库中) 复制其包含的所有值<br>\n.fromkeys ([] , ‘default’ ) or dict.fromkeys ( [ ] , ‘default’ ) 给给定的键建立新的字典<br>\n.get (‘value’) 访问不存在的项返回 None<br>\n.has_key (‘value’) 查询是否有此键，py3 中被__contains__(key) 替代<br>\n.items () 把所有项以列表形式返回，且每一项返回 (键，值) 的形式<br>\n.iteritems ( ) 返回迭代器<br>\n.keys ( ) 返回键 ， 同上<br>\n.itereys ( ) 同上<br>\n.values ( ) 同上<br>\n.itervalues ( ) 同上<br>\n.pop (‘键’) 删除对应的键值对<br>\n.popitem ( ) 随机弹出项<br>\n.setdefault (键，‘default’)<br>\n.update (x) 有则不变，无则加之</p>\n<h3 id=\"条件-循环和其它语句\"><a class=\"markdownIt-Anchor\" href=\"#条件-循环和其它语句\">#</a> 条件、循环和其它语句</h3>\n<p>print: , 即空格，print 即换行（除非在最后加，)<br>\nimport somemodule<br>\nfrom sm import sf<br>\nfrom sm import sf as (可避免重名)</p>\n<p>解包时可在最后用 * rest 把剩下的值都存入 rest</p>\n<p>+=</p>\n<ul>\n<li>=</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ... : </span><br><span class=\"line\">    代码块</span><br><span class=\"line\">    代码块</span><br><span class=\"line\"><span class=\"keyword\">elif</span> ... : </span><br><span class=\"line\">    代码块</span><br><span class=\"line\">    代码块</span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">    代码块</span><br><span class=\"line\">    代码块</span><br></pre></td></tr></table></figure>\n<p>x is y x 和 y 是同一对象<br>\n x is not y …<br>\nx in y<br>\nx not in y<br>\n 可以使用 x&lt;y&lt;z</p>\n<p>断言：assert 判断条件<br>\n如果不满足直接程序崩溃</p>\n<p>while 判断 :<br>\n 代码块<br>\n代码块</p>\n<p>for i in sequence :<br>\n…<br>\n…</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>range ( 3 )<br>\n[ 0 , 1 , 2 , 3 ]</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>xrange ( 3 )<br>\n 同 range 只不过是一个一个给出的，更为高效</p>\n</blockquote>\n</blockquote>\n</blockquote>\n",
            "tags": [
                "学习笔记",
                "python"
            ]
        }
    ]
}