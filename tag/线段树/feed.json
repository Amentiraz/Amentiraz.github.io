{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amentiraz • All posts by \"线段树\" tag",
    "description": "",
    "home_page_url": "http://Amentiraz.github.io",
    "items": [
        {
            "id": "http://amentiraz.github.io/2021/11/27/%E7%BA%BF%E6%AE%B5%E6%A0%91/",
            "url": "http://amentiraz.github.io/2021/11/27/%E7%BA%BF%E6%AE%B5%E6%A0%91/",
            "title": "线段树",
            "date_published": "2021-11-27T09:12:43.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-fPuxBiZF\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"27846868\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>线段树是一种树状数据结构，它可以区间加减，区间乘除等一系列操作，用于处理那种可以合并状态的数据，在使用其 3 倍左右的空间的代价下使得其修改、查询、求区间和等等操作变得更加快捷。但与此同时，我们无法利用它处理类似于区间最长 01 序列此类问题，而且线段树代码冗长，其实很容易写错（也可能是因为我太菜了）。<br>\n我们将一组数据进行如下处理，每相邻的两个数据有一个父亲节点来记录其总的状态，然后再记录其相邻父节点的总的状态，以此类推，最终得到一个树状结构，我们从上到下依次编号 1-n，这棵树满足父节点 * 2 = 左节点，父节点 * 2+1 = 右节点，设每个父节点代表 l-r 区间的状态，则左区间为 l,(r+l)/2 , 右区间为 (r+l)/2+1,r。根据此性质我们可以对他们进行维护。<br>\n每当我们访问一个节点，我们保证此节点的值一定正确，并尽可能少的改变其子孙节点的值，让时间消耗尽可能的小，同时把 lazy 标记也就是本来应该加的数传递到下一节点。<br>\n第一颗树实现了区间加与查询，第二颗树实现了区间乘法，加法，判断其中的先后顺序，其实也大同小异。<br>\n第三颗树用于实现历史最大值这种操作，然而由于本人电脑跑不动 500mb 的程序，再加之修改起来有点麻烦，就写个大致正确的程序摆在这了。<br>\n如果要继续完善，那么需要记录次大值并对于 spread 函数进行修改，就这样吧，后面再来补。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL ; </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">500005</span> ; </span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">L</span> &#123;</span><br><span class=\"line\">    LL val , add ; </span><br><span class=\"line\">&#125; t[maxn] ; </span><br><span class=\"line\">LL n , m , a[maxn] ; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( l == r ) &#123; t[p].val = a[l] ; <span class=\"keyword\">return</span> ; &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid ) ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r ) ; </span><br><span class=\"line\">    t[p].val = t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">spread</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( t[p].add ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; </span><br><span class=\"line\">        t[p&lt;&lt;<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p].add * ( mid - l + <span class=\"number\">1</span> ) ) , t[p&lt;&lt;<span class=\"number\">1</span>].add += t[p].add ; </span><br><span class=\"line\">        t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p].add * ( r - mid ) ) , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add += t[p].add ; </span><br><span class=\"line\">        t[p].add = <span class=\"number\">0</span> ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , <span class=\"type\">int</span> z )</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; t[p].val += z * ( r - l + <span class=\"number\">1</span> ) ; t[p].add += z ; <span class=\"keyword\">return</span> ; &#125;</span><br><span class=\"line\">   <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">   <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ; </span><br><span class=\"line\">   <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y , z ) ; </span><br><span class=\"line\">   t[p].val = t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ask</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; <span class=\"keyword\">return</span> t[p].val ; &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; LL ans = <span class=\"number\">0</span> ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) ans = ans + <span class=\"built_in\">ask</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) ans = ans + <span class=\"built_in\">ask</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%lld%lld&quot;</span> , &amp; n , &amp; m ) ; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i ++ ) <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , &amp; a[i] ) ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n ) ; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= m ; i ++ ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> com , x , y ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d%d&quot;</span> , &amp; com , &amp; x , &amp; y ) ; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( com == <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">            LL k ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , &amp; k ) ; </span><br><span class=\"line\">            <span class=\"built_in\">change</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y , k ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span> ( <span class=\"string\">&quot;%lld\\n&quot;</span> , <span class=\"built_in\">ask</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y ) ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100003</span> ;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span> <span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch = <span class=\"built_in\">getchar</span> ( ) ; <span class=\"type\">int</span> res = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( ch &gt; <span class=\"string\">&#x27;9&#x27;</span> || ch &lt; <span class=\"string\">&#x27;0&#x27;</span> ) ch = <span class=\"built_in\">getchar</span> ( ) ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span> ) res = res * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span> , ch = <span class=\"built_in\">getchar</span> ( ) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">L</span> &#123;</span><br><span class=\"line\">    ll mul , val , add ;</span><br><span class=\"line\">&#125; t[N&lt;&lt;<span class=\"number\">2</span>] ;</span><br><span class=\"line\"><span class=\"type\">int</span> n , m , a[N] , mod ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    t[p].mul = <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( l == r ) &#123; t[p].val = a[l] ; <span class=\"keyword\">return</span> ; &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid ) ;</span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r ) ;</span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>].val ) % mod ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">spread</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val * t[p].mul + t[p].add * ( mid - l + <span class=\"number\">1</span> ) ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val * t[p].mul + t[p].add * ( r - mid ) ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].mul = ( t[p&lt;&lt;<span class=\"number\">1</span>].mul * t[p].mul ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].mul = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].mul * t[p].mul ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].add = ( t[p&lt;&lt;<span class=\"number\">1</span>].add * t[p].mul + t[p].add ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add * t[p].mul + t[p].add ) % mod ;</span><br><span class=\"line\">    t[p].mul = <span class=\"number\">1</span> ; t[p].add = <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change2</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , ll z )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123;</span><br><span class=\"line\">        t[p].mul = ( t[p].mul * z ) % mod ;</span><br><span class=\"line\">        t[p].add = ( t[p].add * z ) % mod ;</span><br><span class=\"line\">        t[p].val = ( t[p].val * z ) % mod ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">spread</span> ( p , l , r ) ;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change2</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change2</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y , z ) ;</span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>].val ) % mod ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change1</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , ll z )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123;</span><br><span class=\"line\">        t[p].add = ( t[p].add + z ) % mod ;</span><br><span class=\"line\">        t[p].val = ( t[p].val + ( r - l + <span class=\"number\">1</span> ) * z ) % mod ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">spread</span> ( p , l , r ) ;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change1</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change1</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span> , r , x , y , z ) ;</span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>].val ) % mod ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">aska</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) <span class=\"keyword\">return</span> t[p].val ;</span><br><span class=\"line\">        <span class=\"built_in\">spread</span> ( p , l , r ) ;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">        ll ans = <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( x &lt;= mid ) ans += <span class=\"built_in\">aska</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( mid &lt; y ) ans += <span class=\"built_in\">aska</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ;</span><br><span class=\"line\">        ans %= mod ;</span><br><span class=\"line\">        t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>].val ) % mod ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span> ( ) ; m = <span class=\"built_in\">read</span> ( ) ; mod = <span class=\"built_in\">read</span> ( ) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i ++ ) <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d&quot;</span> , &amp; a[i] ) ;</span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n ) ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( m -- ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> command = <span class=\"built_in\">read</span> ( ) ; ll x = <span class=\"built_in\">read</span> ( ) , y = <span class=\"built_in\">read</span> ( ) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( command == <span class=\"number\">1</span> ) <span class=\"built_in\">change2</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y , <span class=\"built_in\">read</span> ( ) ) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( command == <span class=\"number\">2</span> ) <span class=\"built_in\">change1</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y , <span class=\"built_in\">read</span> ( ) ) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( command == <span class=\"number\">3</span> ) cout &lt;&lt; <span class=\"built_in\">aska</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y ) &lt;&lt; endl ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ; </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2000006</span> ; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL ; </span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">L</span> &#123;</span><br><span class=\"line\">    LL val , maxa , maxb , add , mina ;</span><br><span class=\"line\">&#125; t[maxn] ;</span><br><span class=\"line\">LL a[maxn&gt;&gt;<span class=\"number\">2</span>] ; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    t[p].mina = <span class=\"number\">0x7fffffff</span> ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( l == r ) &#123; t[p].maxa = t[p].maxb = t[p].val = a[l] ; <span class=\"keyword\">return</span> ; &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid ) ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r ) ; </span><br><span class=\"line\">    t[p].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxa , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa ) ; </span><br><span class=\"line\">    t[p].maxb = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb ) ; </span><br><span class=\"line\">    t[p].val = t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">spread</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"comment\">//这里有一定的问题，需要判断变为最小的影响，需要分类讨论，其余的没有问题（大概）</span></span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].val = <span class=\"built_in\">min</span> ( t[p].mina , ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p].add * ( mid - l + <span class=\"number\">1</span> ) ) ) ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val = <span class=\"built_in\">min</span> ( t[p].mina , ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p].add * ( r - mid ) ) ) ;</span><br><span class=\"line\">    <span class=\"comment\">//持续到这里</span></span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxa + t[p].add , t[p].mina == <span class=\"number\">0x7fffffff</span> ? <span class=\"number\">0</span> : t[p].mina ) ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa + t[p].add , t[p].mina == <span class=\"number\">0x7fffffff</span> ? <span class=\"number\">0</span> : t[p].mina ) ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].maxb = <span class=\"built_in\">max</span>( t[p&lt;&lt;<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>].maxa ) ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa ) ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].add += t[p].add ; t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add += t[p].add ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].mina = <span class=\"built_in\">min</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].mina , t[p].mina ) ; t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].mina = <span class=\"built_in\">min</span> ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].mina , t[p].mina ) ; </span><br><span class=\"line\">    t[p].mina = <span class=\"number\">0x7fffffff</span> ; t[p].add = <span class=\"number\">0</span> ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change1</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , LL z )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; </span><br><span class=\"line\">        t[p].maxa += z ; </span><br><span class=\"line\">        t[p].maxb = <span class=\"built_in\">max</span> ( t[p].maxb , t[p].maxa ) ; </span><br><span class=\"line\">        t[p].val = ( t[p].val + z * ( r - l + <span class=\"number\">1</span> ) ) ; </span><br><span class=\"line\">        t[p].add += z ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change1</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change1</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y , z ) ; </span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ) ; </span><br><span class=\"line\">    t[p].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxa , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa ) ;</span><br><span class=\"line\">    t[p].maxb = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb ) ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change2</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , LL z )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123;</span><br><span class=\"line\">        t[p].val = <span class=\"built_in\">min</span> ( t[p].val , z * ( r - l + <span class=\"number\">1</span> ) ) ; </span><br><span class=\"line\">        t[p].maxa = <span class=\"built_in\">min</span> ( z , t[p].maxa ) ;</span><br><span class=\"line\">        t[p].mina = z ; </span><br><span class=\"line\">        t[p].maxb = <span class=\"built_in\">max</span> ( t[p].maxb , t[p].maxa ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change2</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change2</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y , z ) ; </span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ) ; </span><br><span class=\"line\">    t[p].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxa , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa ) ; </span><br><span class=\"line\">    t[p].maxb = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb ) ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ask1</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; <span class=\"keyword\">return</span> t[p].val ; &#125;  </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; LL ans = <span class=\"number\">0</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) ans += <span class=\"built_in\">ask1</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) ans += <span class=\"built_in\">ask1</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ask2</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; <span class=\"keyword\">return</span> t[p].maxa ; &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; LL ans = <span class=\"number\">0x7fffffff</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) ans = <span class=\"built_in\">min</span> ( ans , <span class=\"built_in\">ask2</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ) ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) ans = <span class=\"built_in\">min</span> ( ans , <span class=\"built_in\">ask2</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ) ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ask3</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; <span class=\"keyword\">return</span> t[p].maxb ; &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; LL ans = <span class=\"number\">0x7fffffff</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) ans = <span class=\"built_in\">min</span> ( ans , <span class=\"built_in\">ask3</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) ans = <span class=\"built_in\">min</span> ( ans , <span class=\"built_in\">ask3</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ) ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , m ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d&quot;</span> , &amp; n , &amp; m ) ; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i ++ ) <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , &amp; a[i] ) ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n ) ; </span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( m -- ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d&quot;</span> , &amp; op ) ; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( op == <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; LL k ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d%lld&quot;</span> , &amp; l , &amp; r , &amp; k ) ; </span><br><span class=\"line\">            <span class=\"built_in\">change1</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r , k ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( op == <span class=\"number\">2</span> ) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; LL k ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d%lld&quot;</span> , &amp; l , &amp; r , &amp; k ) ; </span><br><span class=\"line\">            <span class=\"built_in\">change2</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r , k ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( op == <span class=\"number\">3</span> ) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d&quot;</span> , &amp; l , &amp; r ) ; </span><br><span class=\"line\">            <span class=\"built_in\">printf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , <span class=\"built_in\">ask1</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r ) ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( op == <span class=\"number\">4</span> ) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d&quot;</span> , &amp; l , &amp; r ) ;    </span><br><span class=\"line\">            <span class=\"built_in\">printf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , <span class=\"built_in\">ask2</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r ) ) ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d&quot;</span> , &amp; l , &amp; r ) ;    </span><br><span class=\"line\">            <span class=\"built_in\">printf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , <span class=\"built_in\">ask3</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r ) ) ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "线段树"
            ]
        }
    ]
}