{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amentiraz • All posts by \"复习资料\" tag",
    "description": "",
    "home_page_url": "http://Amentiraz.github.io",
    "items": [
        {
            "id": "http://amentiraz.github.io/2021/09/19/c%E5%A4%8D%E4%B9%A0/",
            "url": "http://amentiraz.github.io/2021/09/19/c%E5%A4%8D%E4%B9%A0/",
            "title": "c复习",
            "date_published": "2021-09-19T06:32:11.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-hAwGhAqM\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"578090\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>这篇文章是大一刚开学对 c 的复习，十分的不全面，看看就行。</p>\n<span id=\"more\"></span>\n<p>程序设计语言<br>\n机器语言 汇编语言 高级语言<br>\n return 0 ; return 表示 main 函数结束，0 表示程序在退出时给执行此程序的操作系统返回来一个结果，即返回值。</p>\n<h3 id=\"c程序的构成\"><a class=\"markdownIt-Anchor\" href=\"#c程序的构成\">#</a> c 程序的构成</h3>\n<h4 id=\"预处理部分\"><a class=\"markdownIt-Anchor\" href=\"#预处理部分\">#</a> 预处理部分</h4>\n<ol>\n<li>宏定义：#define 指令定义一个宏，#undef 指令删除一个宏定义</li>\n<li>头文件包含：#include</li>\n<li>条件编译语句：#if、#ifdef、#ifndef、#else 和 #endif 指令根据预处理器可以测试的条件来确定是将一段文本块包含到程序还是将其排除在外</li>\n</ol>\n<h4 id=\"说明部分\"><a class=\"markdownIt-Anchor\" href=\"#说明部分\">#</a> 说明部分</h4>\n<ol>\n<li>全局变量</li>\n<li>常量：#define PI 3.1416926f \\ const float PI 3.1415926</li>\n<li>函数声明</li>\n</ol>\n<h4 id=\"执行部分\"><a class=\"markdownIt-Anchor\" href=\"#执行部分\">#</a> 执行部分</h4>\n<ol>\n<li>主函数</li>\n<li>其他函数</li>\n</ol>\n<h3 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\">#</a> 标识符</h3>\n<p>由数字、字母和下划线字符构成的一个连续序列，不能有空白字符。<br>\n区分大小写</p>\n<h3 id=\"整型数据的分类\"><a class=\"markdownIt-Anchor\" href=\"#整型数据的分类\">#</a> 整型数据的分类</h3>\n<p>基本整型（int）、短整型（short int）和长整型（long int）<br>\nint 的取值范围 - 2147483648 与 2147483647（2^31-1)、字节数 4<br>\nshort (int) 的取值范围 -32768 与 32767 之间、字节数 2<br>\nlong (int) 主流编译器一般规定其取值范围与基本 int 类型相同、字节数 4<br>\nC 语言还提供了有符号和无符号整数类型<br>\n若希望表达非负整数，可以定义无符号整型，即在类型符号前面加上修饰符 unsigned<br>\n 加上 unsigned 变成原来的两倍、字节数不变<br>\n如：unsigned int : 0 ~ 4294967295</p>\n<h3 id=\"整型常数的书写形式\"><a class=\"markdownIt-Anchor\" href=\"#整型常数的书写形式\">#</a> 整型常数的书写形式</h3>\n<ol>\n<li>十进制形式</li>\n<li>八进制形式： 以 0 开头，如 0100、0123、0123456</li>\n<li>十六进制形式：以 0x 开头，如 0x100、0x123</li>\n<li>整型数据的储存形式：在计算机内部通常采用补码形式储存</li>\n</ol>\n<h3 id=\"补码-后面再补充相应知识\"><a class=\"markdownIt-Anchor\" href=\"#补码-后面再补充相应知识\">#</a> 补码 （ 后面再补充相应知识 ）</h3>\n<h3 id=\"浮点数类型\"><a class=\"markdownIt-Anchor\" href=\"#浮点数类型\">#</a> 浮点数类型</h3>\n<p>C 语言把浮点数类型分为 float（单精度浮点型）、double（双精度浮点型）和 long double （长双精度浮点型）<br>\n如表所示</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>字节数</th>\n<th>有效位数</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>foat</td>\n<td>4</td>\n<td>6</td>\n<td>-3.4 * 10^38 ~ 3.4 * 10^38</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>15</td>\n<td>-1.7 * 10^308 ~ 3.4 * 10^308</td>\n</tr>\n<tr>\n<td>long double</td>\n<td>16</td>\n<td>19</td>\n<td>-1.2 * 10^4932 ~ 3.4 * 10^4932</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"浮点数的书写形式\"><a class=\"markdownIt-Anchor\" href=\"#浮点数的书写形式\">#</a> 浮点数的书写形式</h3>\n<ol>\n<li>当小数点前后的数是零时，可以省略 0，但是小数点不能省略如 5. 和.5 分别表示 5.0 和 0.5</li>\n<li>指数形式 ： 如 4.5678E2 代表 4.5678 * 10^2 \\ -5.7e-3 代表 - 5.7 * 10^-3 （E 和 e 本质是一样的）</li>\n</ol>\n<p>默认情况下，浮点型常数为 double 型。可以在浮点型常数后面加上 F (f) 以表示 float 型；也可以在浮点型常数后面加上 L (l）表示 long double 型</p>\n<h3 id=\"字符类型\"><a class=\"markdownIt-Anchor\" href=\"#字符类型\">#</a> 字符类型</h3>\n<p>ASCII 字符集的特征：0～9、26 个大写英文字母以及 26 哥消协的英文字母的编码各自是连续的<br>\n如：A 的编码加上 25 是 Z 的编码</p>\n<p>char 类型来描述单字节编码字符集中的字符类型数据<br>\n C 还提供了 [signed] char 和 unsigned char 类型，他们的区别在于：在参加算术运算时，把字符的编码当作有符号整数还是无符号整数来看待</p>\n<h4 id=\"字符型常量的三种书写方式\"><a class=\"markdownIt-Anchor\" href=\"#字符型常量的三种书写方式\">#</a> 字符型常量的三种书写方式：</h4>\n<ol>\n<li>以一对单引号括起来的一个字符：‘A’‘1’</li>\n<li>以字符对应的 ASCII 码来表示，这时必须用转义序列（以反斜杠开头的一串字符）</li>\n</ol>\n<ul>\n<li>八进制：’\\ddd’如’101’为字母 A 的 ASCII 码的八进制表示</li>\n<li>十六进制：’\\xhh’如’\\x41’为字母 A 的 ASCII 码的十六进制表示</li>\n</ul>\n<ol start=\"3\">\n<li>特殊的转移序列符号表示</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n<th>符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>响铃</td>\n<td>\\v</td>\n<td>纵向制表</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格</td>\n<td>’</td>\n<td>单引号</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页</td>\n<td>‘’</td>\n<td>双引号</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n<td>\\ | 反斜杠</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n<td>\\0</td>\n<td>字符串结束</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td colspan=\"2\">横向制表</td>\n</tr>\n</tbody>\n</table>\n<p>“Please enter “Y” or “N”:<br>\n 当字符串包含双引号 &quot; 时，双引号应写成：”<br>\n 字符常量表示单个字符，字符串常量可表示多个字符<br>\n字符常量用’' 表示，字符串常量用 &quot;&quot; 表示<br>\n在储存字符串时，通常在最后一个字符后面储存一个表示字符串结束的标记符号</p>\n<p>两个实数相除的结果是双精度实数，两个整数相除的结果是整数</p>\n<h3 id=\"常用运算符的优先级与结合性\"><a class=\"markdownIt-Anchor\" href=\"#常用运算符的优先级与结合性\">#</a> 常用运算符的优先级与结合性</h3>\n<p>自行百度</p>\n<h3 id=\"输入输出语句\"><a class=\"markdownIt-Anchor\" href=\"#输入输出语句\">#</a> 输入输出语句</h3>\n<p>printf ( ) ; scanf ( ) ; getchar ( ) ; putchar ( ) ; puts ( ) ; gets ( ) ;</p>\n<h3 id=\"头文件\"><a class=\"markdownIt-Anchor\" href=\"#头文件\">#</a> 头文件</h3>\n<p>/#include&lt; &gt; 表示直接去查找系统的源文件<br>\n /#include&quot; &quot; 表示先去找用户存放源文件的子目录再去找系统文件<br>\n如果是自己写的头文件必须用第二种<br>\n如果头文件不在当前目录中，可以在双引号中写出文件路径 (#include “C:\\temp\\file.h”</p>\n<h3 id=\"scanf-与-printf\"><a class=\"markdownIt-Anchor\" href=\"#scanf-与-printf\">#</a> scanf 与 printf</h3>\n<p>特别的，scanf (“%2d%2d” , &amp; a , &amp; b ) ; 输入的数据可以为 1234<br>\n 则 a = 12 , b = 34 ；<br>\n如果 scanf (“a=% d,b=% d\\n” , &amp; a , &amp; b ) ;<br>\n 则用户必须输入 a=12,b=34 ;<br>\n 如果是 scanf (“% d * % d” , &amp; a , &amp; b ) ;<br>\n 那么用户输入 12，34｜12#34 都会得到正确的结果，因为 * 为忽略输入修饰符<br>\n scanf 输入时如果是 % c 那么空格也会被读入</p>\n<h3 id=\"空语句\"><a class=\"markdownIt-Anchor\" href=\"#空语句\">#</a> 空语句</h3>\n<p>空语句不做任何事情其作用是用于语法上需要一条语句的地方，而该地方又不需要做任何事情；例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    goto end ; </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    end : ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = 1 , sum = 0 ; </span><br><span class=\"line\">for ( ; i &lt;= 100 ; sum += i , i ++ ) ; </span><br></pre></td></tr></table></figure>\n<h3 id=\"switch-语句\"><a class=\"markdownIt-Anchor\" href=\"#switch-语句\">#</a> switch 语句</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch( &lt;整式表达式&gt; ) &#123; </span><br><span class=\"line\">    case 常量1: 语句序列1 ; break ; </span><br><span class=\"line\">    case 常量2: 语句序列2 ; break ;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    default ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>常量可为 1、2、3；‘c’、‘a’…</p>\n<p>case 常量 1: 语句序列 1 ; break ;</p>\n",
            "tags": [
                "学习笔记",
                "C语言",
                "复习资料"
            ]
        }
    ]
}