<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://Amentiraz.github.io</id>
    <title>Amentiraz • Posts by &#34;复习资料&#34; tag</title>
    <link href="http://Amentiraz.github.io" />
    <updated>2021-09-19T06:32:11.000Z</updated>
    <category term="DP" />
    <category term="算法" />
    <category term="Dijkstra" />
    <category term="书评" />
    <category term="LCA" />
    <category term="代码" />
    <category term="分布式" />
    <category term="数学建模" />
    <category term="TOPSIS" />
    <category term="Matlab" />
    <category term="Tarjan" />
    <category term="学习笔记" />
    <category term="C语言" />
    <category term="复习资料" />
    <category term="python" />
    <category term="论文" />
    <category term="笔记" />
    <category term="生活" />
    <category term="读书笔记" />
    <category term="杂" />
    <category term="层次分析法" />
    <category term="诗" />
    <category term="指针" />
    <category term="c语言" />
    <category term="插值算法" />
    <category term="线段树" />
    <category term="结构" />
    <category term="题解" />
    <entry>
        <id>http://amentiraz.github.io/2021/09/19/c%E5%A4%8D%E4%B9%A0/</id>
        <title>c复习</title>
        <link rel="alternate" href="http://amentiraz.github.io/2021/09/19/c%E5%A4%8D%E4%B9%A0/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;
    &lt;div id=&#34;aplayer-hAwGhAqM&#34; class=&#34;aplayer aplayer-tag-marker meting-tag-marker&#34;
         data-id=&#34;578090&#34; data-server=&#34;netease&#34; data-type=&#34;song&#34; data-mode=&#34;circulation&#34; data-autoplay=&#34;true&#34; data-mutex=&#34;true&#34; data-listmaxheight=&#34;340px&#34; data-preload=&#34;none&#34; data-theme=&#34;#ad7a86&#34;
    &gt;&lt;/div&gt;
&lt;p&gt;这篇文章是大一刚开学对 c 的复习，十分的不全面，看看就行。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;程序设计语言&lt;br&gt;
机器语言 汇编语言 高级语言&lt;br&gt;
 return 0 ; return 表示 main 函数结束，0 表示程序在退出时给执行此程序的操作系统返回来一个结果，即返回值。&lt;/p&gt;
&lt;h3 id=&#34;c程序的构成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c程序的构成&#34;&gt;#&lt;/a&gt; c 程序的构成&lt;/h3&gt;
&lt;h4 id=&#34;预处理部分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#预处理部分&#34;&gt;#&lt;/a&gt; 预处理部分&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;宏定义：#define 指令定义一个宏，#undef 指令删除一个宏定义&lt;/li&gt;
&lt;li&gt;头文件包含：#include&lt;/li&gt;
&lt;li&gt;条件编译语句：#if、#ifdef、#ifndef、#else 和 #endif 指令根据预处理器可以测试的条件来确定是将一段文本块包含到程序还是将其排除在外&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;说明部分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明部分&#34;&gt;#&lt;/a&gt; 说明部分&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;全局变量&lt;/li&gt;
&lt;li&gt;常量：#define PI 3.1416926f \ const float PI 3.1415926&lt;/li&gt;
&lt;li&gt;函数声明&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;执行部分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#执行部分&#34;&gt;#&lt;/a&gt; 执行部分&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;主函数&lt;/li&gt;
&lt;li&gt;其他函数&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;标识符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标识符&#34;&gt;#&lt;/a&gt; 标识符&lt;/h3&gt;
&lt;p&gt;由数字、字母和下划线字符构成的一个连续序列，不能有空白字符。&lt;br&gt;
区分大小写&lt;/p&gt;
&lt;h3 id=&#34;整型数据的分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#整型数据的分类&#34;&gt;#&lt;/a&gt; 整型数据的分类&lt;/h3&gt;
&lt;p&gt;基本整型（int）、短整型（short int）和长整型（long int）&lt;br&gt;
int 的取值范围 - 2147483648 与 2147483647（2^31-1)、字节数 4&lt;br&gt;
short (int) 的取值范围 -32768 与 32767 之间、字节数 2&lt;br&gt;
long (int) 主流编译器一般规定其取值范围与基本 int 类型相同、字节数 4&lt;br&gt;
C 语言还提供了有符号和无符号整数类型&lt;br&gt;
若希望表达非负整数，可以定义无符号整型，即在类型符号前面加上修饰符 unsigned&lt;br&gt;
 加上 unsigned 变成原来的两倍、字节数不变&lt;br&gt;
如：unsigned int : 0 ~ 4294967295&lt;/p&gt;
&lt;h3 id=&#34;整型常数的书写形式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#整型常数的书写形式&#34;&gt;#&lt;/a&gt; 整型常数的书写形式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;十进制形式&lt;/li&gt;
&lt;li&gt;八进制形式： 以 0 开头，如 0100、0123、0123456&lt;/li&gt;
&lt;li&gt;十六进制形式：以 0x 开头，如 0x100、0x123&lt;/li&gt;
&lt;li&gt;整型数据的储存形式：在计算机内部通常采用补码形式储存&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;补码-后面再补充相应知识&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#补码-后面再补充相应知识&#34;&gt;#&lt;/a&gt; 补码 （ 后面再补充相应知识 ）&lt;/h3&gt;
&lt;h3 id=&#34;浮点数类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浮点数类型&#34;&gt;#&lt;/a&gt; 浮点数类型&lt;/h3&gt;
&lt;p&gt;C 语言把浮点数类型分为 float（单精度浮点型）、double（双精度浮点型）和 long double （长双精度浮点型）&lt;br&gt;
如表所示&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;字节数&lt;/th&gt;
&lt;th&gt;有效位数&lt;/th&gt;
&lt;th&gt;取值范围&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;foat&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;-3.4 * 10^38 ~ 3.4 * 10^38&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;-1.7 * 10^308 ~ 3.4 * 10^308&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long double&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;-1.2 * 10^4932 ~ 3.4 * 10^4932&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;浮点数的书写形式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浮点数的书写形式&#34;&gt;#&lt;/a&gt; 浮点数的书写形式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;当小数点前后的数是零时，可以省略 0，但是小数点不能省略如 5. 和.5 分别表示 5.0 和 0.5&lt;/li&gt;
&lt;li&gt;指数形式 ： 如 4.5678E2 代表 4.5678 * 10^2 \ -5.7e-3 代表 - 5.7 * 10^-3 （E 和 e 本质是一样的）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;默认情况下，浮点型常数为 double 型。可以在浮点型常数后面加上 F (f) 以表示 float 型；也可以在浮点型常数后面加上 L (l）表示 long double 型&lt;/p&gt;
&lt;h3 id=&#34;字符类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符类型&#34;&gt;#&lt;/a&gt; 字符类型&lt;/h3&gt;
&lt;p&gt;ASCII 字符集的特征：0～9、26 个大写英文字母以及 26 哥消协的英文字母的编码各自是连续的&lt;br&gt;
如：A 的编码加上 25 是 Z 的编码&lt;/p&gt;
&lt;p&gt;char 类型来描述单字节编码字符集中的字符类型数据&lt;br&gt;
 C 还提供了 [signed] char 和 unsigned char 类型，他们的区别在于：在参加算术运算时，把字符的编码当作有符号整数还是无符号整数来看待&lt;/p&gt;
&lt;h4 id=&#34;字符型常量的三种书写方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符型常量的三种书写方式&#34;&gt;#&lt;/a&gt; 字符型常量的三种书写方式：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;以一对单引号括起来的一个字符：‘A’‘1’&lt;/li&gt;
&lt;li&gt;以字符对应的 ASCII 码来表示，这时必须用转义序列（以反斜杠开头的一串字符）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;八进制：’\ddd’如’101’为字母 A 的 ASCII 码的八进制表示&lt;/li&gt;
&lt;li&gt;十六进制：’\xhh’如’\x41’为字母 A 的 ASCII 码的十六进制表示&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;特殊的转移序列符号表示&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\a&lt;/td&gt;
&lt;td&gt;响铃&lt;/td&gt;
&lt;td&gt;\v&lt;/td&gt;
&lt;td&gt;纵向制表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;退格&lt;/td&gt;
&lt;td&gt;’&lt;/td&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\f&lt;/td&gt;
&lt;td&gt;换页&lt;/td&gt;
&lt;td&gt;‘’&lt;/td&gt;
&lt;td&gt;双引号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;换行&lt;/td&gt;
&lt;td&gt;\ | 反斜杠&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;回车&lt;/td&gt;
&lt;td&gt;\0&lt;/td&gt;
&lt;td&gt;字符串结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td colspan=&#34;2&#34;&gt;横向制表&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;“Please enter “Y” or “N”:&lt;br&gt;
 当字符串包含双引号 &amp;quot; 时，双引号应写成：”&lt;br&gt;
 字符常量表示单个字符，字符串常量可表示多个字符&lt;br&gt;
字符常量用’&#39; 表示，字符串常量用 &amp;quot;&amp;quot; 表示&lt;br&gt;
在储存字符串时，通常在最后一个字符后面储存一个表示字符串结束的标记符号&lt;/p&gt;
&lt;p&gt;两个实数相除的结果是双精度实数，两个整数相除的结果是整数&lt;/p&gt;
&lt;h3 id=&#34;常用运算符的优先级与结合性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用运算符的优先级与结合性&#34;&gt;#&lt;/a&gt; 常用运算符的优先级与结合性&lt;/h3&gt;
&lt;p&gt;自行百度&lt;/p&gt;
&lt;h3 id=&#34;输入输出语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#输入输出语句&#34;&gt;#&lt;/a&gt; 输入输出语句&lt;/h3&gt;
&lt;p&gt;printf ( ) ; scanf ( ) ; getchar ( ) ; putchar ( ) ; puts ( ) ; gets ( ) ;&lt;/p&gt;
&lt;h3 id=&#34;头文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#头文件&#34;&gt;#&lt;/a&gt; 头文件&lt;/h3&gt;
&lt;p&gt;/#include&amp;lt; &amp;gt; 表示直接去查找系统的源文件&lt;br&gt;
 /#include&amp;quot; &amp;quot; 表示先去找用户存放源文件的子目录再去找系统文件&lt;br&gt;
如果是自己写的头文件必须用第二种&lt;br&gt;
如果头文件不在当前目录中，可以在双引号中写出文件路径 (#include “C:\temp\file.h”&lt;/p&gt;
&lt;h3 id=&#34;scanf-与-printf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#scanf-与-printf&#34;&gt;#&lt;/a&gt; scanf 与 printf&lt;/h3&gt;
&lt;p&gt;特别的，scanf (“%2d%2d” , &amp;amp; a , &amp;amp; b ) ; 输入的数据可以为 1234&lt;br&gt;
 则 a = 12 , b = 34 ；&lt;br&gt;
如果 scanf (“a=% d,b=% d\n” , &amp;amp; a , &amp;amp; b ) ;&lt;br&gt;
 则用户必须输入 a=12,b=34 ;&lt;br&gt;
 如果是 scanf (“% d * % d” , &amp;amp; a , &amp;amp; b ) ;&lt;br&gt;
 那么用户输入 12，34｜12#34 都会得到正确的结果，因为 * 为忽略输入修饰符&lt;br&gt;
 scanf 输入时如果是 % c 那么空格也会被读入&lt;/p&gt;
&lt;h3 id=&#34;空语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#空语句&#34;&gt;#&lt;/a&gt; 空语句&lt;/h3&gt;
&lt;p&gt;空语句不做任何事情其作用是用于语法上需要一条语句的地方，而该地方又不需要做任何事情；例如&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    goto end ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    end : ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int i = 1 , sum = 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for ( ; i &amp;lt;= 100 ; sum += i , i ++ ) ; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;switch-语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#switch-语句&#34;&gt;#&lt;/a&gt; switch 语句&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;switch( &amp;lt;整式表达式&amp;gt; ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case 常量1: 语句序列1 ; break ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case 常量2: 语句序列2 ; break ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    default ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常量可为 1、2、3；‘c’、‘a’…&lt;/p&gt;
&lt;p&gt;case 常量 1: 语句序列 1 ; break ;&lt;/p&gt;
</content>
        <category term="学习笔记" />
        <category term="C语言" />
        <category term="复习资料" />
        <updated>2021-09-19T06:32:11.000Z</updated>
    </entry>
</feed>
