{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amentiraz • All posts by \"插值算法\" tag",
    "description": "",
    "home_page_url": "http://Amentiraz.github.io",
    "items": [
        {
            "id": "http://amentiraz.github.io/2021/10/03/%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/",
            "url": "http://amentiraz.github.io/2021/10/03/%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/",
            "title": "插值算法",
            "date_published": "2021-10-03T08:21:52.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-QgJsulsd\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"502455381\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>插值算法主要运用于在数学建模竞赛中，现有的数据极少，不足以支撑分析的进行，这时候就需要使用一些数学的方法<br>\n插值的作用，“模拟产生” 一些新的但又比较靠谱的值来满足需求</p>\n<span id=\"more\"></span>\n<h3 id=\"一维插值问题\"><a class=\"markdownIt-Anchor\" href=\"#一维插值问题\">#</a> 一维插值问题</h3>\n<h4 id=\"问题如下\"><a class=\"markdownIt-Anchor\" href=\"#问题如下\">#</a> 问题如下：</h4>\n<p>已经有 n+1 个节点 (xi,yi)(i=0,1,…,n), 其中 xi 互不相同，不妨设 a &lt;= x0 &lt; x1 &lt; … &lt; xn &lt;= b , 求任一插值点 x * （不等于 xi）处的插值 y *<br>\n 思路：构造 y=f (x), 使得 f (x) 过所有节点，即可得到 y *</p>\n<h4 id=\"插值法的概念\"><a class=\"markdownIt-Anchor\" href=\"#插值法的概念\">#</a> 插值法的概念</h4>\n<p>设函数 y=f (x) 在区间 [a,b] 上有定义，且已知在点 a&lt;= x0 &lt; x1 &lt; … &lt; xn &lt;= b 上的值分别为 y0 , y1 , … , yn<br>\n 若存在一简单函数 P (x) 使 P (xi) = yi ( i = 0 , 1 , 2 , … , n ) 则称 P (x) 为 f (x) 的插值函数，点 x0,x1,…,xn 称为插值节点，包含插值节点的区间 [a,b] 称为插值区间<br>\n求插值函数 P (x) 的方法称为插值法<br>\n插值法是不唯一的<br>\n代数多项式：若 P (x) 是次数不超过 n 的代数多项式，即 P (x) = a0 + a1x + … + anx^n<br>\n 分段插值：若 P (x) 为分段多项式，就称为分段插值<br>\n三角插值：若 P (x) 为三角多项式，就称为三角插值（不予讨论）（一般要用到傅立叶变换等复杂的数学工具）<br>\n一般来讲三角插值适用于对周期函数的插值（三角函数嘛）</p>\n<h4 id=\"插值法原理\"><a class=\"markdownIt-Anchor\" href=\"#插值法原理\">#</a> 插值法原理</h4>\n<p>定理：设有 n+1 个互不相同的节点 (xi,yi)(i=0,1,2,…,n) 则存在唯一的多项式：<br>\nLn (x) = a0 + a1x + … + anx^n   使得 Ln (xj) = yj (j=0,1,2,…n)<br>\n 证 构造方程组<br>\n「a0 + a1x0 + … + anx0^n = y0<br>\na0 + a1x1 + … + anx1^n = y1<br>\n…<br>\na0 + a1xn + … + anxn^n = yn  」</p>\n<p>图片：</p>\n<h4 id=\"拉格朗日插值法\"><a class=\"markdownIt-Anchor\" href=\"#拉格朗日插值法\">#</a> 拉格朗日插值法</h4>\n<p>在数值分析中，拉格朗日插值法是以法国十八世纪数学家约瑟夫・拉格朗日命名的一种多项式插值方法。如对实践中的某个物理量进行观测，在若干个不同的地方得到相应的观测值，拉格朗日插值法可以找到一个多项式，其恰好在各个观测的点取到观测到的值。这样的多项式称为拉格朗日（插值）多项式。<br>\n对于两个点：(x0,y0) , (x1,y1)<br>\nf(x) = ( x - x1 ) y0 / ( x0 - x1 ) + ( x - x0 ) y1 / ( x1 - x0 )<br>\n 对于三个点：(x0,y0),(x1,y1),(x2,y2)<br>\nf(x) = [ ( x - x1 ) ( x - x2 ) y0 ] / [ ( x0 - x1 ) ( x0 - x2 ) ]</p>\n<ul>\n<li>[ ( x - x0 ) ( x - x2 ) y1 ] / [ ( x1 - x0 ) ( x1 - x2 ) ]</li>\n<li>[ ( x - x0 ) ( x - x1 ) y2 ] / [ ( x2 - x0 ) ( x2 - x1 ) ]<br>\n 我们可以归纳发现，这种式子如果取其中的一个 xi 取得的值必定是 yi，因为其它项为 0，对应的 xi 的 yi 的系数必定为 1<br>\n<img data-src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gv3e0n9uf2j60mt09774y02.jpg\" alt=\"\"><br>\n 然而我们实际情况中却不可能用拉格朗日插值法，他有很多问题</li>\n</ul>\n<h4 id=\"龙格现象\"><a class=\"markdownIt-Anchor\" href=\"#龙格现象\">#</a> 龙格现象</h4>\n<p>图片 1:<br>\n 图片 2:<br>\n 这引出了两个问题</p>\n<ol>\n<li>插值多项式次数高，精度未必显著提高</li>\n<li>插值多项式次数越高，摄入误差可能显著增大<br>\n我们可以得到，对于高次的多项式插值时，如果我们不确定曲线的类型，我们尽量不要使用<br>\n那么如何提高插值精度呢<br>\n采用分段线性插值</li>\n</ol>\n<h3 id=\"分段插值\"><a class=\"markdownIt-Anchor\" href=\"#分段插值\">#</a> 分段插值</h3>\n<h4 id=\"分段线性插值\"><a class=\"markdownIt-Anchor\" href=\"#分段线性插值\">#</a> 分段线性插值</h4>\n<p>如果我们要在中间找一个值，我们找距离它最近的两点，两点之间连一条线段，直接在这条线段上找 x 对应的 y 值即可<br>\n这种插值是十分简单的，也是不精准的</p>\n<h4 id=\"分段二次插值\"><a class=\"markdownIt-Anchor\" href=\"#分段二次插值\">#</a> 分段二次插值</h4>\n<p>分段二次插值也是非常简单的，我们可以寻找距离这个插入点最近的三个点，三个点可以形成一个二次函数，同理可以直接取二次函数的值<br>\n分段二次插值又称为分段抛物线插值</p>\n<h4 id=\"牛顿插值法\"><a class=\"markdownIt-Anchor\" href=\"#牛顿插值法\">#</a> 牛顿插值法・</h4>\n",
            "tags": [
                "数学建模",
                "插值算法"
            ]
        }
    ]
}