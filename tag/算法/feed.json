{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amentiraz • All posts by \"算法\" tag",
    "description": "",
    "home_page_url": "http://Amentiraz.github.io",
    "items": [
        {
            "id": "http://amentiraz.github.io/2021/12/02/DP/",
            "url": "http://amentiraz.github.io/2021/12/02/DP/",
            "title": "DP",
            "date_published": "2021-12-02T09:26:14.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-WaDiIQOe\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"464413083\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>学了三天 DP 连个 P 都不会，总的来说就是寄了，每道题不看题解就做不来，试着做了做三道提高组难度的题，做出来了俩，另外一个没有思路。这俩题我都想出了大部分思路，但最后几步由于经验问题没想出来。做完后我以为我懂了，然后膨胀了，去挑战<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDExMDg=\">低价购买</span>这道题。然后不出意外寄了。打算先不弄这个了，等以后在弄，先把之前写的贴上来吧。</p>\n<span id=\"more\"></span>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQ4MzI=\">珈百璃的堕落</span><br>\n这番是好看的，题是不会的。<br>\n这道题有三个麻烦的点，一个是范围的确定，一个是 dp 数组的含义确定，还有一个是压缩数组的大小。<br>\n通过这道题我掌握了基本的 DP 递推的根据和要领，意思就是我能证明 dp 递推的正确性了，但然而并没有什么卵用，不会的还是不会。<br>\n我在高中时就做出来了这道题，但我认为在我高中的时候是不可能想出这道题的思路的，可以说我高中学竞赛就是在自欺欺人了（笑）。但讲道理的是，我起步太慢了，那个时候我也不是什么天才，依葫芦画瓢才是我应该干的，不管怎样我现在是不能这么干了。<br>\n一个很重要的点是，我们要继承上一个状态，又不能破坏现在的状态，所以起码要二维的数组，我们要尽力压缩空间，注意到第一维只会用到上一个的状态，所以我们调整一下。<br>\n代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;queue&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ; </span><br><span class=\"line\"></span><br><span class=\"line\">int tots , totc , dp[2][2000006] ; </span><br><span class=\"line\">int T = 1000000 ; </span><br><span class=\"line\">char a[2000006] ; </span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    int n ; scanf ( &quot;%d&quot; , &amp; n ) ;</span><br><span class=\"line\">    int l = 0 , r = 0 ; </span><br><span class=\"line\">    for ( int i = 0 ; i &lt;= 2000006 ; i ++ ) dp[0][i] = dp[1][i] = -100000006 ; </span><br><span class=\"line\">    dp[0][T] = 0 ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) &#123;</span><br><span class=\"line\">        scanf ( &quot;%s&quot; , a ) ; </span><br><span class=\"line\">        int len = strlen ( a ) , tots = 0 , totc = 0 ; </span><br><span class=\"line\">        for ( int j = 0 ; j &lt; len ; j += 2 ) </span><br><span class=\"line\">            a[j] == &#x27;s&#x27; ? tots ++ : totc ++ ; </span><br><span class=\"line\">        int v = totc , w = tots - totc ;</span><br><span class=\"line\">        l = min ( l + w , l ) ; r = max ( r + w , r ) ; </span><br><span class=\"line\">        for ( int j = l ; j &lt;= r ; j ++ ) &#123;</span><br><span class=\"line\">            dp[i&amp;1][T+j] = max ( dp[i&amp;1^1][T+j] , dp[i&amp;1][T+j] ) ; </span><br><span class=\"line\">            dp[i&amp;1][T+j] = max ( dp[i&amp;1^1][T+j-w] + v , dp[i&amp;1][T+j] ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; dp[n&amp;1][T] ; </span><br><span class=\"line\">    return 0 ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDExNTY=\">垃圾陷阱</span><br>\n其实高度和维持生命的时间可以换一下，就是时间做数组，生命做值，但太麻烦了，就没写。<br>\n要时刻记住当前状态由上一个状态推导而来，别自己吓自己。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ; </span><br><span class=\"line\"></span><br><span class=\"line\">struct L &#123;</span><br><span class=\"line\">    int t , f , h ; </span><br><span class=\"line\">&#125; trash[1005] ; </span><br><span class=\"line\">int dp[105][105] ; </span><br><span class=\"line\">bool cmp ( L x , L y ) &#123; return x.t &lt; y.t ; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    int D , G ; scanf ( &quot;%d%d&quot; , &amp; D , &amp; G ) ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= G ; i ++ ) scanf ( &quot;%d%d%d&quot; , &amp; trash[i].t , &amp; trash[i].f , &amp; trash[i].h ) ; </span><br><span class=\"line\">    sort ( trash + 1 , trash + 1 + G , cmp ) ;</span><br><span class=\"line\">    dp[0][0] = 10 ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= G ; i ++ ) &#123;</span><br><span class=\"line\">        for ( int j = 0 ; j &lt;= D ; j ++ ) &#123;</span><br><span class=\"line\">            if ( j &gt;= trash[i].h &amp;&amp; dp[i-1][j-trash[i].h] &gt;= trash[i].t ) &#123;</span><br><span class=\"line\">                dp[i][j] = max ( dp[i-1][j-trash[i].h] ,dp[i][j] ) ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if ( dp[i-1][j] &gt;= trash[i].t ) &#123;</span><br><span class=\"line\">                dp[i][j] = max ( dp[i-1][j] + trash[i].f , dp[i][j] ) ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= G ; i ++ ) &#123;</span><br><span class=\"line\">        if ( dp[i][D] != 0 ) &#123;</span><br><span class=\"line\">            cout &lt;&lt; trash[i].t ; return 0 ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int now = 10 ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= G; i ++ ) &#123;</span><br><span class=\"line\">        if ( now &lt; trash[i].t - trash[i-1].t ) &#123; cout &lt;&lt; trash[i-1].t + now ; return 0 ; &#125;  </span><br><span class=\"line\">        else now = now - trash[i].t + trash[i-1].t + trash[i].f ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; trash[G].t + now ; </span><br><span class=\"line\">    return 0 ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "DP",
                "算法"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/11/29/Tarjan/",
            "url": "http://amentiraz.github.io/2021/11/29/Tarjan/",
            "title": "Tarjan",
            "date_published": "2021-11-29T08:50:27.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-JOchnjtC\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"488388731\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>想当年高中组织活动的时候我还专门写过 Tarjan 的流程和证明，如今已经忘的干干净净，原来的代码也找不到了，只能现写了。<br>\n总的来说就是利用一个栈，将每个访问到的点 push 入栈，在寻找的过程中记录两个值，一个是 dfn—— 它是第几个搜索到的，一个是 low—— 它能衍生的点中 dfn 最小的值。如果一个点 dfn==low 说明它本身就是最小的点，把它及它栈以上的点全部 pop 出来就行，因为它上面的点必定是与它形成强联通分量。我们不妨假设它上面的点有不是它强联通分量的，那么此点在回溯到它本身的时候只有两种情况，一是它本身是强联通最小的点，那么在找到此点时会把它上面的点全部 pop 出去，另一种是它不是最小点，那么在遍历的过程中总会到第一种情况把它排除。<br>\nTarjan 程序是正确无误的，然后最后要跑一个拓扑，然鹅我不大会。luogu 上爆了 40pt，然后去看别人的题解秒懂。用拓扑可以优化掉 ans、Q、new_val 等等数组，估计就 80pt 了，然后我们还得用 dp 去解决菊花图这种类型的数据。<br>\n这道题还给人一个教训是，对于缩点的题，我们记录下每条路径的开始与结束去构造新图，没必要单独列个 Q 这种数组。<br>\n40pt 代码如下：<br>\n（其实会个 Tarjan 就行了吧）</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;queue&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ; </span><br><span class=\"line\">const int maxn = 100005 ; </span><br><span class=\"line\">int n , m ; </span><br><span class=\"line\">int head[maxn] , val[maxn] , nex[maxn] , cnt , to[maxn] , group[10004] ; </span><br><span class=\"line\">int tot , ind , a[10004] , stac[10004] , dfn[10004] , vis[10004] , low[10004] ;</span><br><span class=\"line\">queue &lt; int &gt; Q[10004] ; int col , in[10004] , new_val[10004] ; </span><br><span class=\"line\">int ans[10004] , num ; </span><br><span class=\"line\">void add ( int x , int y ) &#123; nex[++cnt] = head[x] ; head[x] = cnt ; to[cnt] = y ; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">void Tarjan ( int u ) &#123;</span><br><span class=\"line\">    dfn[u] = low[u] = ++ tot ; vis[u] = 1 ; stac[++ind] = u ;  </span><br><span class=\"line\">    for ( int i = head[u] ; i ; i = nex[i] ) &#123;</span><br><span class=\"line\">        if ( ! dfn[to[i]] ) &#123;</span><br><span class=\"line\">            Tarjan ( to[i] ) ; </span><br><span class=\"line\">            low[u] = min ( low[u] , low[to[i]] ) ; </span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">        else if ( vis[to[i]] ) &#123;</span><br><span class=\"line\">            low[u] = min ( low[u] , low[to[i]] ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ( low[u] == dfn[u] ) &#123;</span><br><span class=\"line\">        int v ; col ++ ;  </span><br><span class=\"line\">        while ( v = stac[ind--] ) &#123;</span><br><span class=\"line\">            Q[col].push ( v ) ; group[v] = col ;  </span><br><span class=\"line\">            vis[v] = 0 ; </span><br><span class=\"line\">            if ( v == u ) break ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void dfs ( int x , int val ) &#123;</span><br><span class=\"line\">    int flag = 0 ; </span><br><span class=\"line\">    for ( int i = head[x] ; i ; i ++ ) &#123;</span><br><span class=\"line\">        flag = 1 ; </span><br><span class=\"line\">        dfs ( to[i] , val + new_val[to[i]] ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ( ! flag ) &#123;</span><br><span class=\"line\">        ans[++num] = val ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void topo ( ) &#123;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= col ; i ++ ) &#123;</span><br><span class=\"line\">        if ( in[i] == 0 ) &#123;</span><br><span class=\"line\">            dfs ( i + n , new_val[i] ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool cmp ( int x , int y ) &#123; return x &gt; y ; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    scanf ( &quot;%d%d&quot; , &amp; n , &amp; m ) ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) scanf ( &quot;%d&quot; , &amp; a[i] ) ; </span><br><span class=\"line\">    while ( m -- ) &#123;</span><br><span class=\"line\">        int x , y ; scanf ( &quot;%d%d&quot; , &amp; x , &amp; y ) ; </span><br><span class=\"line\">        add ( x , y ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) &#123;</span><br><span class=\"line\">        if ( ! dfn[i] ) Tarjan ( i ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= col ; i ++ ) &#123;</span><br><span class=\"line\">        int new_node = i + n , val = 0 ;</span><br><span class=\"line\">        while ( ! Q[i].empty ( ) ) &#123;</span><br><span class=\"line\">            int x = Q[i].front ( ) ; Q[i].pop ( ) ; val += a[x] ; </span><br><span class=\"line\">            for ( int j = head[x] ; j ; j = nex[j] ) &#123;</span><br><span class=\"line\">                if ( group[to[j]] == group[x] ) continue ; </span><br><span class=\"line\">                add ( new_node , group[to[j]] + n ) ;</span><br><span class=\"line\">                in[to[j]] ++ ; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        new_val[i] = val ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    topo ( ) ; </span><br><span class=\"line\">    sort ( ans + 1 , ans + 1 + num , cmp ) ; </span><br><span class=\"line\">    printf ( &quot;%d&quot; , ans[1] ) ; </span><br><span class=\"line\">    return 0 ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "Tarjan"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/11/29/LCA/",
            "url": "http://amentiraz.github.io/2021/11/29/LCA/",
            "title": "LCA",
            "date_published": "2021-11-29T03:20:10.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-SjDEDaBh\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"29850611\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<blockquote>\n<p>LCA（Least Common Ancestors），即最近公共祖先，是指在有根树中，找出某两个结点 u 和 v 最近的公共祖先。 ——— 来自百度百科</p>\n</blockquote>\n<p>对于一棵树来说，我们为了求它的最近公共祖先其实思路和快速幂是差不多的，我们不能直接一个个的向上查找，这样会使时间复杂度爆表，我们应当以 2^k 的速率往上找，这样可以使其时间复杂度降为 log 级别。<br>\n不得不说 luogu 上的题解实在是晦涩难懂，我能明白他们在寻找相同深度的点的时候使用 log 可以更快的找到，但是其实可以一层层的向上跳，可能时间复杂度常数上乘个 5 左右的数，但影响不大。（还是自己的代码好懂）<br>\n听说树链剖分也可以做，但这玩意写起来太麻烦了，我高中最快时写一遍也要半个小时（毕竟 100 多行）<br>\n总之，我们求 LCA 时首先找每个节点 2^i 的父亲，然后先将它们跳到相同的深度然后再同时向上跳，注意特判其中一个节点就是 LCA。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ;</span><br><span class=\"line\"></span><br><span class=\"line\">const int maxn = 1000005 ;</span><br><span class=\"line\">int n , m , s ;</span><br><span class=\"line\">int head[maxn] , to[maxn] , nex[maxn] , cnt = 0 ;</span><br><span class=\"line\">int father[maxn][20] , dep[maxn] ;</span><br><span class=\"line\"></span><br><span class=\"line\">void add ( int x , int y ) &#123; nex[++cnt] = head[x] ; head[x] = cnt ; to[cnt] = y ; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void dfs ( int x , int fa , int depth ) &#123;</span><br><span class=\"line\">    father[x][0] = fa ; dep[x] = depth ;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= 19 ; i ++ ) &#123;</span><br><span class=\"line\">        father[x][i] = father[father[x][i-1]][i-1] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = head[x] ; i ; i = nex[i] ) &#123;</span><br><span class=\"line\">        if ( to[i] == fa ) continue ;</span><br><span class=\"line\">        dfs ( to[i] , x , depth + 1 ) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int LCA ( int x , int y ) &#123;</span><br><span class=\"line\">    if ( dep[x] &lt; dep[y] ) swap ( x , y ) ;</span><br><span class=\"line\">    for ( int i = 19 ; i &gt;= 0 ; i -- ) &#123;</span><br><span class=\"line\">        if ( dep[father[x][i]] &gt;= dep[y] ) &#123;</span><br><span class=\"line\">            x = father[x][i] ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ( x == y ) return x ;</span><br><span class=\"line\">    for ( int i = 19 ; i &gt;= 0 ; i -- ) &#123;</span><br><span class=\"line\">        if ( father[x][i] != father[y][i] ) &#123;</span><br><span class=\"line\">            x = father[x][i] , y = father[y][i] ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return father[x][0] ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    scanf ( &quot;%d%d%d&quot; , &amp; n , &amp; m , &amp; s ) ;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt; n ; i ++ ) &#123;</span><br><span class=\"line\">        int x , y ; scanf ( &quot;%d%d&quot; , &amp; x , &amp; y ) ;</span><br><span class=\"line\">        add ( x , y ) ; add ( y , x ) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs ( s , 0 , 1 ) ;</span><br><span class=\"line\">    while ( m -- ) &#123;</span><br><span class=\"line\">        int x , y ; scanf ( &quot;%d%d&quot; , &amp; x , &amp; y ) ;</span><br><span class=\"line\">        printf ( &quot;%d\\n&quot; , LCA ( x , y ) ) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "LCA"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/11/27/%E7%BA%BF%E6%AE%B5%E6%A0%91/",
            "url": "http://amentiraz.github.io/2021/11/27/%E7%BA%BF%E6%AE%B5%E6%A0%91/",
            "title": "线段树",
            "date_published": "2021-11-27T09:12:43.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-MwOaRFCC\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"27846868\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>线段树是一种树状数据结构，它可以区间加减，区间乘除等一系列操作，用于处理那种可以合并状态的数据，在使用其 3 倍左右的空间的代价下使得其修改、查询、求区间和等等操作变得更加快捷。但与此同时，我们无法利用它处理类似于区间最长 01 序列此类问题，而且线段树代码冗长，其实很容易写错（也可能是因为我太菜了）。<br>\n我们将一组数据进行如下处理，每相邻的两个数据有一个父亲节点来记录其总的状态，然后再记录其相邻父节点的总的状态，以此类推，最终得到一个树状结构，我们从上到下依次编号 1-n，这棵树满足父节点 * 2 = 左节点，父节点 * 2+1 = 右节点，设每个父节点代表 l-r 区间的状态，则左区间为 l,(r+l)/2 , 右区间为 (r+l)/2+1,r。根据此性质我们可以对他们进行维护。<br>\n每当我们访问一个节点，我们保证此节点的值一定正确，并尽可能少的改变其子孙节点的值，让时间消耗尽可能的小，同时把 lazy 标记也就是本来应该加的数传递到下一节点。<br>\n第一颗树实现了区间加与查询，第二颗树实现了区间乘法，加法，判断其中的先后顺序，其实也大同小异。<br>\n第三颗树用于实现历史最大值这种操作，然而由于本人电脑跑不动 500mb 的程序，再加之修改起来有点麻烦，就写个大致正确的程序摆在这了。<br>\n如果要继续完善，那么需要记录次大值并对于 spread 函数进行修改，就这样吧，后面再来补。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL ; </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">500005</span> ; </span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">L</span> &#123;</span><br><span class=\"line\">    LL val , add ; </span><br><span class=\"line\">&#125; t[maxn] ; </span><br><span class=\"line\">LL n , m , a[maxn] ; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( l == r ) &#123; t[p].val = a[l] ; <span class=\"keyword\">return</span> ; &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid ) ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r ) ; </span><br><span class=\"line\">    t[p].val = t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">spread</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( t[p].add ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; </span><br><span class=\"line\">        t[p&lt;&lt;<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p].add * ( mid - l + <span class=\"number\">1</span> ) ) , t[p&lt;&lt;<span class=\"number\">1</span>].add += t[p].add ; </span><br><span class=\"line\">        t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p].add * ( r - mid ) ) , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add += t[p].add ; </span><br><span class=\"line\">        t[p].add = <span class=\"number\">0</span> ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , <span class=\"type\">int</span> z )</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; t[p].val += z * ( r - l + <span class=\"number\">1</span> ) ; t[p].add += z ; <span class=\"keyword\">return</span> ; &#125;</span><br><span class=\"line\">   <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">   <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ; </span><br><span class=\"line\">   <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y , z ) ; </span><br><span class=\"line\">   t[p].val = t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ask</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; <span class=\"keyword\">return</span> t[p].val ; &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; LL ans = <span class=\"number\">0</span> ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) ans = ans + <span class=\"built_in\">ask</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) ans = ans + <span class=\"built_in\">ask</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%lld%lld&quot;</span> , &amp; n , &amp; m ) ; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i ++ ) <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , &amp; a[i] ) ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n ) ; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= m ; i ++ ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> com , x , y ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d%d&quot;</span> , &amp; com , &amp; x , &amp; y ) ; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( com == <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">            LL k ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , &amp; k ) ; </span><br><span class=\"line\">            <span class=\"built_in\">change</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y , k ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span> ( <span class=\"string\">&quot;%lld\\n&quot;</span> , <span class=\"built_in\">ask</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y ) ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100003</span> ;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span> <span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch = <span class=\"built_in\">getchar</span> ( ) ; <span class=\"type\">int</span> res = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( ch &gt; <span class=\"string\">&#x27;9&#x27;</span> || ch &lt; <span class=\"string\">&#x27;0&#x27;</span> ) ch = <span class=\"built_in\">getchar</span> ( ) ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span> ) res = res * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span> , ch = <span class=\"built_in\">getchar</span> ( ) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">L</span> &#123;</span><br><span class=\"line\">    ll mul , val , add ;</span><br><span class=\"line\">&#125; t[N&lt;&lt;<span class=\"number\">2</span>] ;</span><br><span class=\"line\"><span class=\"type\">int</span> n , m , a[N] , mod ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    t[p].mul = <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( l == r ) &#123; t[p].val = a[l] ; <span class=\"keyword\">return</span> ; &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid ) ;</span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r ) ;</span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>].val ) % mod ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">spread</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val * t[p].mul + t[p].add * ( mid - l + <span class=\"number\">1</span> ) ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val * t[p].mul + t[p].add * ( r - mid ) ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].mul = ( t[p&lt;&lt;<span class=\"number\">1</span>].mul * t[p].mul ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].mul = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].mul * t[p].mul ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].add = ( t[p&lt;&lt;<span class=\"number\">1</span>].add * t[p].mul + t[p].add ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add * t[p].mul + t[p].add ) % mod ;</span><br><span class=\"line\">    t[p].mul = <span class=\"number\">1</span> ; t[p].add = <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change2</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , ll z )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123;</span><br><span class=\"line\">        t[p].mul = ( t[p].mul * z ) % mod ;</span><br><span class=\"line\">        t[p].add = ( t[p].add * z ) % mod ;</span><br><span class=\"line\">        t[p].val = ( t[p].val * z ) % mod ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">spread</span> ( p , l , r ) ;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change2</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change2</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y , z ) ;</span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>].val ) % mod ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change1</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , ll z )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123;</span><br><span class=\"line\">        t[p].add = ( t[p].add + z ) % mod ;</span><br><span class=\"line\">        t[p].val = ( t[p].val + ( r - l + <span class=\"number\">1</span> ) * z ) % mod ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">spread</span> ( p , l , r ) ;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change1</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change1</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span> , r , x , y , z ) ;</span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>].val ) % mod ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">aska</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) <span class=\"keyword\">return</span> t[p].val ;</span><br><span class=\"line\">        <span class=\"built_in\">spread</span> ( p , l , r ) ;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">        ll ans = <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( x &lt;= mid ) ans += <span class=\"built_in\">aska</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( mid &lt; y ) ans += <span class=\"built_in\">aska</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ;</span><br><span class=\"line\">        ans %= mod ;</span><br><span class=\"line\">        t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>].val ) % mod ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span> ( ) ; m = <span class=\"built_in\">read</span> ( ) ; mod = <span class=\"built_in\">read</span> ( ) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i ++ ) <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d&quot;</span> , &amp; a[i] ) ;</span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n ) ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( m -- ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> command = <span class=\"built_in\">read</span> ( ) ; ll x = <span class=\"built_in\">read</span> ( ) , y = <span class=\"built_in\">read</span> ( ) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( command == <span class=\"number\">1</span> ) <span class=\"built_in\">change2</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y , <span class=\"built_in\">read</span> ( ) ) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( command == <span class=\"number\">2</span> ) <span class=\"built_in\">change1</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y , <span class=\"built_in\">read</span> ( ) ) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( command == <span class=\"number\">3</span> ) cout &lt;&lt; <span class=\"built_in\">aska</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y ) &lt;&lt; endl ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ; </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2000006</span> ; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL ; </span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">L</span> &#123;</span><br><span class=\"line\">    LL val , maxa , maxb , add , mina ;</span><br><span class=\"line\">&#125; t[maxn] ;</span><br><span class=\"line\">LL a[maxn&gt;&gt;<span class=\"number\">2</span>] ; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    t[p].mina = <span class=\"number\">0x7fffffff</span> ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( l == r ) &#123; t[p].maxa = t[p].maxb = t[p].val = a[l] ; <span class=\"keyword\">return</span> ; &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid ) ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r ) ; </span><br><span class=\"line\">    t[p].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxa , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa ) ; </span><br><span class=\"line\">    t[p].maxb = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb ) ; </span><br><span class=\"line\">    t[p].val = t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">spread</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"comment\">//这里有一定的问题，需要判断变为最小的影响，需要分类讨论，其余的没有问题（大概）</span></span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].val = <span class=\"built_in\">min</span> ( t[p].mina , ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p].add * ( mid - l + <span class=\"number\">1</span> ) ) ) ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val = <span class=\"built_in\">min</span> ( t[p].mina , ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p].add * ( r - mid ) ) ) ;</span><br><span class=\"line\">    <span class=\"comment\">//持续到这里</span></span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxa + t[p].add , t[p].mina == <span class=\"number\">0x7fffffff</span> ? <span class=\"number\">0</span> : t[p].mina ) ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa + t[p].add , t[p].mina == <span class=\"number\">0x7fffffff</span> ? <span class=\"number\">0</span> : t[p].mina ) ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].maxb = <span class=\"built_in\">max</span>( t[p&lt;&lt;<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>].maxa ) ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa ) ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].add += t[p].add ; t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add += t[p].add ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].mina = <span class=\"built_in\">min</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].mina , t[p].mina ) ; t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].mina = <span class=\"built_in\">min</span> ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].mina , t[p].mina ) ; </span><br><span class=\"line\">    t[p].mina = <span class=\"number\">0x7fffffff</span> ; t[p].add = <span class=\"number\">0</span> ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change1</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , LL z )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; </span><br><span class=\"line\">        t[p].maxa += z ; </span><br><span class=\"line\">        t[p].maxb = <span class=\"built_in\">max</span> ( t[p].maxb , t[p].maxa ) ; </span><br><span class=\"line\">        t[p].val = ( t[p].val + z * ( r - l + <span class=\"number\">1</span> ) ) ; </span><br><span class=\"line\">        t[p].add += z ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change1</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change1</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y , z ) ; </span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ) ; </span><br><span class=\"line\">    t[p].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxa , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa ) ;</span><br><span class=\"line\">    t[p].maxb = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb ) ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change2</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , LL z )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123;</span><br><span class=\"line\">        t[p].val = <span class=\"built_in\">min</span> ( t[p].val , z * ( r - l + <span class=\"number\">1</span> ) ) ; </span><br><span class=\"line\">        t[p].maxa = <span class=\"built_in\">min</span> ( z , t[p].maxa ) ;</span><br><span class=\"line\">        t[p].mina = z ; </span><br><span class=\"line\">        t[p].maxb = <span class=\"built_in\">max</span> ( t[p].maxb , t[p].maxa ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change2</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change2</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y , z ) ; </span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ) ; </span><br><span class=\"line\">    t[p].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxa , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa ) ; </span><br><span class=\"line\">    t[p].maxb = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb ) ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ask1</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; <span class=\"keyword\">return</span> t[p].val ; &#125;  </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; LL ans = <span class=\"number\">0</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) ans += <span class=\"built_in\">ask1</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) ans += <span class=\"built_in\">ask1</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ask2</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; <span class=\"keyword\">return</span> t[p].maxa ; &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; LL ans = <span class=\"number\">0x7fffffff</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) ans = <span class=\"built_in\">min</span> ( ans , <span class=\"built_in\">ask2</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ) ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) ans = <span class=\"built_in\">min</span> ( ans , <span class=\"built_in\">ask2</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ) ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ask3</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; <span class=\"keyword\">return</span> t[p].maxb ; &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; LL ans = <span class=\"number\">0x7fffffff</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) ans = <span class=\"built_in\">min</span> ( ans , <span class=\"built_in\">ask3</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) ans = <span class=\"built_in\">min</span> ( ans , <span class=\"built_in\">ask3</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ) ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , m ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d&quot;</span> , &amp; n , &amp; m ) ; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i ++ ) <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , &amp; a[i] ) ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n ) ; </span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( m -- ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d&quot;</span> , &amp; op ) ; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( op == <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; LL k ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d%lld&quot;</span> , &amp; l , &amp; r , &amp; k ) ; </span><br><span class=\"line\">            <span class=\"built_in\">change1</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r , k ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( op == <span class=\"number\">2</span> ) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; LL k ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d%lld&quot;</span> , &amp; l , &amp; r , &amp; k ) ; </span><br><span class=\"line\">            <span class=\"built_in\">change2</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r , k ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( op == <span class=\"number\">3</span> ) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d&quot;</span> , &amp; l , &amp; r ) ; </span><br><span class=\"line\">            <span class=\"built_in\">printf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , <span class=\"built_in\">ask1</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r ) ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( op == <span class=\"number\">4</span> ) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d&quot;</span> , &amp; l , &amp; r ) ;    </span><br><span class=\"line\">            <span class=\"built_in\">printf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , <span class=\"built_in\">ask2</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r ) ) ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d&quot;</span> , &amp; l , &amp; r ) ;    </span><br><span class=\"line\">            <span class=\"built_in\">printf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , <span class=\"built_in\">ask3</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r ) ) ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "线段树"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/11/27/Dijkstra/",
            "url": "http://amentiraz.github.io/2021/11/27/Dijkstra/",
            "title": "Dijkstra",
            "date_published": "2021-11-27T07:44:01.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-whvCdkCr\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1345488418\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>Dijkstra 算法用于解决单源最短路问题，假设起始点为 S，在最开始我们可以知道 S 到某些点的距离，从中取出最小的一个，我们可以保证在我们取出这个最小值的时候不可能有任何路径可以更短的到达此点，，此过程使用了贪心的思想。每当我们找出一个这样的点就更新 S 到与此点相连的其它点的距离，我们每一次取点都保证取出的是最短的且未被访问的点，这就是 Dijkstra 算法。</p>\n<span id=\"more\"></span>\n<p>网上对于 Dijkstra 的优缺点有很好的描述我就直接引用了：</p>\n<blockquote>\n<p>优点：O (N*N), 加堆优化：O (N*logN)<br>\n 缺点：在单源最短路径问题的某些实例中，可能存在权为负的边。<br>\n如果图 G＝（V，E）不包含从源 s 可达的负权回路，<br>\n则对所有 v∈V，最短路径的权定义 d (s,v) 依然正确，<br>\n即使它是一个负值也是如此。但如果存在一从 s 可达的负回路，<br>\n最短路径的权的定义就不能成立。S 到该回路上的结点就不存在最短路径。<br>\n当有向图中出现负权时，则 Dijkstra 算法失效。当不存在源 s 可达的负回路时，<br>\n我们可用 Bellman-Ford 算法实现。<br>\n————————————————<br>\n 版权声明：本文为 CSDN 博主「Chandery」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>\n原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkeTEyMDY0NzM2MDEvYXJ0aWNsZS9kZXRhaWxzLzUyNjQ4NjE5\">https://blog.csdn.net/cdy1206473601/article/details/52648619</span></p>\n</blockquote>\n<p>下面贴上我年轻时写的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;queue&gt;</span><br><span class=\"line\">#include&lt;vector&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ; </span><br><span class=\"line\"></span><br><span class=\"line\">const int maxn = 5000000 ;</span><br><span class=\"line\">int head[maxn] , nex[maxn] , to[maxn] , val[maxn] , cnt = 0 ; </span><br><span class=\"line\">int vis[maxn] , dis[maxn] ; </span><br><span class=\"line\">struct L &#123;</span><br><span class=\"line\">    int val , id ; </span><br><span class=\"line\">    bool operator &lt; ( const L &amp; x ) const &#123;</span><br><span class=\"line\">        return val &gt; x.val ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; ; </span><br><span class=\"line\"></span><br><span class=\"line\">void add ( int x , int y , int z ) &#123; nex[++cnt] = head[x] ; head[x] = cnt ; to[cnt] = y ; val[cnt] = z ; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">void dijkstra ( int s ) &#123; </span><br><span class=\"line\">    priority_queue &lt; L &gt; Q ; Q.push ( ( L ) &#123; 0 , s &#125; ) ; dis[s] = 0 ; </span><br><span class=\"line\">    while ( ! Q.empty ( ) ) &#123;</span><br><span class=\"line\">        L u = Q.top ( ) ; int x = u.id ; Q.pop ( ) ; </span><br><span class=\"line\">        if ( vis[x] ) continue ; vis[x] = 1 ; </span><br><span class=\"line\">        for ( int i = head[x] ; i ; i = nex[i] ) &#123; </span><br><span class=\"line\">            if ( dis[to[i]] &gt; dis[x] + val[i] ) &#123;</span><br><span class=\"line\">                dis[to[i]] = dis[x] + val[i] ; </span><br><span class=\"line\">                if ( ! vis[to[i]] ) Q.push ( ( L ) &#123; dis[to[i]] , to[i] &#125; ) ; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    int n , m , s ; scanf ( &quot;%d%d%d&quot; , &amp; n , &amp; m , &amp; s ) ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= m ; i ++ ) &#123;</span><br><span class=\"line\">        int x , y , z ; scanf ( &quot;%d%d%d&quot; , &amp; x , &amp; y , &amp; z ) ; </span><br><span class=\"line\">        add ( x , y , z ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) dis[i] = 0x7fffffff ; </span><br><span class=\"line\">    dijkstra ( s ) ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) printf ( &quot;%d &quot; , dis[i] ) ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "Dijkstra"
            ]
        }
    ]
}