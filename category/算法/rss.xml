<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Amentiraz • Posts by &#34;算法&#34; category</title>
        <link>http://Amentiraz.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Sat, 11 Dec 2021 10:19:40 +0800</pubDate>
        <lastBuildDate>Sat, 11 Dec 2021 10:19:40 +0800</lastBuildDate>
        <category>DP</category>
        <category>算法</category>
        <category>Dijkstra</category>
        <category>书评</category>
        <category>LCA</category>
        <category>代码</category>
        <category>分布式</category>
        <category>数学建模</category>
        <category>TOPSIS</category>
        <category>Matlab</category>
        <category>Tarjan</category>
        <category>学习笔记</category>
        <category>C语言</category>
        <category>复习资料</category>
        <category>python</category>
        <category>论文</category>
        <category>笔记</category>
        <category>生活</category>
        <category>读书笔记</category>
        <category>杂</category>
        <category>层次分析法</category>
        <category>诗</category>
        <category>指针</category>
        <category>c语言</category>
        <category>插值算法</category>
        <category>线段树</category>
        <category>结构</category>
        <category>题解</category>
        <item>
            <guid isPermalink="true">http://amentiraz.github.io/2021/12/11/%E8%A5%BF%E7%94%B5%E6%96%B0%E7%94%9F%E8%B5%9B%E7%BD%91%E7%BB%9C%E8%B5%9B%E9%A2%98%E8%A7%A3/</guid>
            <title>西电新生赛网络赛题解</title>
            <link>http://amentiraz.github.io/2021/12/11/%E8%A5%BF%E7%94%B5%E6%96%B0%E7%94%9F%E8%B5%9B%E7%BD%91%E7%BB%9C%E8%B5%9B%E9%A2%98%E8%A7%A3/</link>
            <category>题解</category>
            <pubDate>Sat, 11 Dec 2021 10:19:40 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;
    &lt;div id=&#34;aplayer-wsvnKcTb&#34; class=&#34;aplayer aplayer-tag-marker meting-tag-marker&#34;
         data-id=&#34;507001285&#34; data-server=&#34;netease&#34; data-type=&#34;song&#34; data-mode=&#34;circulation&#34; data-autoplay=&#34;true&#34; data-mutex=&#34;true&#34; data-listmaxheight=&#34;340px&#34; data-preload=&#34;none&#34; data-theme=&#34;#ad7a86&#34;
    &gt;&lt;/div&gt;
&lt;p&gt;持续六天的新生赛终于落下了帷幕，打了 8 道题，第 21 名，对于两年没有碰过 oi 的我来说已经是一个不错的成绩了，如果运气好的话还能水到一等奖，怎么说都血赚。&lt;br&gt;
但不得不说的是，我这次的状态比两年前打 CSPS 要好太多了，如果以我现在的心理素质和之前的知识水平去打，那肯定是不同的结果了。&lt;br&gt;
这次比赛原本想用 Amentiraz 这个昵称去打，但思来想去还是用了最开始的 dsfly 昵称去打，一来这个名称短（够装 B），二来这个名称是我最开始打 oi 时的昵称，意味着一个新的开始吧。&lt;br&gt;
说是六天，实际上就打了前三天，主要是还有本职的学习工作，第二是因为小说太好看了（笑）。还是把除了 J 题以外的所有题都摸了一遍，可以说除了 J 题我做不出来，其余的花时间都能做出来，放了 H 题和 K 题，H 题是因为纯模拟暴力，太恶心了，不想写，K 题是让你直接输出时间复杂度，搞了几下没出来，又不想去看资料，于是就放了。（留着时间看番不香吗）&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;t1位运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#t1位运算&#34;&gt;#&lt;/a&gt; T1 位运算&lt;/h3&gt;
&lt;p&gt;题意：输入 a，b，输出 a&amp;amp;b,a|b,a^b 的二进制表示&lt;br&gt;
签到题，特判值为 0 的情况，没啥说的&lt;br&gt;
代码：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void deal ( int x ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if ( x == 0 ) &amp;#123; cout &amp;lt;&amp;lt; &amp;quot;0&amp;quot; &amp;lt;&amp;lt; endl ; return ; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int a[10000] , len = 1 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while ( x ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[len++] = x &amp;amp; 1 ; x &amp;gt;&amp;gt;= 1 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = len - 1 ; i &amp;gt;= 1 ; i -- ) cout &amp;lt;&amp;lt; a[i] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; endl ; return ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int a , b ; scanf ( &amp;quot;%d%d&amp;quot; , &amp;amp; a , &amp;amp; b ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int ans1 = a &amp;amp; b , ans2 = a | b , ans3 = a ^ b ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    deal ( ans1 ) ; deal ( ans2 ) ; deal ( ans3 ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;t21931&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#t21931&#34;&gt;#&lt;/a&gt; T21931&lt;/h3&gt;
&lt;p&gt;题面：&lt;br&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gx9p89fa2vj30wl0fz7az.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
歌颂我们伟大的母校 90 周年的题目。&lt;br&gt;
一眼看不出来，先打表枚举找规律。大胆猜想最佳情况是把每一张劵平摊开，尽可能的覆盖到每一次买套餐，小心求证列几个数学公式就出来了，这题不难。关键是你要眼尖的看出如果不买饭那么就不花钱。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int T ; scanf ( &amp;quot;%d&amp;quot; , &amp;amp; T ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while ( T -- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n , m ; scanf ( &amp;quot;%d%d&amp;quot; , &amp;amp; n , &amp;amp; m ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int a[1000] , tot = 0 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for ( int i = 1 ; i &amp;lt;= n ; i ++ ) scanf ( &amp;quot;%d&amp;quot; , &amp;amp; a[i] ) , tot += a[i] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( m &amp;gt; n ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cout &amp;lt;&amp;lt; tot * 2 * ( m - n ) + tot * n - tot &amp;lt;&amp;lt; endl ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else if ( m == 0 ) cout &amp;lt;&amp;lt; &amp;quot;0&amp;quot; &amp;lt;&amp;lt; endl ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else cout &amp;lt;&amp;lt; m * tot - tot &amp;lt;&amp;lt; endl ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;t3等级展示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#t3等级展示&#34;&gt;#&lt;/a&gt; T3 等级展示&lt;/h3&gt;
&lt;p&gt;题意：&lt;br&gt;
类比于 qq 的等级，对应星星、月亮、太阳、皇冠有 *,(,0,W 给出等级，输出图标&lt;br&gt;
签到题，简单的一批，直接上代码&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n ; scanf ( &amp;quot;%d&amp;quot; , &amp;amp; n ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n / 64 ; i ++ ) cout &amp;lt;&amp;lt; &amp;quot;W&amp;quot; ; n %= 64 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n / 16 ; i ++ ) cout &amp;lt;&amp;lt; &amp;quot;O&amp;quot; ; n %= 16 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n / 4 ; i ++ ) cout &amp;lt;&amp;lt; &amp;quot;(&amp;quot; ; n %= 4 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) cout &amp;lt;&amp;lt; &amp;quot;*&amp;quot; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;t4边权之和&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#t4边权之和&#34;&gt;#&lt;/a&gt; T4 边权之和&lt;/h3&gt;
&lt;p&gt;题意：n 个点的无向完全图，对于每个点有点权 ai，对于两个点 i，j 的边权为 | ai-aj|，统计边权之和对于 998244353 取模值&lt;br&gt;
考虑把绝对值去掉，先把数组给排序，计算它们的和，如何整体计算即可，也不难。&lt;br&gt;
至此，新生赛所有的送分题以及送完了，后面的题或多或少都有些难度，这四道题基本上是所有接触过 c 的人都能写出来的，只是快慢罢了。&lt;br&gt;
我新生赛来迟了 30min，我写到这道题时排位 30 多名，后面排名基本上是只升不降，说明大部分人开始卡住了。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const long long mod = 998244353 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;long long a[1000006] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bool cmp ( int x , int y ) &amp;#123; return x &amp;gt; y ; &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n ; long long ans = 0 , tot = 0 ; scanf ( &amp;quot;%d&amp;quot; , &amp;amp; n ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf ( &amp;quot;%lld&amp;quot; , &amp;amp; a[i] ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tot += a[i] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sort ( a + 1 , a + 1 + n , cmp ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tot -= a[i] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans += ( ( long long ) ( n - i ) ) * a[i] - tot ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans %= mod ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; ans ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;t5tsy的轻音梦&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#t5tsy的轻音梦&#34;&gt;#&lt;/a&gt; T5tsy 的轻音梦&lt;/h3&gt;
&lt;p&gt;（没想到在这都能见到轻音厨，但可惜的是这个轻音厨太坑了）&lt;br&gt;
题面：&lt;br&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gx9ppizm8sj30wt09btag.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
请大家先看看那位交了 48 次都没过的大佬：&lt;br&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gx9pqbexghj30nh0hiajq.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
怎么说呢，从第一天开始我就仰望大佬的英姿，虽然最后大佬跟我 A 的题是一个数，但就凭这道题我就不得不佩服他。我一度怀疑他在整活，但看到他在比赛终都没有 A 掉这题，不由得对他产生崇高的敬意。&lt;br&gt;
我开始也被绕进去了，很明显，我们可以联想到幻方，幻方似乎是斜着放，中间是最中间的数，然后呈现一定规律依次放入数，但是我们怎么类比推理都无法得出正确的解法，特别是输出 - 1 给我了很大的迷惑，是不是要考虑奇数次项的奇偶关系？是不是对称放？等等，然而这些都是放屁。想出来正解后我觉得自己是个傻逼。&lt;br&gt;
正解：对于奇数次项考虑对角线为分隔除了正中间的一定为偶其余的依次按从大到小的顺序从对角线依次填入，保证左边是偶右边是奇就行。&lt;br&gt;
对于偶数次项直接依次填入即可&lt;br&gt;
（ls 的轻音梦碎了）&lt;br&gt;
代码：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int a[1005][1005] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int n ; scanf ( &amp;quot;%d&amp;quot; , &amp;amp; n ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	if ( n % 2 == 0 ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for ( int i = 1 ; i &amp;lt;= n * n ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;quot; &amp;quot; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if ( i % n == 0 ) cout &amp;lt;&amp;lt; endl ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	else if ( n == 1 ) cout &amp;lt;&amp;lt; &amp;quot;1&amp;quot; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for ( int i = 1 ; i &amp;lt;= n / 2 ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			a[i][i] = i * 2 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			a[i][i+1] = i * 2 + 1 ; 	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		a[1][3] = 1 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		a[n/2+1][n/2] = n + 1 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for ( int i = 1 ; i &amp;lt;= n / 2 + 1 ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int x = n / 2 + i , y = n / 2 + i ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			a[x][y] = n + 1 + i * 2 - 1 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			a[x+1][y] = n + 1 + i * 2 ;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int cur1 = n + 1 + ( n / 2 + 1 ) * 2 + 1 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int cur2 = cur1 - 1 ;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for ( int i = 1 ; i &amp;lt;= n ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for ( int j = 1 ; j &amp;lt;= n ; j ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if ( ! a[i][j] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					if ( i &amp;gt; j ) a[i][j] = cur2 , cur2 += 2 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					if ( j &amp;gt; i ) a[i][j] = cur1 , cur1 += 2 ; 	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				cout &amp;lt;&amp;lt; a[i][j] &amp;lt;&amp;lt; &amp;quot; &amp;quot; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			cout &amp;lt;&amp;lt; endl ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;t6奇怪的排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#t6奇怪的排序&#34;&gt;#&lt;/a&gt; T6 奇怪的排序&lt;/h3&gt;
&lt;p&gt;题意：&lt;br&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gx9q4jdkkwj30ge0d475c.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
这题是很有意思的一道题，考察算法线段树和逆序对，只能说挺难想的吧，难度估计有提高组 D2T1 的难度。&lt;br&gt;
我们发现这个神奇的算法是把每个最大的数抬到第 i 个位置上并对前 i 个数排序，第 i+1 个数按照大小顺序交换到自己的位置上，交换的次数为这个数不重复的逆序对。&lt;br&gt;
本身分析到这里我以为套个逆序对就完了，结果发现是不重复的，然后我就弄了一个小暴力，把这些重复的数强制给删掉，结果时间复杂度为 O (n^2*logn) 比他原来的还大，emmm。&lt;br&gt;
对于常见的求逆序对的方法归并和树状数组我都不是很熟悉，于是我就用最无脑的线段树去做，依次判断这个数是否读入过然后决定是否加入到逆序对的计算，最后加起来就行。时间复杂度为 O (nlogn)&lt;br&gt;
 代码：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef long long LL ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int maxn = 200005 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;struct L &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int val , add ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; t[maxn&amp;lt;&amp;lt;2] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n , m ; LL sum = 0 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;struct M &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int val , id ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; a[maxn] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int vis[maxn] , arank[maxn] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bool cmp ( M x , M y ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if ( x.val == y.val ) return x.id &amp;lt; y.id ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return x.val &amp;lt; y.val ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void spread ( int p , int l , int r ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if ( t[p].add ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int mid = ( l + r ) &amp;gt;&amp;gt; 1 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p&amp;lt;&amp;lt;1].val = ( t[p&amp;lt;&amp;lt;1].val + t[p].add * ( mid - l + 1 ) ) , t[p&amp;lt;&amp;lt;1].add += t[p].add ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p&amp;lt;&amp;lt;1|1].val = ( t[p&amp;lt;&amp;lt;1|1].val + t[p].add * ( r - mid ) ) , t[p&amp;lt;&amp;lt;1|1].add += t[p].add ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].add = 0 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void change ( int p , int l , int r , int x , int y , int z ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &amp;#123; t[p].val += z * ( r - l + 1 ) ; t[p].add += z ; return ; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   int mid = ( l + r ) &amp;gt;&amp;gt; 1 ; spread ( p , l , r ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if ( x &amp;lt;= mid ) change ( p &amp;lt;&amp;lt; 1 , l , mid , x , y , z ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if ( y &amp;gt; mid ) change ( p &amp;lt;&amp;lt; 1 | 1 , mid + 1 , r , x , y , z ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   t[p].val = t[p&amp;lt;&amp;lt;1].val + t[p&amp;lt;&amp;lt;1|1].val ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int ask ( int p , int l , int r , int x , int y ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &amp;#123; return t[p].val ; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int mid = ( l + r ) &amp;gt;&amp;gt; 1 ; spread ( p , l , r ) ; int ans = 0 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if ( x &amp;lt;= mid ) ans = ans + ask ( p &amp;lt;&amp;lt; 1 , l , mid , x , y ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if ( y &amp;gt; mid ) ans = ans + ask ( p &amp;lt;&amp;lt; 1 | 1 , mid + 1 , r , x , y ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ans ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf ( &amp;quot;%d&amp;quot; , &amp;amp; n ) ; int maxn = 0 , site = 0 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf ( &amp;quot;%d&amp;quot; , &amp;amp; a[i].val ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( a[i].val &amp;gt; maxn ) maxn = a[i].val , site = i ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= site ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( a[i].val &amp;gt; a[1].val ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            swap ( a[i].val , a[1].val ) ; sum += 1LL ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) a[i].id = i ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sort ( a + 1 , a + 1 + n , cmp ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int cur = 2 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( a[i].val == a[i-1].val ) cur -- ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        arank[a[i].id] = cur ++ ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sum += ( LL ) ( ask ( 1 , 1 , n , arank[i] , arank[i] ) ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( vis[arank[i]] ) continue ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vis[arank[i]] ++ ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        change ( 1 , 1 , n , 1 , arank[i] - 1 , 1 ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; sum ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;t7更高更妙的字符游戏&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#t7更高更妙的字符游戏&#34;&gt;#&lt;/a&gt; T7 更高更妙的字符游戏&lt;/h3&gt;
&lt;p&gt;题面：&lt;br&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gx9qg4e2lij30m607qjsl.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
对于我来说，博弈论分为两种，一种是简单的，一种是做不出来的。&lt;br&gt;
我在比赛中惊喜的发现居然有超过 5 个人做出来了这道题，我稍加思索，然后大胆假设，也没小心求证，直接交了然后就 A 了，www。&lt;br&gt;
考虑两种必死的情况，也就是之差一个的和不差的，直接判断就行。对于其它情况，我们从上帝视角来看，如果是我发现下一步我可能会输，我们直接把那个字符删了就行，但是万一删了还是必死呢。我们假设有 abcabc 这种情况，我们肯定不可能删 b，删了就死，但我们可以删最边上的 a 和 c 啊，那么最终的赢家只由字符串的大小决定&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int T ; scanf ( &amp;quot;%d&amp;quot; , &amp;amp; T ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int flag = 2 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while ( T -- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        flag = 2 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n ; scanf ( &amp;quot;%d&amp;quot; , &amp;amp; n ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        char a[1000006] ; a[n+1] = 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf ( &amp;quot;%s&amp;quot; , a + 1 ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for ( int i = 1 ; i &amp;lt;= n - 1 ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if ( a[i] == a[i+1] ) flag = 0 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if ( a[i] == a[i+2] &amp;amp;&amp;amp; i + 2 &amp;lt;= n ) flag = min ( flag , 1 ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( flag == 0 ) cout &amp;lt;&amp;lt; &amp;quot;pllj&amp;quot; &amp;lt;&amp;lt; endl ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else if ( flag == 1 ) cout &amp;lt;&amp;lt; &amp;quot;freesin&amp;quot; &amp;lt;&amp;lt; endl ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            flag = n % 2 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if ( flag == 0 ) cout &amp;lt;&amp;lt; &amp;quot;pllj&amp;quot; &amp;lt;&amp;lt; endl ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            else if ( flag == 1 ) cout &amp;lt;&amp;lt; &amp;quot;freesin&amp;quot; &amp;lt;&amp;lt; endl ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;t8内存占用计算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#t8内存占用计算&#34;&gt;#&lt;/a&gt; T8 内存占用计算&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gx9qmm6ve0j30hu0i240c.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
纯模拟，利用高精的思想去比较，乘法就先判断位数够不够如果正好就逐位比较，想了思路感觉很恶心没写代码，如果说错了还请谅解。&lt;/p&gt;
&lt;h3 id=&#34;t9tsy的排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#t9tsy的排序&#34;&gt;#&lt;/a&gt; T9tsy 的排序&lt;/h3&gt;
&lt;p&gt;题面：&lt;br&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gx9qpp37ttj30qg06z0u0.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三年 oi 一场空，不开 long long 见祖宗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个数只出现一次，我们可以计算它们的逆序对，然后就可以算出它们的正序对等等数据，所以我们只需枚举中间两位，答案就是对于每个逆序对，求两个数左边比他们小的和右边比它们大的数的积。&lt;br&gt;
但这个算法的复杂度还是 O (n^2)，我们把每个数从大到小丢入线段树中，把标号大于它本身的数都加上它的正序对的个数，强制强制把时间复杂度压缩到 O (nlogn)，再一次性乘起来就行。&lt;br&gt;
注意一定要开 longlong&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; LL ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;number&#34;&gt;300005&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mod = &lt;span class=&#34;number&#34;&gt;35198030&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;L&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LL add , val ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; t[maxn&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a[maxn] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;M&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; val , id ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; f[maxn] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LL g[maxn] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;spread&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( t[p].add ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p].add * ( mid - l + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) ) % mod , t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].add += t[p].add ; t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].add %= mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p].add * ( r - mid ) ) % mod , t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].add += t[p].add ; t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].add %= mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].add = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;change&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y , LL z )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &amp;#123; t[p].val += z * ( r - l + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) ; t[p].add += z ; t[p].val %= mod , t[p].add %= mod ; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; &lt;span class=&#34;built_in&#34;&gt;spread&lt;/span&gt; ( p , l , r ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= mid ) &lt;span class=&#34;built_in&#34;&gt;change&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid , x , y , z ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( y &amp;gt; mid ) &lt;span class=&#34;built_in&#34;&gt;change&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r , x , y , z ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   t[p].val = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;LL &lt;span class=&#34;title&#34;&gt;ask&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y )&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; t[p].val % mod ; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; &lt;span class=&#34;built_in&#34;&gt;spread&lt;/span&gt; ( p , l , r ) ; LL ans = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= mid ) ans = ( ans + &lt;span class=&#34;built_in&#34;&gt;ask&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid , x , y ) ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( y &amp;gt; mid ) ans = ( ans + &lt;span class=&#34;built_in&#34;&gt;ask&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r , x , y ) ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n ; &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; , &amp;amp; n ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; i &amp;lt;= n ; i ++ ) &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; , &amp;amp; a[i] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; i &amp;lt;= n ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        f[a[i]].val = &lt;span class=&#34;built_in&#34;&gt;ask&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , a[i] , a[i] ) ; f[a[i]].id = i ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;change&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , a[i] , n , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ; i &amp;lt;= ( n &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; ) ; i ++ ) t[i].add = t[i].val = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = n ; i &amp;gt;= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; i -- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ind = f[i].id ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        g[i] = ( &lt;span class=&#34;built_in&#34;&gt;ask&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , ind , ind ) ) % mod ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;change&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , ind , n , f[i].val ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LL ans = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; i &amp;lt;= n ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        LL num = ( ( n - a[i] ) - ( i - f[a[i]].val - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans = ( ans + ( num * g[a[i]] ) ) % mod ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; ans ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;t10璀璨星空&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#t10璀璨星空&#34;&gt;#&lt;/a&gt; T10 璀璨星空&lt;/h3&gt;
&lt;p&gt;题意：&lt;br&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gx9qz63046j30fy0fq3zm.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
没去做，也没有想，全场也只有六个做出来了，后面如果它们发题解再补吧。（还得补高数欠下的）&lt;/p&gt;
&lt;h3 id=&#34;t11复杂度理论初步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#t11复杂度理论初步&#34;&gt;#&lt;/a&gt; T11 复杂度理论初步&lt;/h3&gt;
&lt;p&gt;题意：&lt;br&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gx9r210kolj30g60g5q3j.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gx9r29droxj30hm0guaas.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gx9r2gd287j30gl0aeq35.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gx9r2nnny9j30fu0dnmxw.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
提交了几次没对就没提交了。有几个结论还是可以记下来：对于 for 循环的时间复杂度就是最内层之积，对于递归就是递归的次数 * 每次递归的时间复杂度。同样的，有题解再做吧。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://amentiraz.github.io/2021/12/02/DP/</guid>
            <title>DP</title>
            <link>http://amentiraz.github.io/2021/12/02/DP/</link>
            <category>DP</category>
            <category>算法</category>
            <pubDate>Thu, 02 Dec 2021 17:26:14 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;
    &lt;div id=&#34;aplayer-WaDiIQOe&#34; class=&#34;aplayer aplayer-tag-marker meting-tag-marker&#34;
         data-id=&#34;464413083&#34; data-server=&#34;netease&#34; data-type=&#34;song&#34; data-mode=&#34;circulation&#34; data-autoplay=&#34;true&#34; data-mutex=&#34;true&#34; data-listmaxheight=&#34;340px&#34; data-preload=&#34;none&#34; data-theme=&#34;#ad7a86&#34;
    &gt;&lt;/div&gt;
&lt;p&gt;学了三天 DP 连个 P 都不会，总的来说就是寄了，每道题不看题解就做不来，试着做了做三道提高组难度的题，做出来了俩，另外一个没有思路。这俩题我都想出了大部分思路，但最后几步由于经验问题没想出来。做完后我以为我懂了，然后膨胀了，去挑战&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDExMDg=&#34;&gt;低价购买&lt;/span&gt;这道题。然后不出意外寄了。打算先不弄这个了，等以后在弄，先把之前写的贴上来吧。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQ4MzI=&#34;&gt;珈百璃的堕落&lt;/span&gt;&lt;br&gt;
这番是好看的，题是不会的。&lt;br&gt;
这道题有三个麻烦的点，一个是范围的确定，一个是 dp 数组的含义确定，还有一个是压缩数组的大小。&lt;br&gt;
通过这道题我掌握了基本的 DP 递推的根据和要领，意思就是我能证明 dp 递推的正确性了，但然而并没有什么卵用，不会的还是不会。&lt;br&gt;
我在高中时就做出来了这道题，但我认为在我高中的时候是不可能想出这道题的思路的，可以说我高中学竞赛就是在自欺欺人了（笑）。但讲道理的是，我起步太慢了，那个时候我也不是什么天才，依葫芦画瓢才是我应该干的，不管怎样我现在是不能这么干了。&lt;br&gt;
一个很重要的点是，我们要继承上一个状态，又不能破坏现在的状态，所以起码要二维的数组，我们要尽力压缩空间，注意到第一维只会用到上一个的状态，所以我们调整一下。&lt;br&gt;
代码：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int tots , totc , dp[2][2000006] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int T = 1000000 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char a[2000006] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n ; scanf ( &amp;quot;%d&amp;quot; , &amp;amp; n ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int l = 0 , r = 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 0 ; i &amp;lt;= 2000006 ; i ++ ) dp[0][i] = dp[1][i] = -100000006 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dp[0][T] = 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf ( &amp;quot;%s&amp;quot; , a ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int len = strlen ( a ) , tots = 0 , totc = 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for ( int j = 0 ; j &amp;lt; len ; j += 2 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a[j] == &amp;#x27;s&amp;#x27; ? tots ++ : totc ++ ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int v = totc , w = tots - totc ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        l = min ( l + w , l ) ; r = max ( r + w , r ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for ( int j = l ; j &amp;lt;= r ; j ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dp[i&amp;amp;1][T+j] = max ( dp[i&amp;amp;1^1][T+j] , dp[i&amp;amp;1][T+j] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dp[i&amp;amp;1][T+j] = max ( dp[i&amp;amp;1^1][T+j-w] + v , dp[i&amp;amp;1][T+j] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; dp[n&amp;amp;1][T] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDExNTY=&#34;&gt;垃圾陷阱&lt;/span&gt;&lt;br&gt;
其实高度和维持生命的时间可以换一下，就是时间做数组，生命做值，但太麻烦了，就没写。&lt;br&gt;
要时刻记住当前状态由上一个状态推导而来，别自己吓自己。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;struct L &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int t , f , h ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; trash[1005] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int dp[105][105] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bool cmp ( L x , L y ) &amp;#123; return x.t &amp;lt; y.t ; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int D , G ; scanf ( &amp;quot;%d%d&amp;quot; , &amp;amp; D , &amp;amp; G ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= G ; i ++ ) scanf ( &amp;quot;%d%d%d&amp;quot; , &amp;amp; trash[i].t , &amp;amp; trash[i].f , &amp;amp; trash[i].h ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sort ( trash + 1 , trash + 1 + G , cmp ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dp[0][0] = 10 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= G ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for ( int j = 0 ; j &amp;lt;= D ; j ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if ( j &amp;gt;= trash[i].h &amp;amp;&amp;amp; dp[i-1][j-trash[i].h] &amp;gt;= trash[i].t ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dp[i][j] = max ( dp[i-1][j-trash[i].h] ,dp[i][j] ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if ( dp[i-1][j] &amp;gt;= trash[i].t ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dp[i][j] = max ( dp[i-1][j] + trash[i].f , dp[i][j] ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= G ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( dp[i][D] != 0 ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cout &amp;lt;&amp;lt; trash[i].t ; return 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int now = 10 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= G; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( now &amp;lt; trash[i].t - trash[i-1].t ) &amp;#123; cout &amp;lt;&amp;lt; trash[i-1].t + now ; return 0 ; &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else now = now - trash[i].t + trash[i-1].t + trash[i].f ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; trash[G].t + now ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://amentiraz.github.io/2021/11/29/Tarjan/</guid>
            <title>Tarjan</title>
            <link>http://amentiraz.github.io/2021/11/29/Tarjan/</link>
            <category>算法</category>
            <category>Tarjan</category>
            <pubDate>Mon, 29 Nov 2021 16:50:27 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;
    &lt;div id=&#34;aplayer-JOchnjtC&#34; class=&#34;aplayer aplayer-tag-marker meting-tag-marker&#34;
         data-id=&#34;488388731&#34; data-server=&#34;netease&#34; data-type=&#34;song&#34; data-mode=&#34;circulation&#34; data-autoplay=&#34;true&#34; data-mutex=&#34;true&#34; data-listmaxheight=&#34;340px&#34; data-preload=&#34;none&#34; data-theme=&#34;#ad7a86&#34;
    &gt;&lt;/div&gt;
&lt;p&gt;想当年高中组织活动的时候我还专门写过 Tarjan 的流程和证明，如今已经忘的干干净净，原来的代码也找不到了，只能现写了。&lt;br&gt;
总的来说就是利用一个栈，将每个访问到的点 push 入栈，在寻找的过程中记录两个值，一个是 dfn—— 它是第几个搜索到的，一个是 low—— 它能衍生的点中 dfn 最小的值。如果一个点 dfn==low 说明它本身就是最小的点，把它及它栈以上的点全部 pop 出来就行，因为它上面的点必定是与它形成强联通分量。我们不妨假设它上面的点有不是它强联通分量的，那么此点在回溯到它本身的时候只有两种情况，一是它本身是强联通最小的点，那么在找到此点时会把它上面的点全部 pop 出去，另一种是它不是最小点，那么在遍历的过程中总会到第一种情况把它排除。&lt;br&gt;
Tarjan 程序是正确无误的，然后最后要跑一个拓扑，然鹅我不大会。luogu 上爆了 40pt，然后去看别人的题解秒懂。用拓扑可以优化掉 ans、Q、new_val 等等数组，估计就 80pt 了，然后我们还得用 dp 去解决菊花图这种类型的数据。&lt;br&gt;
这道题还给人一个教训是，对于缩点的题，我们记录下每条路径的开始与结束去构造新图，没必要单独列个 Q 这种数组。&lt;br&gt;
40pt 代码如下：&lt;br&gt;
（其实会个 Tarjan 就行了吧）&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int maxn = 100005 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n , m ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int head[maxn] , val[maxn] , nex[maxn] , cnt , to[maxn] , group[10004] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int tot , ind , a[10004] , stac[10004] , dfn[10004] , vis[10004] , low[10004] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue &amp;lt; int &amp;gt; Q[10004] ; int col , in[10004] , new_val[10004] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int ans[10004] , num ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void add ( int x , int y ) &amp;#123; nex[++cnt] = head[x] ; head[x] = cnt ; to[cnt] = y ; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void Tarjan ( int u ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfn[u] = low[u] = ++ tot ; vis[u] = 1 ; stac[++ind] = u ;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = head[u] ; i ; i = nex[i] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( ! dfn[to[i]] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Tarjan ( to[i] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            low[u] = min ( low[u] , low[to[i]] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else if ( vis[to[i]] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            low[u] = min ( low[u] , low[to[i]] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if ( low[u] == dfn[u] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int v ; col ++ ;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while ( v = stac[ind--] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Q[col].push ( v ) ; group[v] = col ;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            vis[v] = 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if ( v == u ) break ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void dfs ( int x , int val ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int flag = 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = head[x] ; i ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        flag = 1 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs ( to[i] , val + new_val[to[i]] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if ( ! flag ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans[++num] = val ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void topo ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= col ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( in[i] == 0 ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dfs ( i + n , new_val[i] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bool cmp ( int x , int y ) &amp;#123; return x &amp;gt; y ; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf ( &amp;quot;%d%d&amp;quot; , &amp;amp; n , &amp;amp; m ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) scanf ( &amp;quot;%d&amp;quot; , &amp;amp; a[i] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while ( m -- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int x , y ; scanf ( &amp;quot;%d%d&amp;quot; , &amp;amp; x , &amp;amp; y ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        add ( x , y ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( ! dfn[i] ) Tarjan ( i ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= col ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int new_node = i + n , val = 0 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while ( ! Q[i].empty ( ) ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            int x = Q[i].front ( ) ; Q[i].pop ( ) ; val += a[x] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for ( int j = head[x] ; j ; j = nex[j] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if ( group[to[j]] == group[x] ) continue ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                add ( new_node , group[to[j]] + n ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                in[to[j]] ++ ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        new_val[i] = val ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    topo ( ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sort ( ans + 1 , ans + 1 + num , cmp ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf ( &amp;quot;%d&amp;quot; , ans[1] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://amentiraz.github.io/2021/11/29/LCA/</guid>
            <title>LCA</title>
            <link>http://amentiraz.github.io/2021/11/29/LCA/</link>
            <category>算法</category>
            <category>LCA</category>
            <pubDate>Mon, 29 Nov 2021 11:20:10 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;
    &lt;div id=&#34;aplayer-SjDEDaBh&#34; class=&#34;aplayer aplayer-tag-marker meting-tag-marker&#34;
         data-id=&#34;29850611&#34; data-server=&#34;netease&#34; data-type=&#34;song&#34; data-mode=&#34;circulation&#34; data-autoplay=&#34;true&#34; data-mutex=&#34;true&#34; data-listmaxheight=&#34;340px&#34; data-preload=&#34;none&#34; data-theme=&#34;#ad7a86&#34;
    &gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;LCA（Least Common Ancestors），即最近公共祖先，是指在有根树中，找出某两个结点 u 和 v 最近的公共祖先。 ——— 来自百度百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于一棵树来说，我们为了求它的最近公共祖先其实思路和快速幂是差不多的，我们不能直接一个个的向上查找，这样会使时间复杂度爆表，我们应当以 2^k 的速率往上找，这样可以使其时间复杂度降为 log 级别。&lt;br&gt;
不得不说 luogu 上的题解实在是晦涩难懂，我能明白他们在寻找相同深度的点的时候使用 log 可以更快的找到，但是其实可以一层层的向上跳，可能时间复杂度常数上乘个 5 左右的数，但影响不大。（还是自己的代码好懂）&lt;br&gt;
听说树链剖分也可以做，但这玩意写起来太麻烦了，我高中最快时写一遍也要半个小时（毕竟 100 多行）&lt;br&gt;
总之，我们求 LCA 时首先找每个节点 2^i 的父亲，然后先将它们跳到相同的深度然后再同时向上跳，注意特判其中一个节点就是 LCA。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int maxn = 1000005 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n , m , s ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int head[maxn] , to[maxn] , nex[maxn] , cnt = 0 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int father[maxn][20] , dep[maxn] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void add ( int x , int y ) &amp;#123; nex[++cnt] = head[x] ; head[x] = cnt ; to[cnt] = y ; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void dfs ( int x , int fa , int depth ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    father[x][0] = fa ; dep[x] = depth ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= 19 ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        father[x][i] = father[father[x][i-1]][i-1] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = head[x] ; i ; i = nex[i] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( to[i] == fa ) continue ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs ( to[i] , x , depth + 1 ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int LCA ( int x , int y ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if ( dep[x] &amp;lt; dep[y] ) swap ( x , y ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 19 ; i &amp;gt;= 0 ; i -- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( dep[father[x][i]] &amp;gt;= dep[y] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x = father[x][i] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if ( x == y ) return x ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 19 ; i &amp;gt;= 0 ; i -- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( father[x][i] != father[y][i] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x = father[x][i] , y = father[y][i] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return father[x][0] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf ( &amp;quot;%d%d%d&amp;quot; , &amp;amp; n , &amp;amp; m , &amp;amp; s ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt; n ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int x , y ; scanf ( &amp;quot;%d%d&amp;quot; , &amp;amp; x , &amp;amp; y ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        add ( x , y ) ; add ( y , x ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs ( s , 0 , 1 ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while ( m -- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int x , y ; scanf ( &amp;quot;%d%d&amp;quot; , &amp;amp; x , &amp;amp; y ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf ( &amp;quot;%d\n&amp;quot; , LCA ( x , y ) ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://amentiraz.github.io/2021/11/27/%E7%BA%BF%E6%AE%B5%E6%A0%91/</guid>
            <title>线段树</title>
            <link>http://amentiraz.github.io/2021/11/27/%E7%BA%BF%E6%AE%B5%E6%A0%91/</link>
            <category>算法</category>
            <category>线段树</category>
            <pubDate>Sat, 27 Nov 2021 17:12:43 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;
    &lt;div id=&#34;aplayer-MwOaRFCC&#34; class=&#34;aplayer aplayer-tag-marker meting-tag-marker&#34;
         data-id=&#34;27846868&#34; data-server=&#34;netease&#34; data-type=&#34;song&#34; data-mode=&#34;circulation&#34; data-autoplay=&#34;true&#34; data-mutex=&#34;true&#34; data-listmaxheight=&#34;340px&#34; data-preload=&#34;none&#34; data-theme=&#34;#ad7a86&#34;
    &gt;&lt;/div&gt;
&lt;p&gt;线段树是一种树状数据结构，它可以区间加减，区间乘除等一系列操作，用于处理那种可以合并状态的数据，在使用其 3 倍左右的空间的代价下使得其修改、查询、求区间和等等操作变得更加快捷。但与此同时，我们无法利用它处理类似于区间最长 01 序列此类问题，而且线段树代码冗长，其实很容易写错（也可能是因为我太菜了）。&lt;br&gt;
我们将一组数据进行如下处理，每相邻的两个数据有一个父亲节点来记录其总的状态，然后再记录其相邻父节点的总的状态，以此类推，最终得到一个树状结构，我们从上到下依次编号 1-n，这棵树满足父节点 * 2 = 左节点，父节点 * 2+1 = 右节点，设每个父节点代表 l-r 区间的状态，则左区间为 l,(r+l)/2 , 右区间为 (r+l)/2+1,r。根据此性质我们可以对他们进行维护。&lt;br&gt;
每当我们访问一个节点，我们保证此节点的值一定正确，并尽可能少的改变其子孙节点的值，让时间消耗尽可能的小，同时把 lazy 标记也就是本来应该加的数传递到下一节点。&lt;br&gt;
第一颗树实现了区间加与查询，第二颗树实现了区间乘法，加法，判断其中的先后顺序，其实也大同小异。&lt;br&gt;
第三颗树用于实现历史最大值这种操作，然而由于本人电脑跑不动 500mb 的程序，再加之修改起来有点麻烦，就写个大致正确的程序摆在这了。&lt;br&gt;
如果要继续完善，那么需要记录次大值并对于 spread 函数进行修改，就这样吧，后面再来补。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; LL ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;number&#34;&gt;500005&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;L&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LL val , add ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; t[maxn] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LL n , m , a[maxn] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;build&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( l == r ) &amp;#123; t[p].val = a[l] ; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].val = t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;spread&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( t[p].add ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p].add * ( mid - l + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) ) , t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].add += t[p].add ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p].add * ( r - mid ) ) , t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].add += t[p].add ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].add = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;change&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; z )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &amp;#123; t[p].val += z * ( r - l + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) ; t[p].add += z ; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; &lt;span class=&#34;built_in&#34;&gt;spread&lt;/span&gt; ( p , l , r ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= mid ) &lt;span class=&#34;built_in&#34;&gt;change&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid , x , y , z ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( y &amp;gt; mid ) &lt;span class=&#34;built_in&#34;&gt;change&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r , x , y , z ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   t[p].val = t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;LL &lt;span class=&#34;title&#34;&gt;ask&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y )&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; t[p].val ; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; &lt;span class=&#34;built_in&#34;&gt;spread&lt;/span&gt; ( p , l , r ) ; LL ans = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= mid ) ans = ans + &lt;span class=&#34;built_in&#34;&gt;ask&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid , x , y ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( y &amp;gt; mid ) ans = ans + &lt;span class=&#34;built_in&#34;&gt;ask&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r , x , y ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%lld%lld&amp;quot;&lt;/span&gt; , &amp;amp; n , &amp;amp; m ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; i &amp;lt;= n ; i ++ ) &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%lld&amp;quot;&lt;/span&gt; , &amp;amp; a[i] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; i &amp;lt;= m ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; com , x , y ; &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d%d&amp;quot;&lt;/span&gt; , &amp;amp; com , &amp;amp; x , &amp;amp; y ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( com == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            LL k ; &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%lld&amp;quot;&lt;/span&gt; , &amp;amp; k ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;change&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , x , y , k ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%lld\n&amp;quot;&lt;/span&gt; , &lt;span class=&#34;built_in&#34;&gt;ask&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , x , y ) ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; N = &lt;span class=&#34;number&#34;&gt;100003&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; ll ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; ch = &lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt; ( ) ; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ( ch &amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt; || ch &amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; ) ch = &lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt; ( ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ( ch &amp;gt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt; ) res = res * &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; + ch - &lt;span class=&#34;number&#34;&gt;48&lt;/span&gt; , ch = &lt;span class=&#34;built_in&#34;&gt;getchar&lt;/span&gt; ( ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;L&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ll mul , val , add ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; t[N&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n , m , a[N] , mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;build&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].mul = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( l == r ) &amp;#123; t[p].val = a[l] ; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].val = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;spread&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val * t[p].mul + t[p].add * ( mid - l + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val * t[p].mul + t[p].add * ( r - mid ) ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].mul = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].mul * t[p].mul ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].mul = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].mul * t[p].mul ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].add = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].add * t[p].mul + t[p].add ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].add = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].add * t[p].mul + t[p].add ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].mul = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; t[p].add = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;change2&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y , ll z )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].mul = ( t[p].mul * z ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].add = ( t[p].add * z ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].val = ( t[p].val * z ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;spread&lt;/span&gt; ( p , l , r ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= mid ) &lt;span class=&#34;built_in&#34;&gt;change2&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid , x , y , z ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( y &amp;gt; mid ) &lt;span class=&#34;built_in&#34;&gt;change2&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r , x , y , z ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].val = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;change1&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y , ll z )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].add = ( t[p].add + z ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].val = ( t[p].val + ( r - l + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) * z ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;spread&lt;/span&gt; ( p , l , r ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= mid ) &lt;span class=&#34;built_in&#34;&gt;change1&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid , x , y , z ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( y &amp;gt; mid ) &lt;span class=&#34;built_in&#34;&gt;change1&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r , x , y , z ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].val = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;ll &lt;span class=&#34;title&#34;&gt;aska&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; t[p].val ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;spread&lt;/span&gt; ( p , l , r ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ll ans = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= mid ) ans += &lt;span class=&#34;built_in&#34;&gt;aska&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid , x , y ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( mid &amp;lt; y ) ans += &lt;span class=&#34;built_in&#34;&gt;aska&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r , x , y ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans %= mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].val = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val ) % mod ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    n = &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt; ( ) ; m = &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt; ( ) ; mod = &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt; ( ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; i &amp;lt;= n ; i ++ ) &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; , &amp;amp; a[i] ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ( m -- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; command = &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt; ( ) ; ll x = &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt; ( ) , y = &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt; ( ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( command == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) &lt;span class=&#34;built_in&#34;&gt;change2&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , x , y , &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt; ( ) ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( command == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; ) &lt;span class=&#34;built_in&#34;&gt;change1&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , x , y , &lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt; ( ) ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( command == &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; ) cout &amp;lt;&amp;lt; &lt;span class=&#34;built_in&#34;&gt;aska&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , x , y ) &amp;lt;&amp;lt; endl ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;number&#34;&gt;2000006&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; LL ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;L&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LL val , maxa , maxb , add , mina ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; t[maxn] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LL a[maxn&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;build&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].mina = &lt;span class=&#34;number&#34;&gt;0x7fffffff&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( l == r ) &amp;#123; t[p].maxa = t[p].maxb = t[p].val = a[l] ; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].maxa = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt; ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxa , t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxa ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].maxb = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt; ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxb , t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxb ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].val = t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;spread&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//这里有一定的问题，需要判断变为最小的影响，需要分类讨论，其余的没有问题（大概）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt; ( t[p].mina , ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p].add * ( mid - l + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) ) ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt; ( t[p].mina , ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p].add * ( r - mid ) ) ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//持续到这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxa = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt; ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxa + t[p].add , t[p].mina == &lt;span class=&#34;number&#34;&gt;0x7fffffff&lt;/span&gt; ? &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; : t[p].mina ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxa = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt; ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxa + t[p].add , t[p].mina == &lt;span class=&#34;number&#34;&gt;0x7fffffff&lt;/span&gt; ? &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; : t[p].mina ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxb = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxb , t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxa ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxb = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt; ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxb , t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxa ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].add += t[p].add ; t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].add += t[p].add ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].mina = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt; ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].mina , t[p].mina ) ; t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].mina = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt; ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].mina , t[p].mina ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].mina = &lt;span class=&#34;number&#34;&gt;0x7fffffff&lt;/span&gt; ; t[p].add = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;change1&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y , LL z )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].maxa += z ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].maxb = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt; ( t[p].maxb , t[p].maxa ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].val = ( t[p].val + z * ( r - l + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].add += z ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; &lt;span class=&#34;built_in&#34;&gt;spread&lt;/span&gt; ( p , l , r ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= mid ) &lt;span class=&#34;built_in&#34;&gt;change1&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid , x , y , z ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( y &amp;gt; mid ) &lt;span class=&#34;built_in&#34;&gt;change1&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r , x , y , z ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].val = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].maxa = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt; ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxa , t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxa ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].maxb = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt; ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxb , t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxb ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;change2&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y , LL z )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].val = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt; ( t[p].val , z * ( r - l + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].maxa = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt; ( z , t[p].maxa ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].mina = z ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t[p].maxb = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt; ( t[p].maxb , t[p].maxa ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; &lt;span class=&#34;built_in&#34;&gt;spread&lt;/span&gt; ( p , l , r ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= mid ) &lt;span class=&#34;built_in&#34;&gt;change2&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid , x , y , z ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( y &amp;gt; mid ) &lt;span class=&#34;built_in&#34;&gt;change2&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r , x , y , z ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].val = ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val + t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].val ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].maxa = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt; ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxa , t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxa ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t[p].maxb = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt; ( t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxb , t[p&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].maxb ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;LL &lt;span class=&#34;title&#34;&gt;ask1&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; t[p].val ; &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; LL ans = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ; &lt;span class=&#34;built_in&#34;&gt;spread&lt;/span&gt; ( p , l , r ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= mid ) ans += &lt;span class=&#34;built_in&#34;&gt;ask1&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid , x , y ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( y &amp;gt; mid ) ans += &lt;span class=&#34;built_in&#34;&gt;ask1&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r , x , y ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;LL &lt;span class=&#34;title&#34;&gt;ask2&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; t[p].maxa ; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; LL ans = &lt;span class=&#34;number&#34;&gt;0x7fffffff&lt;/span&gt; ; &lt;span class=&#34;built_in&#34;&gt;spread&lt;/span&gt; ( p , l , r ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= mid ) ans = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt; ( ans , &lt;span class=&#34;built_in&#34;&gt;ask2&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid , x , y ) ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( y &amp;gt; mid ) ans = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt; ( ans , &lt;span class=&#34;built_in&#34;&gt;ask2&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r , x , y ) ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;LL &lt;span class=&#34;title&#34;&gt;ask3&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; p , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; r , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= y ) &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; t[p].maxb ; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; mid = ( l + r ) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; LL ans = &lt;span class=&#34;number&#34;&gt;0x7fffffff&lt;/span&gt; ; &lt;span class=&#34;built_in&#34;&gt;spread&lt;/span&gt; ( p , l , r ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( x &amp;lt;= mid ) ans = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt; ( ans , &lt;span class=&#34;built_in&#34;&gt;ask3&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , l , mid , x , y ) ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( y &amp;gt; mid ) ans = &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt; ( ans , &lt;span class=&#34;built_in&#34;&gt;ask3&lt;/span&gt; ( p &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , r , x , y ) ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;( )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n , m ; &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt; , &amp;amp; n , &amp;amp; m ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ( &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; i &amp;lt;= n ; i ++ ) &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%lld&amp;quot;&lt;/span&gt; , &amp;amp; a[i] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;build&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ( m -- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; op ; &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; , &amp;amp; op ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( op == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , r ; LL k ; &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d%lld&amp;quot;&lt;/span&gt; , &amp;amp; l , &amp;amp; r , &amp;amp; k ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;change1&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , l , r , k ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( op == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , r ; LL k ; &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d%lld&amp;quot;&lt;/span&gt; , &amp;amp; l , &amp;amp; r , &amp;amp; k ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;change2&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , l , r , k ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( op == &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , r ; &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt; , &amp;amp; l , &amp;amp; r ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%lld&amp;quot;&lt;/span&gt; , &lt;span class=&#34;built_in&#34;&gt;ask1&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , l , r ) ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( op == &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , r ; &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt; , &amp;amp; l , &amp;amp; r ) ;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%lld&amp;quot;&lt;/span&gt; , &lt;span class=&#34;built_in&#34;&gt;ask2&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , l , r ) ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; l , r ; &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt; , &amp;amp; l , &amp;amp; r ) ;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt; ( &lt;span class=&#34;string&#34;&gt;&amp;quot;%lld&amp;quot;&lt;/span&gt; , &lt;span class=&#34;built_in&#34;&gt;ask3&lt;/span&gt; ( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; , n , l , r ) ) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://amentiraz.github.io/2021/11/27/Dijkstra/</guid>
            <title>Dijkstra</title>
            <link>http://amentiraz.github.io/2021/11/27/Dijkstra/</link>
            <category>算法</category>
            <category>Dijkstra</category>
            <pubDate>Sat, 27 Nov 2021 15:44:01 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;
    &lt;div id=&#34;aplayer-whvCdkCr&#34; class=&#34;aplayer aplayer-tag-marker meting-tag-marker&#34;
         data-id=&#34;1345488418&#34; data-server=&#34;netease&#34; data-type=&#34;song&#34; data-mode=&#34;circulation&#34; data-autoplay=&#34;true&#34; data-mutex=&#34;true&#34; data-listmaxheight=&#34;340px&#34; data-preload=&#34;none&#34; data-theme=&#34;#ad7a86&#34;
    &gt;&lt;/div&gt;
&lt;p&gt;Dijkstra 算法用于解决单源最短路问题，假设起始点为 S，在最开始我们可以知道 S 到某些点的距离，从中取出最小的一个，我们可以保证在我们取出这个最小值的时候不可能有任何路径可以更短的到达此点，，此过程使用了贪心的思想。每当我们找出一个这样的点就更新 S 到与此点相连的其它点的距离，我们每一次取点都保证取出的是最短的且未被访问的点，这就是 Dijkstra 算法。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;网上对于 Dijkstra 的优缺点有很好的描述我就直接引用了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优点：O (N*N), 加堆优化：O (N*logN)&lt;br&gt;
 缺点：在单源最短路径问题的某些实例中，可能存在权为负的边。&lt;br&gt;
如果图 G＝（V，E）不包含从源 s 可达的负权回路，&lt;br&gt;
则对所有 v∈V，最短路径的权定义 d (s,v) 依然正确，&lt;br&gt;
即使它是一个负值也是如此。但如果存在一从 s 可达的负回路，&lt;br&gt;
最短路径的权的定义就不能成立。S 到该回路上的结点就不存在最短路径。&lt;br&gt;
当有向图中出现负权时，则 Dijkstra 算法失效。当不存在源 s 可达的负回路时，&lt;br&gt;
我们可用 Bellman-Ford 算法实现。&lt;br&gt;
————————————————&lt;br&gt;
 版权声明：本文为 CSDN 博主「Chandery」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。&lt;br&gt;
原文链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkeTEyMDY0NzM2MDEvYXJ0aWNsZS9kZXRhaWxzLzUyNjQ4NjE5&#34;&gt;https://blog.csdn.net/cdy1206473601/article/details/52648619&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面贴上我年轻时写的代码：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int maxn = 5000000 ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int head[maxn] , nex[maxn] , to[maxn] , val[maxn] , cnt = 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int vis[maxn] , dis[maxn] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;struct L &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int val , id ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool operator &amp;lt; ( const L &amp;amp; x ) const &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return val &amp;gt; x.val ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void add ( int x , int y , int z ) &amp;#123; nex[++cnt] = head[x] ; head[x] = cnt ; to[cnt] = y ; val[cnt] = z ; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void dijkstra ( int s ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    priority_queue &amp;lt; L &amp;gt; Q ; Q.push ( ( L ) &amp;#123; 0 , s &amp;#125; ) ; dis[s] = 0 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while ( ! Q.empty ( ) ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        L u = Q.top ( ) ; int x = u.id ; Q.pop ( ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if ( vis[x] ) continue ; vis[x] = 1 ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for ( int i = head[x] ; i ; i = nex[i] ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if ( dis[to[i]] &amp;gt; dis[x] + val[i] ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dis[to[i]] = dis[x] + val[i] ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if ( ! vis[to[i]] ) Q.push ( ( L ) &amp;#123; dis[to[i]] , to[i] &amp;#125; ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main ( ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n , m , s ; scanf ( &amp;quot;%d%d%d&amp;quot; , &amp;amp; n , &amp;amp; m , &amp;amp; s ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= m ; i ++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int x , y , z ; scanf ( &amp;quot;%d%d%d&amp;quot; , &amp;amp; x , &amp;amp; y , &amp;amp; z ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        add ( x , y , z ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) dis[i] = 0x7fffffff ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dijkstra ( s ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ( int i = 1 ; i &amp;lt;= n ; i ++ ) printf ( &amp;quot;%d &amp;quot; , dis[i] ) ; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
