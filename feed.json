{
    "version": "https://jsonfeed.org/version/1",
    "title": "Amentiraz",
    "description": "",
    "home_page_url": "http://Amentiraz.github.io",
    "items": [
        {
            "id": "http://amentiraz.github.io/2024/09/24/hello-world/",
            "url": "http://amentiraz.github.io/2024/09/24/hello-world/",
            "title": "Hello World",
            "date_published": "2024-09-24T08:53:46.023Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "http://amentiraz.github.io/2024/09/19/%E8%93%9D%E8%89%B2%E6%81%90%E6%83%A7-%E8%A7%82%E5%90%8E%E6%84%9F/",
            "url": "http://amentiraz.github.io/2024/09/19/%E8%93%9D%E8%89%B2%E6%81%90%E6%83%A7-%E8%A7%82%E5%90%8E%E6%84%9F/",
            "title": "《蓝色恐惧》观后感",
            "date_published": "2024-09-19T09:06:49.000Z",
            "content_html": "<p>《蓝色恐惧》是今敏监督的处女座，然而它在 Bangumi 平台上享有盛誉，排名在全年代前 20。本文是对《蓝色恐惧》（未麻的部屋）的观后感与解读。</p>\n<span id=\"more\"></span>\n<p>“我” 是什么呢？这个命题在哲学上有着诸多的讨论，更专业的术语是自我同一性是怎样的呢？</p>\n<p>在 EVA 中对于自我的表述是这样的：真嗣是由人们眼中的真嗣组成，借此强调人与他人的联系。在哲学上也有相关问题，例如泥沼人 —— 如果当下的你死去，而一个与你一模一样并继承了你的思想的人同时刻出现了，那么这个人能算做是你吗。泥沼人问题在《重启咲良田》也有提及，只不过也是泛泛而谈。谈的比较深入的有《攻壳机动队》和《Lain》，分别从肉体与网络现实去进行了讨论。在我大一参加哲学选修课时，老师也向我们提问：此刻的你，和前一刻的你是同一个人吗？而这位老师给出的答案是因为后一刻的你是前面的累积，那么当然是同一个你。然而当时我并不这么认为：假设人是一个函数 <code>y=f(x)</code> ，那么老师对人的理解是 <code>f(x)</code> ，这个函数本身，而我认为如果 <code>y</code>  不同了，那么当然每时每刻的人也当然是不同的。</p>\n<p>这是个相当复杂的问题，最近我在看《现象学导论》，自我同一性在第一章便提及，而在最后几章才能得到解释，即使放在严肃哲学上，这个问题也是重要的命题之一。以往的 EVA，重启咲良田这些作品，限于题材与故事叙述难度，不可能深入挖掘这个题材，甚至包括在对哲学问题的探讨中，整个动漫史上也屈指可数。这也是为什么在看《蓝色恐惧》时，当我意识到这部动画在探讨这个命题时有多么的惊讶。</p>\n<h2 id=\"偶像与生活\"><a class=\"markdownIt-Anchor\" href=\"#偶像与生活\">#</a> 偶像与生活</h2>\n<p>开篇，未麻上场表演的镜头与她工作完回家的镜头交叉放送。舞台上光鲜亮丽唱歌的偶像与回家路上板着脸的未麻形成了鲜明的对比，当未麻在电车上随着歌曲摆动时镜头一转舞台更是让她的情绪显得割裂 —— 当然这是我事后这样描述。在我看这个片段时，其实我是困惑的：即便交叉的镜头让故事信息密度更高，然而这样做的意义是怎样呢？当然动画妙就妙在当你看完它时能回味到这些镜头的深意。</p>\n<p>与其说是偶像与生活，不如说是工作与生活。在学校里面对他人时，我们微笑着，扮演着我们应当扮演的角色。常常有人这样去形容，与他人来往时我们常常是戴着面具的。然而工作毕竟占据了我们生活的一个重要的板块，对于不成熟的人来说很多时候会把工作的面孔带入生活。然而剧中的未麻便分割的很好。离开舞台便全然是另一副模样，这便引出了另一个问题：工作时的我和生活中的我是同一个我吗？</p>\n<h2 id=\"生活转变前后的我\"><a class=\"markdownIt-Anchor\" href=\"#生活转变前后的我\">#</a> 生活转变前后的我</h2>\n<p>这部动画有着浓厚的时代的气质，里面很多场景在生活中都能产生共鸣。为了更好的生活，未麻选择退出偶像行业，铤而走险转行到演员行业。在这个过程中也并非一帆风顺。虽然是主角可开始只有一句台词；好不容易争取到了更多的演出机会，却被迫要出演一场强暴戏码；受此影响，进一步拍摄全裸照等等。从以往冰清玉洁，天使一般的形象，转眼便被推翻。剧中有一处细节弄得特别好，之前的三人团体在她退出后反倒碟片销量迎来了新高。如今 “我” 这样的转变是正确的吗？我真的甘心做这份工作吗？更严肃的问题是，我是否在追求更好的生活时迷失了初心，我现在的选择只不过是利益熏心的结果？</p>\n<p>现实生活中的我们不也常常遇到这样的问题吗？工作转行、选择考研还是工作、出国还是留在国内等等，在面临重要抉择时，我们总是割裂的。我常常这样想，如果存在两个我，分别选择了截然不同的两条路，那么这两个 “我” 还能说是同一个 “我” 吗？显然不是的，那 “我” 究竟又怎样具有同一性呢？娱乐化来说的话，究竟是我过生活，还是生活过我呢？</p>\n<h2 id=\"时间上每时每刻的我\"><a class=\"markdownIt-Anchor\" href=\"#时间上每时每刻的我\">#</a> 时间上每时每刻的我</h2>\n<p>生活的转变还是显得太粗糙了，动画进行了进一步的细化。每天的我，每时每刻的我是相同的吗。借用动画中的话来说：“你怎么知道知道前一秒的自己和现在的自己是同一个人呢”，这不得不提到动画精湛的演出。在经历工作与生活高压下的未麻精神已经极度不稳定了，在拍摄现场神情恍惚，一睁眼又是一天，却很难察觉到今日的生活与昨日的不同。不断交错的画面，不仅让剧情的氛围更加的紧张与惊悚，伴随着未麻的喃喃自语，让演出呈现出一种惊悚的感觉，这不禁让我想起了《闪灵》的观看体验。没有鬼怪，动画中人物情绪的紧绷已经足够让人感到恐惧。在这样的氛围中，演出画面的切换同时切割了剧内的时间与空间，更是把每时每刻的未麻进行割裂。通过生活的割裂，进一步影响了每时每刻自我的割裂，这不由得让我想起了佛教那通过 “刹那” 来切割生活的举措，顺带一提，在我看来，佛教中的 “无我” 本质是对生活的逃避。而我们最终是要面对生活的，如果像佛教那般否定自我的同一性，那便是落得轻松，未麻并没有选择这样做，但受限于生活经验的影响，判断在时间长河的同一性成了困扰她的问题。</p>\n<p>而针对动画中的问题，里面的回答是：“不过是记忆的连续性罢了，我们就是仅凭这一点制造一贯的自我认同幻想”。这不过是一个粗糙的解释，显然这也并没有说服未麻，而且 “自我认同幻想” 听起来便不太像一个好词，那么我们该如何去判断时间上的我是同一个我呢？</p>\n<h2 id=\"网络中的我和现实中的我\"><a class=\"markdownIt-Anchor\" href=\"#网络中的我和现实中的我\">#</a> 网络中的我和现实中的我</h2>\n<p>这个问题在《Lain》这部动画也有着解释</p>\n<h2 id=\"他人眼中的我和我认可的我\"><a class=\"markdownIt-Anchor\" href=\"#他人眼中的我和我认可的我\">#</a> 他人眼中的我和我认可的我</h2>\n",
            "tags": [
                "书评"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/09/19/%E4%BF%9D%E7%A0%94%E5%A4%8D%E8%AF%95%E5%A4%8D%E4%B9%A0%E6%80%BB%E6%8B%AC/",
            "url": "http://amentiraz.github.io/2024/09/19/%E4%BF%9D%E7%A0%94%E5%A4%8D%E8%AF%95%E5%A4%8D%E4%B9%A0%E6%80%BB%E6%8B%AC/",
            "title": "保研复试复习总括",
            "date_published": "2024-09-19T02:26:45.000Z",
            "content_html": "<p>本文针对保研复试进行总复习，对目前的自己针对机器学习、计算机组织，包括数学建模、ACM 等等学科进行自己的理解和概括，以总述为主，内容复习为辅。<br>\n目的是为了在复试时更好的吹牛 qwq。</p>\n<span id=\"more\"></span>\n<h1 id=\"机器学习\"><a class=\"markdownIt-Anchor\" href=\"#机器学习\">#</a> 机器学习</h1>\n<h2 id=\"内容复习\"><a class=\"markdownIt-Anchor\" href=\"#内容复习\">#</a> 内容复习</h2>\n<h3 id=\"绪论\"><a class=\"markdownIt-Anchor\" href=\"#绪论\">#</a> 绪论</h3>\n<p>无论学习算法 A 多聪明，学习算法 B 多笨拙，期望性能是完全相同的。（NFL 定理）<br>\n脱离实际问题，空泛的谈论算法优劣没有意义。<br>\n机器学习为交叉学习提供技术支撑，本质上机器学习就是利用大数据<br>\n数据库为数据挖掘提供数据管理技术，机器学习和统计学提供数据分析技术。</p>\n<h3 id=\"模型评估与选择\"><a class=\"markdownIt-Anchor\" href=\"#模型评估与选择\">#</a> 模型评估与选择</h3>\n<p>过拟合无法彻底避免，我们能做的只有缓解<br>\n调参和算法选择没有什么本质区别<br>\n泛化误差可分解为偏差、方差和噪声之和。</p>\n<h3 id=\"线性模型\"><a class=\"markdownIt-Anchor\" href=\"#线性模型\">#</a> 线性模型</h3>\n<p>形式简单、易于建模。<br>\n线性回归：均方误差最小化<br>\n线性判别分析：将样本投到一条直线上（更低维的空间）。<br>\n多分类问题：一对一、一对多、多对多。</p>\n<h3 id=\"决策树\"><a class=\"markdownIt-Anchor\" href=\"#决策树\">#</a> 决策树</h3>\n<p>信息增益、希望决策树的样本划分尽可能属于同一类别，数据挖掘里面讲到过。还有剪枝的内容，泛化能力更强。</p>\n<h3 id=\"神经网络\"><a class=\"markdownIt-Anchor\" href=\"#神经网络\">#</a> 神经网络</h3>\n<p>感知机（Perception）<br>\nBP 算法（误差逆传播）（error BackPropagation)</p>\n<h3 id=\"支持向量机\"><a class=\"markdownIt-Anchor\" href=\"#支持向量机\">#</a> 支持向量机</h3>\n<p>划分的超平面对于训练样本的局部扰动的 “容忍” 性最好<br>\n软间隔、正则化（一种罚函数）</p>\n<h3 id=\"贝叶斯分类器\"><a class=\"markdownIt-Anchor\" href=\"#贝叶斯分类器\">#</a> 贝叶斯分类器</h3>\n<p>基于后验概率</p>\n<h3 id=\"集成学习\"><a class=\"markdownIt-Anchor\" href=\"#集成学习\">#</a> 集成学习</h3>\n<p>构建并结合多个学习器来完成学习任务，也被称为多分类器系统。<br>\nBoosting：弱学习器提升为强学习器<br>\n bagging：自助法啥的</p>\n<h3 id=\"聚类\"><a class=\"markdownIt-Anchor\" href=\"#聚类\">#</a> 聚类</h3>\n<p>无监督。。。</p>\n<h2 id=\"理念概括\"><a class=\"markdownIt-Anchor\" href=\"#理念概括\">#</a> 理念概括</h2>\n<p>利用数据对未来情况进行预测，模型构建的过程中算法从数据提取特征和规律，构建数学模型来表示复杂的关系，希望具有泛化的能力和持续改进的功能。<br>\n数据质量，特征提取，模型选择，过拟合欠拟合找到平衡，选用适当的评估指标，模型的可解释性，数据的划分，运行的成本</p>\n<h1 id=\"数据挖掘\"><a class=\"markdownIt-Anchor\" href=\"#数据挖掘\">#</a> 数据挖掘</h1>\n<h2 id=\"内容\"><a class=\"markdownIt-Anchor\" href=\"#内容\">#</a> 内容</h2>\n<h3 id=\"绪论-2\"><a class=\"markdownIt-Anchor\" href=\"#绪论-2\">#</a> 绪论</h3>\n<p>数据挖掘是在大型数据存储库中，自动的发现有用信息的过程。数据挖掘技术用来探查大型数据库，发现先前未知的有用模式。<br>\n数据预处理是将未加工的输入数据转换成适合分析的形式<br>\n任务：预测任务，描述任务，预测建模</p>\n<h3 id=\"数据\"><a class=\"markdownIt-Anchor\" href=\"#数据\">#</a> 数据</h3>\n<p>数据类型、数据质量、预处理步骤，数据之间的联系。<br>\n<img data-src=\"1.jpg\" alt=\"\"><br>\n数据预处理：聚类、抽样、维归约、特征子集选择、特征创建、离散化和二元化、变量变换</p>\n<h3 id=\"探索数据\"><a class=\"markdownIt-Anchor\" href=\"#探索数据\">#</a> 探索数据</h3>\n<p>对于有序数据，考虑值的百分位数更有意义。第 <code>p</code>  个百分位数 <code>xp</code>  是一个 <code>x</code>  值，使得 <code>x</code>  的 <code>p%</code>  的观测值小于 <code>xp</code> <br>\n 可视化：直方图、盒状图、饼图、散布图</p>\n<h3 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\">#</a> 分类</h3>\n<p>略</p>\n<h2 id=\"理念概括-2\"><a class=\"markdownIt-Anchor\" href=\"#理念概括-2\">#</a> 理念概括</h2>\n<p>没什么好概括的<br>\n实际和机器学习概括的差不多</p>\n<hr>\n<p>一坨屎，妈的，我已经足够了解这个方面的知识了，明天问啥答啥，爱要不要。</p>\n<hr>\n<p>结果复习一天的内容屁都没用上，面试就是即兴英语口语 + 竞赛经历讲解 + tree new bee。老师问啥我答啥，照这些老师喜欢的方向去回答，最后目测这些老师都挺满意的，应该问题不大（希望不是 flag）。这玩意还是得硬实力够啊，我看前面的都挺折磨，估计是项目经历不真实导致的吧。</p>\n<p>就我个人观察而言，面试技巧已经没啥特别加分的作用了，大家都会，老师也都知道，反套路搞你几句你也寄。实际上，在大家都不会面试技巧时，考察的是情商；然而，在大家都会面试技巧时，考察的照样是情商。走捷径是没有用的。</p>\n",
            "tags": [
                "学习笔记"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/09/16/%E7%8E%B0%E8%B1%A1%E5%AD%A6%E5%AF%BC%E8%AE%BA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",
            "url": "http://amentiraz.github.io/2024/09/16/%E7%8E%B0%E8%B1%A1%E5%AD%A6%E5%AF%BC%E8%AE%BA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",
            "title": "现象学导论读书笔记",
            "date_published": "2024-09-16T01:47:39.000Z",
            "content_html": "<p>《现象学导论》读书笔记<br>\n采用手写的方式记录。</p>\n<span id=\"more\"></span>\n<p><img data-src=\"1.jpg\" alt=\"\"><br>\n<img data-src=\"2.jpg\" alt=\"\"><br>\n<img data-src=\"3.jpg\" alt=\"\"><br>\n<img data-src=\"4.jpg\" alt=\"\"></p>\n",
            "tags": [
                "读书笔记"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/09/15/%E8%A7%82%E9%83%91%E6%99%9F%E6%B2%B3%E6%BC%94%E5%A5%8F%E4%BC%9A%E6%9C%89%E6%84%9F/",
            "url": "http://amentiraz.github.io/2024/09/15/%E8%A7%82%E9%83%91%E6%99%9F%E6%B2%B3%E6%BC%94%E5%A5%8F%E4%BC%9A%E6%9C%89%E6%84%9F/",
            "title": "观郑晟河演奏会有感",
            "date_published": "2024-09-15T02:21:09.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>9 月 3 日去看了知名指弹音乐家郑晟河的演奏会，感触挺多，特此记录</p>\n\n    <div id=\"aplayer-dApwYVjK\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1987385813\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<span id=\"more\"></span>\n<p>郑晟河是一位我在学习指弹之初便熟知的一位指弹艺术家。他年少成名，在油管上播放量超过 18 亿次。他的指弹技术更是神乎其技，《seventh#9》中高强度的扫拨，《Flaming》中潇洒的拍弦与左手封闭和弦的转换，无论是扎实的基本功还是花哨的技巧都令人望而生畏，以至于在众多音乐软件的评论区中对他的批评大多包括 “炫技”，“华而不实”，“缺乏音乐性” 等等。但遗憾的是我的审美低下，眼花缭乱的技巧、高难度的手法令我心驰神往。我常常想：若是哪天我能够弹奏这些高难度的曲目我必定在朋友圈狠狠的炫耀一番。</p>\n<p>正因如此，我学会的第一首指弹曲目便是夹杂着诸多技巧的陈亮的《无题》，紧接着便学习了押尾桑的《Fight！》。实话实说，这时的我认为自己在吉他上面已经无所不能了：这么难的曲子我都练会了，还有什么我练不会的？在挑选新的练习曲时我相中了郑晟河的《River Flows in You》（2022 版），原因不是它有多花哨，而是我感觉它只涉及左手的和弦转换，练习起来应该不会太难，把它当作一个过渡曲目应该不错。然而万万没想到这一练就是半年。</p>\n<p>正如我预测的那样。这首曲子并无复杂的技巧，常规的拨弦加上常见的击勾弦和滑音后别无花样。然而高强度的左手活动让我甚至难以完整的演奏。这半年的时间里，我克服了滑音后击弦导致的断音、克服了小横按后紧接着大横按导致的不稳定，克服了桥段难以把握的节奏等等。但即便在练习这首曲子的每一天我都能感到自己的进步，但由于基本功的差劲，稳定的弹奏下这首曲子仍然有困难。更恐怖的时，总是在听原曲的过程中我认识到了曲谱中丰富的感情，但基于技术和我自身的经验，如何达到这个效果我竟毫无头绪。甚至我一度认为三段高潮的重复实在乏味，只不过是后期效果好罢了。在瓶颈中，我神使鬼差的购买了郑晟河演奏会的门票，时间也就来到了 9 月 3 日。</p>\n<p>千呼万唤中，郑晟河总算走上了舞台。这小伙子网络上看着就帅，现场见到了更是不禁感叹他的舞台形象，这可能也是受到了押尾的影响吧。令人意外的是，虽然形象不错但可能是面对我们这群外国人的原因，谈吐却很羞涩，甚至由于语言不同，在每次演奏完一首曲子后，干涩的中文 “谢谢”，让人又感觉他十分 “高冷”，也怪有意思的。</p>\n<p>之前便有所耳闻，现场的演奏效果比在耳机中来的震撼的多，实际也是如此。例如用来开场的《Felicity》，这首曲子应该是他在 15 岁左右创作出来的吧，欢快的节奏与旋律受到不少人的喜爱。现场演奏时，能够注意到他在之前的基础上增加了鼓点，改变了一些旋律，使得听感更加丰富了，曲子的 Felicity 感也更有了韵味。现场演奏也有一些缺点，受限于设备采样的原因，拍弦的高频并未很好的在扩音设备中表现。受限于吉他本身的特性，低音段也并不像我预想的可以像耳机听到的那样有明显的 “嗡嗡” 声，反倒这个低音成为了环境的一部分，不仔细去听很难察觉 —— 但也没有必要这样去听歌。得益于演奏环境是室内，天然具有的混响功能让泛音段出乎意料的好听，比起单纯的 “叮叮” 声更显得空灵。我紧跟着旋律与律动，体会着《Felicity》的幸福，《Nostalgia》的怀旧，《Always with me》的童真。“曲子写的真好” 这便是我目前最大的感受。</p>\n<p>“下面一首是我最有名，也是我最喜欢的一首改编曲”，他边调弦边用英文说着，我正想着是哪首时，《River Flows in You》的前奏响起了，一看手型，正好是我练习的那版。惊喜之下，抱着学习的心态欣赏起了琴声。但很快我便不能平静的欣赏了，我完全的沉浸在了音乐之中，更准确的来说，我沉浸在了音乐之下丰富的情感之中。</p>\n<p>我难以用文字去描述我当时的感受。若是我的《River Flows in You》是提着壶水往别人脑袋上倒，那么他所呈现的河流清澈见底，河水流动的过程中倏得变缓，又在倾泻之中奔涌而出。在随着河水流动的过程中，河底的石子、冲刷的泥土，游动的生物似乎也清晰可见，这些种种细节赋予了河流旺盛的生命力。河水本可以平静的流淌下去，那么为什么会有激烈的奔涌？在琴声中我似乎明白了，那是因为有 You 的存在，因为有你的存在，所以我大多是压抑而克制的，因为有你的存在，所以即便我的情绪奔涌而出，内在不变的克制仍是我情感的底色。在 Refrain 中，三段共 24 小节情感的涌现使人不得不沉浸其中，最后在一段不稳定的琶音中结束了情感的宣泄，意犹未尽之感油然而生。</p>\n<p>他是怎么做到的？技术层面上，大量细腻的揉弦，巧妙的控制拨弦的力度，还有不时的停顿，大大丰富了音乐旋律与表现力。然而更深层次的原因呢？情感的表现总是来源于情感，情感表现好坏取决于对于自身演奏效果的把握。我注意到，当他在演奏的过程中竟然是闭着双眼的。在观看这首曲子的 MV 时他也是如此表现的，然而当时的我认为他只不过在装逼，营造一种氛围罢了，然而现场这样一看，闭眼不是为了装逼，而是更好的去把握自己演奏，将视觉关闭更好的强化了听觉和触觉。在听完演奏会的隔天我便如此尝试了，确实让我在对歌曲情感的表达更充分了。</p>\n<p>弹琴弹的不单单是技巧，歌曲传达的不是狭隘的歌词或者单纯的感官刺激，而是一种情感、一种感受，听完现场版的《River Flows in You》这便是我最大的感受。察觉到这个事实我不由得感叹自己在过去几年的练琴究竟练了个啥，如此显而易见的事情直到现在才意识到，可能我也是太关注技巧与和弦的复杂程度了，目无全牛反倒看不清牛的本质，或许我还是太浮躁了吧。</p>\n<p>后面郑晟河还演奏了很多曲目，诸如 John Mayer 的《Neon》改编版、新版的《Flaming》，新曲《overcome》，还有我个人很喜欢的《The Ocean》。整场演奏会下来竟没有我没听过的曲目，然而体验却都是新颖的。演奏会并不是完美无暇的，我能听出来的失误便有两处不止，但正是这种 “失误” 更让人感觉到真实感，。在这两个小时的演奏中我逐渐从关注节奏的律动、旋律的抓耳到关注更细腻的情感的表现，以至于在最后听完演奏会我的大脑久违的出现了过度思考后的阵痛感。我可以这样说，我从未如此的享受过音乐。</p>\n<p>回到学校后，我有大约 6、7 天的时间没有去听任何指弹曲或者一些爵士曲。那场演奏会带来的震撼久久不能散去，我在自己练琴时开始注意自己的力道，去突出自己的旋律，这是我以前从未做过的事情。原本我打算在毕业时录制一首《like a star》作为自己的毕业纪念，现在我改变了主意。或许在我心境改变的当下《风之诗》更能代表我的大学四年，无论是弹琴的理解还是对生活的理解。希望在明年 6 月，我能演绎出蕴含我自身情感的《风之诗》。</p>\n",
            "tags": [
                "生活"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/07/31/%E5%96%9C%E6%AC%A2%E7%9A%84%E6%AD%8C/",
            "url": "http://amentiraz.github.io/2024/07/31/%E5%96%9C%E6%AC%A2%E7%9A%84%E6%AD%8C/",
            "title": "喜欢的歌",
            "date_published": "2024-07-31T12:29:28.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>记录一下自己喜欢的歌，如果合适的话会写一些评语</p>\n<p>有些版权保护所以只有 30s</p>\n<hr>\n<span id=\"more\"></span>\n\n    <div id=\"aplayer-FqOwyksL\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"26450086\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>这首歌的 Walking Bass 能走进你的心里</p>\n<hr>\n\n    <div id=\"aplayer-xhdISOAF\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"588651\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>在看动漫时便觉得十分惊艳的一首歌</p>\n<hr>\n\n    <div id=\"aplayer-JGnXUZKV\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1980701213\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>小众好听的一首</p>\n<hr>\n\n    <div id=\"aplayer-dHqZuNUM\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1972402597\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>拿不拿大抵是死了，人们永远怀念着它</p>\n<hr>\n\n    <div id=\"aplayer-EbOeRNgZ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"26297886\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>这首歌谈崩了我两次弦，希望有朝一日能够弹奏这首歌</p>\n<hr>\n\n    <div id=\"aplayer-HTeVWdvT\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"2001618101\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>Guiano 作品中相当喜欢的一首</p>\n<hr>\n\n    <div id=\"aplayer-XrzrQOVu\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"22793573\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>我最喜欢看日本人搞欧美的摇滚曲，包括 Beck、FLCL 都是我很喜欢的</p>\n<hr>\n\n    <div id=\"aplayer-FLYOMhEA\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1990571322\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>如果有朝一日我学会了贝斯，这首歌是一定会去练的</p>\n<hr>\n\n    <div id=\"aplayer-oJtIasWx\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"479764519\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>初听便觉得十分惊艳的一首歌，得益于东方 Project 中歌曲本身水准就很不错</p>\n<hr>\n\n    <div id=\"aplayer-TqMdTFIe\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1453382023\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>Guiano 我喜欢他的地方一方面就在于这种小清新的曲调，没有什么复杂的编曲，单纯为了好听</p>\n<hr>\n\n    <div id=\"aplayer-jvFgGzre\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1325114607\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>之前我并不喜欢 Ref:rain 这首歌的原曲，但这首类似简化的版本却深深抓住了我的心。（当然在我的脑容量变大一点点后，也对原版不排斥了）</p>\n<hr>\n\n    <div id=\"aplayer-KvesaVyQ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1382997651\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>这首歌没有那么多激烈的情绪，但在平淡中似乎真的能看到风徐徐吹过，押尾的歌中相当喜欢的一首</p>\n<hr>\n\n    <div id=\"aplayer-RaRCnPtn\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1453381133\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>虚拟歌姬尖锐的声线其实并不被人喜爱，然而这首歌我认为把这尖锐的声线融汇进了歌里。这首歌的创作已经建立在了虚拟歌姬而非人身上，很厉害。</p>\n<hr>\n\n    <div id=\"aplayer-ZWtoVJFq\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"591797\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>梶浦由記的歌曲总是在绝望中透露出希望，在看《空之境界》时，歌曲甚至有些时候比动画更吸引人，虽然对于动画来说不太合适，但单纯作为歌来讲很不错。</p>\n<hr>\n\n    <div id=\"aplayer-xQWmJcnx\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"659423\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>city pop，扑面而来的纸醉金迷，很高级的一首歌，这便是时代气质吧。</p>\n<hr>\n\n    <div id=\"aplayer-EZvMMQwL\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"536595807\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>很好听的一首翻唱</p>\n<hr>\n\n    <div id=\"aplayer-MAdiLXxn\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"21052194\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>若是有一天我买了电吉他。。。。</p>\n<hr>\n\n    <div id=\"aplayer-eedvadde\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1478636\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>若是有一天我学会了爵士编曲。。。。</p>\n<hr>\n\n    <div id=\"aplayer-GPmQpbwi\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"2022113062\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>高级</p>\n<hr>\n\n    <div id=\"aplayer-SmxCDtrG\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"29202382\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>走上爵路中。。。。</p>\n<hr>\n\n    <div id=\"aplayer-iGkZbxKY\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"29567173\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>在走掉的边缘疯狂试探，目测使用了大量不和谐的音符，例如小二度？不太清楚，但是能感受到浓烈的不稳定感。</p>\n<hr>\n\n    <div id=\"aplayer-bdxTBBBg\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1475473\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>很喜欢 John Mayer 的歌，他也是目前我唯一在听的欧美歌手</p>\n<hr>\n\n    <div id=\"aplayer-XXDWnktj\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1442466883\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>间奏 solo 很好听</p>\n<hr>\n\n    <div id=\"aplayer-kPCMilvL\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"22822543\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>押尾的翻弹的曲目中，这首歌在我心中的地位相当之高，无论是缓慢部分中氛围的塑造，还是点弦拍泛音部分，营造的意境都非常好。若是弹奏这首歌我可能花不到几个月就能弹会，要是意境可能得再练 3、5 年吧。</p>\n<p>这里多说几句，在长期的练吉他的过程中，我误以为技巧和编曲的复杂便是衡量乐曲好坏的标志，但最近也算是醒悟了，若是能够很好传递情绪（不是情感）的曲子，即使编曲简单，那也是相当厉害的，就如同写作一样。</p>\n<hr>\n\n    <div id=\"aplayer-PZpRRcPe\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"2003496380\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>孤独摇滚里面最喜欢的一首</p>\n<hr>\n\n    <div id=\"aplayer-CmumcSsv\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"528283\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>秒速五厘米也算是我顶喜欢的一部片了，里面的歌曲在烘托这个电影的空气感做出了很大的贡献，单把歌拿出来听也能体会到那种浓浓的遗憾</p>\n<hr>\n\n    <div id=\"aplayer-qQgCVbSZ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"22767373\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>粗听便觉得很好听，前段时间带着耳机听这首歌写作业更是觉得这首歌里面的贝斯抓耳</p>\n<hr>\n\n    <div id=\"aplayer-PSdxkUlt\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1888864514\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>同样是很喜欢这首歌的 bass，Vaundy 唱出了那种富有激情的无所谓，很有意思</p>\n<hr>\n\n    <div id=\"aplayer-PQvEGmBg\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1483521390\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>EVA 是上大学后对我影响最大的一部动画，这部动漫剧情吸引人，利用宗教把自己包裹的很高级，人物塑造极其媚宅，但想传递的东西却仅仅是庵野秀明的情感，如果这部番还想表达什么，那便是这首歌了</p>\n<hr>\n\n    <div id=\"aplayer-oRWtEWTP\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"27741515\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>听这首歌时，我似乎也无比虔诚的笼罩在希望的圣光之下。</p>\n<hr>\n\n    <div id=\"aplayer-ymfYKnna\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1447594669\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>高中时相当喜欢的一首歌</p>\n",
            "tags": [
                "生活"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/07/28/%E5%AF%B9LGBT%E7%9A%84%E6%80%9D%E8%80%83/",
            "url": "http://amentiraz.github.io/2024/07/28/%E5%AF%B9LGBT%E7%9A%84%E6%80%9D%E8%80%83/",
            "title": "对LGBT的思考",
            "date_published": "2024-07-28T15:07:30.000Z",
            "content_html": "<p>随着 LGBT 在世界范围传播不断扩大，它开始影响我们的生活，这种先进的思潮究竟是好是坏可能要再等十几年才能看到成果。然而例如在巴黎奥运会上，LGBT 运动无节制的宣传和对主流价值观的践踏无疑是引起了人们的反感进而引起了人们的反思。</p>\n<p>我并没有严谨的研究过 LGBT 这类思潮，但我认为可能这些所谓的 LGBT 群体也没研究过，所以我基于自己的印象对此种社会现象做出我自己的看法。这些看法必定是片面的，不成熟的，但我想尽量用我的世界观去认识这一现象。</p>\n<p>本文大概率会充斥着对 LGBT 群体的批判，但我希望我所写到的批判是符合逻辑的，尽量不偏离事实的，以及希望这些观点能在将来得到验证。</p>\n<span id=\"more\"></span>\n<h1 id=\"lgbt是什么\"><a class=\"markdownIt-Anchor\" href=\"#lgbt是什么\">#</a> LGBT 是什么</h1>\n<blockquote>\n<p>LGBT 是女同性恋者（Lesbian）、男同性恋者（Gay）、双性恋者（Bisexual）与跨性别者（Transgender）的英文首字母缩略字。<br>\n“LGBT” 第一次于 1988 年在美国出现。1990 年代，“LGBT” 作为中立词汇被用来称呼这四个群体以表示尊重。尽管 LGBT 群体内部对不同群体的接纳程度不一且有不少争论，但 “LGBT” 一词的使用还是被认为是包容的积极象征。尽管 “LGBT” 一词没能体现非异性恋中的所有小群体，但这些未能体现的群体通常也被认为是 “LGBT” 所涵盖的一部分。总的来说，“LGBT” 一词一直尽量把被边缘化的群体包含到该词的意义里。<br>\n–出自维基百科</p>\n</blockquote>\n<p>可以概括的来说，LGBT 是性少数群体的总括，至今仍在不断的扩充和发展，它象征着包容和开放，反对社会主流对性少数群体无意识或有意识的压迫，它起源于性解放，强调 LGBT 群体的权益。</p>\n<p>在理念上我认为无疑是积极向上的一种思潮，它看上去解放了人们的思想，让人们更加包容开放的面对性这一人类文明起源以来十分重要但又不断难以提起的议题，所以当我最初了解这一观念时，虽然我不是这所谓的性少数群体，但我很期待它的发展，并认为这会促进人类社会的进步，然而当我真正接触过这一群体后，我的观点发生了转变。</p>\n<h1 id=\"我生活中接触的lgbt\"><a class=\"markdownIt-Anchor\" href=\"#我生活中接触的lgbt\">#</a> 我生活中接触的 LGBT</h1>\n<p>如果拿身边统计学去看待一种思想无疑是片面的，我不否认。但文字本身就带有很强的主观色彩，而个人的观点本身就受牵制于生活，例如马斯克在面对自己大儿子变性后的六亲不认也会从中立转向右派，说出 “我要消灭思想病毒” 这种观点，所以为了不让后面的人对我产生误解，认为我是个傻逼，我还是有必要讲一下我身边遇到的性少数群体。</p>\n<p>第一位是我所交好的男同性恋。高中时也追求过女生，后面可能在高二或高三的时候，性取向发生了转变。与社会主流逆行意味着你有自己的一套价值观和处事方式，他的兴趣爱好也不同寻常：喜欢化妆品，会假音，会唱歌（主要是日文歌），当然也包括喜欢男性。当我去参观他们学校的配音社时，无疑他的水平是最高的。我想说的是，像这种被社会认为是 queer 的人，生活也是丰富多彩的，甚至比很多自认为” 正常 “的人更懂得去生活。</p>\n<p>由于和他交好，很多时候他也会给我发一些他认为有意思的内容，也会给我阐述他的一些想法。在通过与他的交流中，我也算是对这个群体有了一定不流于理论的理解。在他发来的信息中有两点是很明显的：</p>\n<ol>\n<li>挥之不去的性焦虑<br>\n令人意外的是，同性恋之间的性焦虑也很严重。当然想来也正常，既然都称之为性少数群体了，那么同性恋在生活中可发展为目标的人也是很少的，更为严重的是，其实同性恋群体的外貌焦虑更为严重（女性似乎是学历焦虑），似乎很少听到同性恋之间的爱情首先是建立在对方的性格品性方面，可能对于现阶段的同性恋群体并没有精力去上升到上述层次，也可能同性恋文化中更倾向于去描述性而非爱，这些都是我的一些猜想。而当他看上某人时其实比普通恋爱更为麻烦 —— 他首先要去确认对方的性取向。对性的渴望与难以追求使得这些 “开放” 的群体反倒显得十分 “压抑”。举个例子，他曾经和我讲述他所在班级的男班长，在 3 个月与 4 个不同的陌生男人上了床，最后成功感染了艾滋病，这是是开放的表现吗？我认为这恰恰体现了其中的压抑。</li>\n<li>社会的压力<br>\n我为什么能理解这些性少数群体的原因也是我了解了他们所面对的巨大的社会压力。即使我身处成都，这个著名的 gay 都，上一辈的人是无法理解你的这种行为的。他如今也不知道如何告知自己父母自己的性取向。家庭是一方面原因，现在社会群体提到同性恋其实潜意识都会抱有一定的好奇与恐惧，这些情绪其实都来源于未知，他所使用的一些社交软件是大众所不了解的。在与他聊天时，他经常会冒出尺度极大的一些言论，我说，你的这些话最好不要和其他人说，他们接受能力不一定有我这么强，他说，我了解你才敢这样说。</li>\n</ol>\n<p>这些导致了什么呢，由于与外界的交流的匮乏与没有一个明确的标准导致他们的思想可能会出现对外界认识的偏差。举个例子从他的口中我接触过一个观念，那就是恐同即深柜。意思是所有恐惧同性恋的人，恐惧的程度越深那么他是同性恋的概率越大。似乎很有道理，由于传统观念的束缚，原本是同性恋的人难以去正视自己的性取向，在长此以往的过程中，对同性恋的渴望反倒会转变对同性恋的恐惧，就和从小被绳子束缚的大象，长大后仍然认为自己不能逃脱绳子的束缚一样。但是他所没考虑到的是，正如同性恋有着自己独特的性取向的同时，异性恋也有着自己独特的对同性发生关系的排斥，这可能是由于所谓的父权社会压迫导致的，但你所谓先进的思想是否是对传统社会观念的压迫呢，思想不应该存在高下之分，更不应该认为自己的思想是受害者。我经常能接触到大量的他发来的男同性恋的例如视频、图片，但我是真无法接受一个男的对潜在男观众的性暗示，我无论多久都只能理性上理解，感性上不去点开，或者看看视频想表达什么即可以以便于交流，或许我无法设身处地的理解他的想法吧。在意识到这一点后，我也有意识减少了自己给他发异性恋相关的信息，我认为这是一种冒犯。</p>\n<p>现在已经可以看出，社会主流与同性恋的分歧其实就在于对<strong>常识</strong>的理解不同，我们习以为然的事物对他们并不是理所当然。</p>\n<p>第二位就是一位女性，这位更是重量级。我与她接触有但不多，但时常能看到她发表在朋友圈的信息。这位女性很符合我对先进女性的想象：LGBT 坚实的支持者，女权文化的推动者，她看过一些欧美 “先进” 思想的书。举个例子，当普京宣布禁止 LGBT 在俄罗斯传播时，她在朋友圈发文反对；不时能在朋友圈见到她转发关于女权、LGBT 群体的相关内容。她在追求权利的同时有着自己的理论观念。我曾经看过她在朋友圈推荐的一本书叫《美丽世界，你在哪里》，这本书描述了四个年轻人的爱情，里面用大量的性描写来展现两对年轻人之间的爱，在混乱不堪的生活中，在麻木的人际交往中，只有在欢愉的过程中，才能真实地感受到彼此真切的爱。所以我看了两个小时就看不下去这本书了，我认为这本书令人作呕，后面我会阐述原因，这里暂且不表。</p>\n<p>然而这名女性在生活中是怎么做的呢？她纹身、抽烟、喝酒，动不动把女同性恋挂在嘴边，朋友圈里说自己是铁 T，我还以为她真的要对抗这个世界，践行自己的自由，若她真的知行合一，我还真的高看她几分，毕竟没人禁止你追求自己的欲望，禁止纹身、抽烟、喝酒不过是传统社会所施加在你身上的枷锁，打破它我认为也无可厚非，只要你能承受其中的代价。然而最后她与一个男的官宣谈恋爱了，朋友圈里面写的是：“即使你是男的，我也爱你”。</p>\n<p>真令人感动，爱本身就要跨越时间与距离，这位女性的爱情甚至还跨过了性别，真伟大。</p>\n<h1 id=\"对lgbt的认识\"><a class=\"markdownIt-Anchor\" href=\"#对lgbt的认识\">#</a> 对 LGBT 的认识</h1>\n<p>随着我们长大，我们会发现事物总是不公平的：家庭条件的差异决定了你的阶级、身处不同的社会能很大程度影响你的价值观、甚至对于先天残障人士来说，明明自己什么都没有做错为什么要枉受生活不公的折磨。在人人生而平等思想的影响下，我们选择去抗争，对抗阶级，为自己争取权利。启蒙运动、文艺复兴等等推翻了宗教对人们的约束，将人们从愚昧当中拯救出来。在近代，性解放的思潮也有异曲同工之妙。</p>\n<blockquote>\n<p>性解放思潮主张希望使受到性压迫的人，能够自在生活。一些论点将性解放分为两个层次：<br>\n性的理性启蒙除魅：性解放的知识面，包括除魅、破除对性的迷信。例如破除处女情结，对于处女守贞的压迫以及非处女的歧视等。<br>\n性的民主平等正义：性解放的政治面，包括民主、平等。例如对于性别参政、投票平等的权利。<br>\n–维基百科</p>\n</blockquote>\n<p>性解放分为三个时期，分别为 “性开放争取”、“女权主义性解放” 与 “LGBT 性解放”，他们分别追求了不尽相同的权利。对于 LGBT 来说就是主要反对 “异性恋霸权”。</p>\n<p>这是一个美好的愿景，消除长期对女性的歧视，让女性从传统社会的束缚中解脱出来。对于中国的女性来说，传统观念还是强迫你去结婚和生儿育女，不然就会认为你是不孝，即使开明一点的家庭也担忧你能否养活自己，这些确实都是客观存在的。在彩礼层面，如果男方听说女方是处女甚至认为其价值会更高，主动加钱的情况也不在少数。对于之前提到的同性恋人群也是同理。若性解放的思潮被社会广泛认可那么世界一定会更美好吧。我们将原本不被理解，不被允许的行为给解放出来，让这些东西重新站在阳光之下，这正是生产力发展后人们自由的体现。为了达成这个愿景，向传统社会进行反抗是必不可少的一步。</p>\n<p>反抗传统社会其实我认为就是反抗其中的思想，进一步影响它的秩序。那么传统社会是什么呢？在中国来说，宗族制度和家庭观念是中国社会的一个属性，西方社会我并不了解，但宗教可以看作是一个重要的组成部分，所以为了对抗这些该做什么呢。所以我们不难理解在中国某些论坛中出现的生物爹与婚驴的说法，也不难理解巴黎奥运会上对基督教的嘲弄。更广泛的说，为了维护 LGBT 人士的权益，在西方要求各个机构为这些人士提供工作岗位，很多西方游戏中人物也颠覆了以往的认识，变成了各类 LGBT 人士，进一步颠覆了传统的审美。你马斯克虽然是个父亲，但你的孩子如果想变性，你不允许那便是传统观念束缚了人们的自由，我们坚决反对。我们解构了一切，我们推翻了一切，我们为自己的自由提供环境，这样继续下去我们一定能获得自由。</p>\n<h1 id=\"为什么我对lgbt持否定态度\"><a class=\"markdownIt-Anchor\" href=\"#为什么我对lgbt持否定态度\">#</a> 为什么我对 LGBT 持否定态度</h1>\n<blockquote>\n<p>滑坡与解构是没有终点的，因为它破坏了人类社会一直以来确定相互之间情感程度的特征与共识。</p>\n</blockquote>\n<h2 id=\"本身特性\"><a class=\"markdownIt-Anchor\" href=\"#本身特性\">#</a> 本身特性</h2>\n<p>LGBT 是一个本身就在不断扩充的概念，目前已经不止 LGBT 这四种人士，扩展来说包含了 LGBTQIAPKDXU + 等等性别和身份，国内外的人调侃这个群体甚至以标榜自己为武装直升机、沃尔玛购物袋的身份以此来进行温和的反抗。细想一下，这所谓的大家庭实际上是由一堆彼此本应互不相容的群体构成，难道它们内部之间没有冲突吗？难道 Les 群体真的能共情 Gay 群体吗，即使能共情，他们的理念和目标是一样的吗？</p>\n<p>我打个比方，假设里面的某类人士认为我们应当取消美丑的观念，我们不应该对肥胖的人产生歧视，我们甚至应当去欣赏肥胖，那么可能对于这个群体中其他人来说，你这是在颠覆他们的择偶观，你这是在用这一坨是个传统人士都认为不健康、不雅观的东西污染他们的生活。你可能会反驳我：这个群体本身就是包容的，我们只需要尊重他人价值观即可。然而你们真的能够做到包容或者说宽容吗？如果宽容有那么容易做到，那么世界上就不会有战争了，人与人之间的冲突也会以和平的方式解决，正因为有无法退让的地方存在，所以才会有冲突。而 LGBT 在我看来，就是打着包容的旗号，将一堆水火不容的理念乱炖进一个锅里面，而促使它们联合起来的本质不是思想的相近，而是它们有着共同的敌人，那就是传统。</p>\n<p>我们不妨大胆的假设，如果 LGBT 消灭了传统观念成为了世界的主流，那么世界会成为什么样子？首先由于传统的消失，人们不再受显而易见的道德的约束，人们不会再有较大规模的统一的思想理念，LGBT 在我看来并不会将人们联合起来，更糟糕的是，在追求自由的过程之中，人们可能在某种程度上获得了自由，但也使得每个人变得<strong>原子化</strong>，我们难以在社会中找到依附，我们能依靠的只有自己。</p>\n<p>只能依靠自己并不是一件坏事，对于一个成年人来说，这恰恰体现了它的成熟与独立。然而，对于还不太成熟的人来说又怎样呢？没有自己独立思想的人来说，将自己暴露在这个充满无限可能，充满无限未知，甚至你本身就是未知的世界，所有人都想把你拉入它们的那一派，你迎来的大概率不是独立，而是会把放纵与堕落误认为是自由，从而在歇斯底里中毁灭自己的可能。</p>\n<p>为什么我认为《美丽世界，你在哪里》这本书恶心，我想质问作者的是，在放纵之中，真的能够得到爱吗？你所谓的爱究竟是什么？肉欲无疑是爱的一部分，这没错，可你把欲望当作爱的主要部分并假称其为爱，却从不去思考什么是爱，你的爱或许不过是放纵自己的借口罢了。第二，即使你最终在肉欲中找到了爱，但是风险是否太高了？追求爱的过程确实不容易，但这个过程如果是建立在有可能毁灭自身未来的情况下，对于大部分人来说，这是不可接受的。有那么多现存的去追求爱的途径你不去使用，非要选择一种放弃大脑，沉溺欲望的方式，对于大部分人来说，这样只会被欲望牵着走而非控制欲望而追求爱，而作者你可能在其中发现了爱，这难道是一种合理可靠的途径而不是偶然现象？</p>\n<p>相较于爱，自由也是同理，若是一个人在不成熟的阶段追求了自己自认为的自由而不加以约束，如果他足够幸运还好，如果他在长大后确立了自己真正想要的自由而由于过去犯的错无法去实现，或许这是更大的痛苦吧。你或许会反驳我，若是某些自由只有从小培养才能实现呢？你是对的，但我认为传统社会最大的有点在于它提供了一种虽然牺牲了一部分自由但换来了被社会广泛认为是行之有效的行为模式，即使你从中犯错，也不会是毁灭性的，对我个人而言若是生活不能给出保证，那么我很难去选择它。</p>\n<p>不仅如此在强调个体独立性的同时，认识他人可能成了一件更为困难的事，由于没有共同点，我们更难去通过共同点理解他人，或许在将来的某一天，人与人之间会变得比人与狗之间更难相互理解，因为狗的忠诚是有一定保障的。</p>\n<p>在不断的解构和建立中，我们却未达成任何的共识。我一直认为 LGBT 和虚无主义有点相似，虚无主义解构了一切，消除了我们生活存在的意义，从而逼迫人们去想象不断徒劳推动石头的西西弗斯是幸福的 (引用加缪的观点)。而 LGBT 建立了一切，代价是消除了我们生活存在最容易得到的依附，最终又会得出什么结论呢，我很好奇。</p>\n<h2 id=\"社会现实\"><a class=\"markdownIt-Anchor\" href=\"#社会现实\">#</a> 社会现实</h2>\n<p>精神与物质的发展总是相互扶持，共同进步的。纵观人类历史，思想的进步与生产力发展的步调总是一致。例如农业革命为早期文明的只是发展奠定了物质基础，工业革命为现代科学技术的突破提供了经济支持。再例如文艺复兴与启蒙运动中的科学发展催生了工业革命中的技术创新。然而，并不是所有的思潮对于社会的影响都是正面的，如纳粹主义，红色高棉，无政府主义，极端自由市场等等。这些思潮让社会动荡并造成大量人员的伤亡。排他性、极端、破坏社会等等是这些思潮的特点。LGBT 又是怎样的呢。</p>\n<p>LGBT 的理念核心是倡导平等、包容和尊重，强调所有性取向和性别认同的人的权利和尊严。这个思想无疑是先进而包容的，既然人人生而平等，那么对于特殊的人群我们应当一视同仁，并不能因为这些人的不同而区别对待。其实这里表述不太准确，按道理来说应当认为所有人都是相同的才对，我认为这才是少数群体追求权利所应达成的目标。然而在美丽的理论也可能在实践中遭到曲解。例如纳粹思想也是受到了尼采理论的影响。最终要落于实践。</p>\n<p>为了践行它们的理论，他们需要社会的认可，和对于权利的争取。接下来我会阐述我对于 LGBT 在社会认可方面和权利争取方面的实践的认识与批评。</p>\n<h3 id=\"社会认可方面\"><a class=\"markdownIt-Anchor\" href=\"#社会认可方面\">#</a> 社会认可方面</h3>\n<h3 id=\"权利争取方面\"><a class=\"markdownIt-Anchor\" href=\"#权利争取方面\">#</a> 权利争取方面</h3>\n<h2 id=\"实践中思维的局限\"><a class=\"markdownIt-Anchor\" href=\"#实践中思维的局限\">#</a> 实践中思维的局限</h2>\n<h2 id=\"我们究竟应当确立什么\"><a class=\"markdownIt-Anchor\" href=\"#我们究竟应当确立什么\">#</a> 我们究竟应当确立什么</h2>\n<p>我们应当确立爱。</p>\n",
            "tags": [
                "生活"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/07/18/%E6%8E%A8%E9%94%80%E8%87%AA%E5%B7%B1%E7%9A%84%E5%95%86%E5%93%81/",
            "url": "http://amentiraz.github.io/2024/07/18/%E6%8E%A8%E9%94%80%E8%87%AA%E5%B7%B1%E7%9A%84%E5%95%86%E5%93%81/",
            "title": "推销自己的商品",
            "date_published": "2024-07-18T03:12:32.000Z",
            "content_html": "<p>前几天在与父母争论网络主播这个职业时引发了我的一些思考，对这种被我称之为 “赛博乞丐” 的一群人，在争论中我也有了不同以往的认识，特此记录下来</p>\n<span id=\"more\"></span>\n<p>我是不常看网络主播的，对于抖音那种大喊大叫就能收获财富的行为我更是感到不齿。如果说劳动创造价值，那么他们的价值产出恐怕连只会大放厥词的政治家都不如，甚至在对社会产生危害。之前我的母亲义愤填膺的跟我讲直播间的一位观众竟被她的丈夫要求离婚，原因是认为她在网络上看男主播是外遇。当然这种话我是不大信的，仔细一问才知道，这位观众为她的主播打赏了几十万。先不论情感，对于这位观众而言这位主播真的能产生几十万的价值吗，我不这么认为。而又放在我之前的认识，即便是 “赛博乞丐” 能乞讨如此大规模的财产真的是合理正常的吗。显然不是的。</p>\n<p>为了避免误解，我认为我首先得定义一下我这篇文章下的网络主播。当然我所关注的主播比较少，难免有纰漏，所以我只谈我的认识。我比较了解的主播类型有几种，如游戏主播、真人主播、虚拟主播。他们受众不同，例如对于游戏主播而言，他们的基本盘是玩这款游戏的人，这些人大多在一开始是抱着这位主播的游戏技术好或者 “节目效果” 好的理由来看这位主播。真人主播和虚拟主播其实是一类人，但在这一类人中也有区别，有的主播有自己的一技之长，例如对于某些名校教授，他可以谈论自己的专业所长；然而有的主播在社会意义上没有这些一技之长，那么煽动人心，提供情绪价值就是他们的生存方式。可以看出其实主播类型可以直接粗暴的分成两极，一边是以内容为导向，另一边是以情感为导向，只不过每位主播所占的比重不同罢了。</p>\n",
            "tags": [
                "生活"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/06/10/%E5%88%86%E5%B8%83%E5%BC%8F%E5%A4%A7%E4%BD%9C%E4%B8%9A/",
            "url": "http://amentiraz.github.io/2024/06/10/%E5%88%86%E5%B8%83%E5%BC%8F%E5%A4%A7%E4%BD%9C%E4%B8%9A/",
            "title": "分布式大作业",
            "date_published": "2024-06-10T06:23:11.000Z",
            "content_html": "<p>配环境比写代码难一万倍 QAQ</p>\n<span id=\"more\"></span>\n<p>不要使用 Docker 配置多节点环境！</p>\n<p>不要使用 Docker 配置多节点环境！</p>\n<p>不要使用 Docker 配置多节点环境！</p>\n<p>如果你要使用 docker 请使用老师给的第二个 pdf 文件上的方案也就是配置单节点的环境。这个方案是可行的。但我并没有走这个方案，因为配多节点的时候我的系统环境产生了不可名状的变化，导致我配置单节点时仍然报错，所以这篇博客是针对本地配置 Hadoop 的文章</p>\n<p>在整个问题中，你会遇到非常多次的需要下载老版本的情况，请认准 release archives 字样，它会带你去旧版本的下载界面，你会遇到多种多样的报错，请在报错时尝试清空 namenode 和 datanode 里面的文件重新配置。</p>\n<h1 id=\"环境配置遇到的问题及解决方案\"><a class=\"markdownIt-Anchor\" href=\"#环境配置遇到的问题及解决方案\">#</a> 环境配置遇到的问题及解决方案</h1>\n<h2 id=\"无法解压targz文件\"><a class=\"markdownIt-Anchor\" href=\"#无法解压targz文件\">#</a> 无法解压 tar.gz 文件？</h2>\n<p>在<strong>打开管理员模式的命令提示符</strong>中，使用指令 tar -zxvf fileName.tar.gz</p>\n<h2 id=\"nodemanager启动时遇到错误\"><a class=\"markdownIt-Anchor\" href=\"#nodemanager启动时遇到错误\">#</a> NodeManager 启动时遇到错误</h2>\n<p>NodeManager 启动时遇到了一个 java.lang.ExceptionInInitializerError<br>\n 原因是 JAVA 版本太高了，我用的是 java22，请重新下载 JAVA8 即 1.8 的版本<br>\n GPT 解释：特别是 Java 9 及其以上版本引入了模块系统（Jigsaw 项目），导致一些反射操作变得不可访问。而许多 Hadoop 的库和依赖项（比如 Guice 和 CGLIB）在设计时没有考虑到这些新的限制<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamF2YXNlLWpkazgtZG93bmxvYWRzLmh0bWw=\"> JAVA1.8 下载地址</span></p>\n<h2 id=\"pyspark指令报错\"><a class=\"markdownIt-Anchor\" href=\"#pyspark指令报错\">#</a> pyspark 指令报错</h2>\n<p>你的 Python 版本太高了<br>\n我这里直接采用了老师的那个版本<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9mdHAvcHl0aG9uLzMuNi4zL3B5dGhvbi0zLjYuMy1hbWQ2NC5leGU=\"> python3.6.3</span></p>\n<h2 id=\"卡在running-job后不动了\"><a class=\"markdownIt-Anchor\" href=\"#卡在running-job后不动了\">#</a> 卡在 running job 后不动了</h2>\n<p>修改 xml 里面的配置，包括 yarn-site、hdfs-site、core-site、mapred-site，后面会给出我的配置和详细的信息。</p>\n<h2 id=\"显示不了中文字符\"><a class=\"markdownIt-Anchor\" href=\"#显示不了中文字符\">#</a> 显示不了中文字符</h2>\n<p>在控制面板的时钟与区域 -&gt; 区域 -&gt; 管理 -&gt; 更改系统区域设置 -&gt; 选用 beta 版<br>\n重启电脑即可</p>\n<h1 id=\"环境配置\"><a class=\"markdownIt-Anchor\" href=\"#环境配置\">#</a> 环境配置</h1>\n<p>Hadoop 3.0.0<br>\npython 3.6.3<br>\nJava 1.8<br>\nmaven 3.9.7<br>\n 系统变量：<img data-src=\"1.png\" alt=\"\"></p>\n<p>我的主机名是 LAPTOP-1A91HHJ4, 如果你要查看自己的主机名可在命令指示符中输入’hostname’，即可得到主机名</p>\n<h2 id=\"core-siteyml\"><a class=\"markdownIt-Anchor\" href=\"#core-siteyml\">#</a> core-site.yml</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"line\">  you may not use this file except in compliance with the License.</span><br><span class=\"line\">  You may obtain a copy of the License at</span><br><span class=\"line\"></span><br><span class=\"line\">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"></span><br><span class=\"line\">  Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\">  See the License for the specific language governing permissions and</span><br><span class=\"line\">  limitations under the License. See accompanying LICENSE file.</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"hdfs-siteyml\"><a class=\"markdownIt-Anchor\" href=\"#hdfs-siteyml\">#</a> hdfs-site.yml</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"line\">  you may not use this file except in compliance with the License.</span><br><span class=\"line\">  You may obtain a copy of the License at</span><br><span class=\"line\"></span><br><span class=\"line\">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"></span><br><span class=\"line\">  Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\">  See the License for the specific language governing permissions and</span><br><span class=\"line\">  limitations under the License. See accompanying LICENSE file.</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">       &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class=\"line\">       &lt;value&gt;1&lt;/value&gt;</span><br><span class=\"line\">   &lt;/property&gt;</span><br><span class=\"line\">   &lt;property&gt;</span><br><span class=\"line\">       &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class=\"line\">       &lt;value&gt;file:///C:/Hadoop/data/namenode&lt;/value&gt;</span><br><span class=\"line\">   &lt;/property&gt;</span><br><span class=\"line\">   &lt;property&gt;</span><br><span class=\"line\">       &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class=\"line\">       &lt;value&gt;file:///C:/Hadoop/data/datanode&lt;/value&gt;</span><br><span class=\"line\">   &lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">        &lt;name&gt;dfs.namenode.http-address&lt;/name&gt;</span><br><span class=\"line\">        &lt;value&gt;LAPTOP-1A91HHJ4:9089&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">    &lt;property&gt;</span><br><span class=\"line\">        &lt;name&gt;dfs.datanode.http.address&lt;/name&gt;</span><br><span class=\"line\">        &lt;value&gt;LAPTOP-1A91HHJ4:9088&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"yarn-site\"><a class=\"markdownIt-Anchor\" href=\"#yarn-site\">#</a> yarn-site</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"line\">  you may not use this file except in compliance with the License.</span><br><span class=\"line\">  You may obtain a copy of the License at</span><br><span class=\"line\"></span><br><span class=\"line\">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"></span><br><span class=\"line\">  Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\">  See the License for the specific language governing permissions and</span><br><span class=\"line\">  limitations under the License. See accompanying LICENSE file.</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    \t&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class=\"line\">    \t&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class=\"line\">   &lt;/property&gt;</span><br><span class=\"line\">   &lt;property&gt;</span><br><span class=\"line\">      \t&lt;name&gt;yarn.nodemanager.auxservices.mapreduce.shuffle.class&lt;/name&gt;  </span><br><span class=\"line\">\t&lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;</span><br><span class=\"line\">   &lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;LAPTOP-1A91HHJ4&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.resourcemanager.bind-host&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;0.0.0.0&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;20480&lt;/value&gt; &lt;!-- 根据你的集群配置调整 --&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.scheduler.minimum-allocation-mb&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;2048&lt;/value&gt; &lt;!-- 根据你的集群配置调整 --&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.nodemanager.resource.cpu-vcores&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;4&lt;/value&gt; &lt;!-- 根据你的集群配置调整 --&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.nodemanager.vmem-pmem-ratio&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;2.1&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.scheduler.maximum-allocation-vcores&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;4&lt;/value&gt; &lt;!-- 根据你的集群配置调整 --&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;LAPTOP-1A91HHJ4:8032&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;LAPTOP-1A91HHJ4:8030&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;LAPTOP-1A91HHJ4:8031&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;LAPTOP-1A91HHJ4:8033&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;LAPTOP-1A91HHJ4:8088&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"mapred-site\"><a class=\"markdownIt-Anchor\" href=\"#mapred-site\">#</a> mapred-site</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class=\"line\">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"line\">  you may not use this file except in compliance with the License.</span><br><span class=\"line\">  You may obtain a copy of the License at</span><br><span class=\"line\"></span><br><span class=\"line\">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"></span><br><span class=\"line\">  Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\">  See the License for the specific language governing permissions and</span><br><span class=\"line\">  limitations under the License. See accompanying LICENSE file.</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!--</span><br><span class=\"line\">    &lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">      &lt;name&gt;mapreduce.job.tracker&lt;/name&gt;</span><br><span class=\"line\">      &lt;value&gt;hdfs://LAPTOP-1A91HHJ4:8001&lt;/value&gt;</span><br><span class=\"line\">      &lt;final&gt;true&lt;/final&gt;</span><br><span class=\"line\"> &lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">        &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class=\"line\">        &lt;value&gt;LAPTOP-1A91HHJ4:10020&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;property&gt;</span><br><span class=\"line\">        &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class=\"line\">        &lt;value&gt;LAPTOP-1A91HHJ4:19888&lt;/value&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>由于我走了很多的弯路，可能这上面的配置多了很多不必要的东西，但一定是可以跑通的。</p>\n<p>如果遇到了类似端口占用的报错请直接删除它，例如报错：Port in use:0.0.0.0:8042, 首先检查占用端口的进程：<br>\n‘netstat -ano | findstr :8042’<br>\n找到他的进程 ID，输入指令:'taskill /PID yourIdNum /F’即可</p>\n<h1 id=\"问题重述\"><a class=\"markdownIt-Anchor\" href=\"#问题重述\">#</a> 问题重述</h1>\n<p>一 实验目的<br>\n 1. 学习基于 MapReduce 框架的分布式计算程序设计方法。<br>\n2. 学习基于 Spark 框架的分布式计算程序设计方法。<br>\n二 实验题目<br>\n题目 1<br>\n 输入文件为学生成绩信息，包含了必修课与选修课成绩，格式如下：<br>\n班级 1, 姓名 1, 科目 1, 必修，成绩 1  <code>&lt;br&gt;</code>  （注： <code>&lt;br&gt;</code>  为换行符）<br>\n班级 2, 姓名 2, 科目 1, 必修，成绩 2  <code>&lt;br&gt;</code> <br>\n 班级 1, 姓名 1, 科目 2, 选修，成绩 3  <code>&lt;br&gt;</code> <br>\n………., ………, ………, ………    <code>&lt;br&gt;</code></p>\n<p>编写两个 Hadoop 平台上的 MapReduce 程序，分别实现如下功能：<br>\n1. 计算每个学生必修课的平均成绩。<br>\n2. 按科目统计每个班的平均成绩。<br>\n题目 2<br>\n 输入文件的每一行为具有父子 / 父女 / 母子 / 母女 / 关系的一对人名，例如：<br>\nTim, Andy  <code>&lt;br&gt;</code> <br>\nHarry, Alice  <code>&lt;br&gt;</code> <br>\nMark, Louis  <code>&lt;br&gt;</code> <br>\nAndy, Joseph  <code>&lt;br&gt;</code> <br>\n…………, …………  <code>&lt;br&gt;</code> <br>\n 假定不会出现重名现象。<br>\n编写 Hadoop 平台上的 MapReduce 程序，找出所有具有 grandchild-grandparent 关系的人名组。<br>\n题目 3<br>\n 输入文件为学生成绩信息，包含了必修课与选修课成绩，格式如下：<br>\n班级 1, 姓名 1, 科目 1, 必修，成绩 1  <code>&lt;br&gt;</code>  （注： <code>&lt;br&gt;</code>  为换行符）<br>\n班级 2, 姓名 2, 科目 1, 必修，成绩 2  <code>&lt;br&gt;</code> <br>\n 班级 1, 姓名 1, 科目 2, 选修，成绩 3  <code>&lt;br&gt;</code> <br>\n………., ………, ………, ………    <code>&lt;br&gt;</code> <br>\n 编写一个 Spark 程序，同时实现如下功能：</p>\n<ol>\n<li>计算每个学生必修课的平均成绩。</li>\n<li>统计学生必修课平均成绩在：'90<sub>100,80</sub>89,70<sub>79,60</sub>69 和 60 分以下’这 5 个分数段的人数。</li>\n</ol>\n<h1 id=\"具体实现\"><a class=\"markdownIt-Anchor\" href=\"#具体实现\">#</a> 具体实现</h1>\n<h2 id=\"题目1\"><a class=\"markdownIt-Anchor\" href=\"#题目1\">#</a> 题目 1</h2>\n<h3 id=\"问题1\"><a class=\"markdownIt-Anchor\" href=\"#问题1\">#</a> 问题 1</h3>\n<h4 id=\"配置pom\"><a class=\"markdownIt-Anchor\" href=\"#配置pom\">#</a> 配置 pom</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.ls&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;StuAvg&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.3.3&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;22&lt;/maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;22&lt;/maven.compiler.target&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;finalName&gt;StuAvg&lt;/finalName&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p>剩下的配置文件与之类似，不再赘述</p>\n<h4 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.ls;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\">import org.apache.hadoop.fs.Path;</span><br><span class=\"line\">import org.apache.hadoop.io.DoubleWritable;</span><br><span class=\"line\">import org.apache.hadoop.io.LongWritable;</span><br><span class=\"line\">import org.apache.hadoop.io.Text;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.Job;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.Mapper;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.Reducer;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class StuAvg &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static class StuMap extends Mapper&lt;LongWritable, Text, Text, LongWritable&gt; &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void map (LongWritable key, Text value, Context context) throws IOException, InterruptedException &#123;</span><br><span class=\"line\">            String line = value.toString();</span><br><span class=\"line\">            String[] field = line.split(&quot;,&quot;);</span><br><span class=\"line\">            if ( field.length == 5 &amp;&amp; field[3].equals(&quot;必修&quot;)) &#123;</span><br><span class=\"line\">                String Name = field[1] ;</span><br><span class=\"line\">                long score = Long.parseLong(field[4]);</span><br><span class=\"line\">                context.write(new Text(Name), new LongWritable(score));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static class StuReduce extends Reducer&lt;Text, LongWritable, Text, DoubleWritable&gt; &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void reduce(Text key, Iterable&lt;LongWritable&gt; values, Context context) throws IOException, InterruptedException &#123;</span><br><span class=\"line\">            long sum = 0;</span><br><span class=\"line\">            int count = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">            for (LongWritable val : values) &#123;</span><br><span class=\"line\">                sum += val.get();</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (count &gt; 0) &#123;</span><br><span class=\"line\">                double average = (double) sum / (double) count;</span><br><span class=\"line\">                context.write(key, new DoubleWritable(average));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        Configuration conf = new Configuration();</span><br><span class=\"line\">        Job job = Job.getInstance(conf);</span><br><span class=\"line\">        job.setJarByClass(StuMap.class);</span><br><span class=\"line\">        job.setMapperClass(StuMap.class);</span><br><span class=\"line\">        job.setReducerClass(StuReduce.class);</span><br><span class=\"line\">        job.setMapOutputKeyClass(Text.class);</span><br><span class=\"line\">        job.setMapOutputValueClass(LongWritable.class);</span><br><span class=\"line\">        job.setOutputKeyClass(Text.class);</span><br><span class=\"line\">        job.setOutputValueClass(DoubleWritable.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        FileInputFormat.setInputPaths(job, new Path(args[0]));</span><br><span class=\"line\">        FileOutputFormat.setOutputPath(job, new Path(args[1]));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.exit(job.waitForCompletion(true) ? 0 : 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"问题2\"><a class=\"markdownIt-Anchor\" href=\"#问题2\">#</a> 问题 2</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.ls;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\">import org.apache.hadoop.fs.Path;</span><br><span class=\"line\">import org.apache.hadoop.io.DoubleWritable;</span><br><span class=\"line\">import org.apache.hadoop.io.LongWritable;</span><br><span class=\"line\">import org.apache.hadoop.io.Text;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.Job;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.Mapper;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.Reducer;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ClassAvg &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static class Map extends Mapper&lt;LongWritable, Text, Text, LongWritable&gt; &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void map (LongWritable key, Text value, Context context) throws IOException, InterruptedException &#123;</span><br><span class=\"line\">            String line = value.toString();</span><br><span class=\"line\">            String[] field = line.split(&quot;,&quot;);</span><br><span class=\"line\">            if ( field.length == 5 ) &#123;</span><br><span class=\"line\">                String Name = field[0]+&quot;_&quot;+field[2] ;</span><br><span class=\"line\">                long score = Long.parseLong(field[4]);</span><br><span class=\"line\">                context.write(new Text(Name), new LongWritable(score));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static class Reduce extends Reducer&lt;Text, LongWritable, Text, DoubleWritable&gt; &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void reduce(Text key, Iterable&lt;LongWritable&gt; values, Context context) throws IOException, InterruptedException &#123;</span><br><span class=\"line\">            long sum = 0;</span><br><span class=\"line\">            int count = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">            for (LongWritable val : values) &#123;</span><br><span class=\"line\">                sum += val.get();</span><br><span class=\"line\">                count++ ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            double average = (double) sum / (double) count;</span><br><span class=\"line\">            context.write(key, new DoubleWritable(average));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        Configuration conf = new Configuration();</span><br><span class=\"line\">        Job job = Job.getInstance(conf);</span><br><span class=\"line\">        job.setJarByClass(Map.class);</span><br><span class=\"line\">        job.setMapperClass(Map.class);</span><br><span class=\"line\">        job.setReducerClass(Reduce.class);</span><br><span class=\"line\">        job.setMapOutputKeyClass(Text.class);</span><br><span class=\"line\">        job.setMapOutputValueClass(LongWritable.class);</span><br><span class=\"line\">        job.setOutputKeyClass(Text.class);</span><br><span class=\"line\">        job.setOutputValueClass(DoubleWritable.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        FileInputFormat.setInputPaths(job, new Path(args[0]));</span><br><span class=\"line\">        FileOutputFormat.setOutputPath(job, new Path(args[1]));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.exit(job.waitForCompletion(true) ? 0 : 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"题目2\"><a class=\"markdownIt-Anchor\" href=\"#题目2\">#</a> 题目 2</h2>\n<h3 id=\"代码-2\"><a class=\"markdownIt-Anchor\" href=\"#代码-2\">#</a> 代码</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.ls;</span><br><span class=\"line\">import org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\">import org.apache.hadoop.fs.Path;</span><br><span class=\"line\">import org.apache.hadoop.io.DoubleWritable;</span><br><span class=\"line\">import org.apache.hadoop.io.LongWritable;</span><br><span class=\"line\">import org.apache.hadoop.io.Text;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.Job;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.Mapper;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.Reducer;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class=\"line\">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">public class GrandPC &#123;</span><br><span class=\"line\">    public static class Map extends Mapper&lt;LongWritable, Text, Text, Text&gt; &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void map (LongWritable key, Text value, Context context) throws IOException, InterruptedException &#123;</span><br><span class=\"line\">            String line = value.toString();</span><br><span class=\"line\">            String[] names = line.split(&quot;,&quot;);</span><br><span class=\"line\">            String child = names[0].trim()+&quot;_child&quot;;</span><br><span class=\"line\">            String grand = names[1].trim()+&quot;_parent&quot;;</span><br><span class=\"line\">            context.write(new Text(names[0].trim()), new Text(grand));</span><br><span class=\"line\">            context.write(new Text(names[1].trim()), new Text(child));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static class Reduce extends Reducer&lt;Text, Text, Text, Text&gt; &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void reduce (Text key, Iterable&lt;Text&gt; values, Context context) throws IOException, InterruptedException &#123;</span><br><span class=\"line\">            String grand = key.toString();</span><br><span class=\"line\">            ArrayList&lt;String&gt; parents = new ArrayList&lt;&gt;() ;</span><br><span class=\"line\">            ArrayList&lt;String&gt; children = new ArrayList&lt;&gt;() ;</span><br><span class=\"line\">            for (Text value : values) &#123;</span><br><span class=\"line\">                String node = value.toString();</span><br><span class=\"line\">                String [] name = node.split(&quot;_&quot;) ;</span><br><span class=\"line\">                if ( name[1].equals(&quot;child&quot;) ) &#123;</span><br><span class=\"line\">                    children.add(name[0].trim());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if ( name[1].equals(&quot;parent&quot;) ) &#123;</span><br><span class=\"line\">                    parents.add(name[0].trim());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else &#123;</span><br><span class=\"line\">                    continue ;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            for (String child : children) &#123;</span><br><span class=\"line\">                for (String parent : parents) &#123;</span><br><span class=\"line\">                    context.write(new Text(child), new Text(parent));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        Configuration conf = new Configuration();</span><br><span class=\"line\">        Job job = Job.getInstance(conf);</span><br><span class=\"line\">        job.setJarByClass(Map.class);</span><br><span class=\"line\">        job.setMapperClass(Map.class);</span><br><span class=\"line\">        job.setReducerClass(Reduce.class);</span><br><span class=\"line\">        job.setMapOutputKeyClass(Text.class);</span><br><span class=\"line\">        job.setMapOutputValueClass(Text.class);</span><br><span class=\"line\">        job.setOutputKeyClass(Text.class);</span><br><span class=\"line\">        job.setOutputValueClass(Text.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        FileInputFormat.setInputPaths(job, new Path(args[0]));</span><br><span class=\"line\">        FileOutputFormat.setOutputPath(job, new Path(args[1]));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.exit(job.waitForCompletion(true) ? 0 : 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\">#</a> 思路</h3>\n<p>思路是输入的数据例如 child,parent，我们将它变为两组输出，一组为 child,parentParent, 一组为 parent,childChild。在 map 阶段，若对于同一 KEY 有多个值，我们将值划分为 Parent 组和 Child 组一一匹配作为祖先 - 孩子组输出。</p>\n<h2 id=\"题目3\"><a class=\"markdownIt-Anchor\" href=\"#题目3\">#</a> 题目 3</h2>\n<h3 id=\"代码-3\"><a class=\"markdownIt-Anchor\" href=\"#代码-3\">#</a> 代码</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># -*- coding: gb18030 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">from pyspark import SparkConf, SparkContext</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">conf = SparkConf().setMaster(&quot;local&quot;).setAppName(&quot;gradecount&quot;)</span><br><span class=\"line\">sc = SparkContext(conf = conf)</span><br><span class=\"line\">grades = sc.textFile(&quot;/spark/grades.txt&quot;)</span><br><span class=\"line\"> </span><br><span class=\"line\">def f(x):</span><br><span class=\"line\">    if(x &gt;= 90 and x &lt;= 100):</span><br><span class=\"line\">        return (&quot;90-100&quot;)</span><br><span class=\"line\">    if(x &gt;= 80 and x &lt; 90):</span><br><span class=\"line\">        return (&quot;80-89&quot;) </span><br><span class=\"line\">    if(x &gt;= 70 and x &lt; 80):</span><br><span class=\"line\">        return (&quot;70-79&quot;) </span><br><span class=\"line\">    if(x &gt;= 60 and x &lt; 70):</span><br><span class=\"line\">        return (&quot;60-69&quot;) </span><br><span class=\"line\">    if(x &lt; 60):</span><br><span class=\"line\">        return (&quot;0-59&quot;) </span><br><span class=\"line\">grades = grades.filter(lambda line: &quot;必修&quot; in line)</span><br><span class=\"line\"></span><br><span class=\"line\">name_grade_pairs = grades.map(lambda line: (line.split(&quot;,&quot;)[1], (int(line.split(&quot;,&quot;)[4]), 1)))</span><br><span class=\"line\"># name_grade_pairs.saveAsTextFile(&quot;name_grade_pairs&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">avg_grades = name_grade_pairs.reduceByKey(lambda x1, x2: (x1[0] + x2[0], x1[1] + x2[1])).mapValues(lambda x: int(x[0] / x[1])).sortBy(lambda x: x[1], ascending=True)</span><br><span class=\"line\">avg_grades.saveAsTextFile(&quot;/avg_grades&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">interval_grades = avg_grades.map(lambda x: (f(x[1]), 1))</span><br><span class=\"line\">interval_stu_nums = interval_grades.reduceByKey(lambda x, y: (x + y)).sortByKey()</span><br><span class=\"line\">interval_stu_nums.saveAsTextFile(&quot;/interval_stu_nums&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"具体指令\"><a class=\"markdownIt-Anchor\" href=\"#具体指令\">#</a> 具体指令</h1>\n<h2 id=\"打开hadoop\"><a class=\"markdownIt-Anchor\" href=\"#打开hadoop\">#</a> 打开 hadoop</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start-all</span><br></pre></td></tr></table></figure>\n<h2 id=\"stuavg\"><a class=\"markdownIt-Anchor\" href=\"#stuavg\">#</a> StuAvg</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean</span><br><span class=\"line\">mvn package</span><br><span class=\"line\"></span><br><span class=\"line\">hadoop fs -mkdir /StuAvg</span><br><span class=\"line\">hadoop fs -put grades.txt /StuAvg</span><br><span class=\"line\">hadoop jar ./target/StuAvg.jar com.ls.StuAvg /StuAvg/grades.txt /output1</span><br><span class=\"line\"></span><br><span class=\"line\">hadoop fs -ls /output1</span><br><span class=\"line\">hadoop fs -cat /output1/part-r-00000</span><br><span class=\"line\">hadoop fs -rm -r /output1</span><br></pre></td></tr></table></figure>\n<h2 id=\"classavg\"><a class=\"markdownIt-Anchor\" href=\"#classavg\">#</a> ClassAvg</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean</span><br><span class=\"line\">mvn package</span><br><span class=\"line\"></span><br><span class=\"line\">hadoop fs -mkdir /ClassAvg</span><br><span class=\"line\">hadoop fs -put grades.txt /ClassAvg</span><br><span class=\"line\">hadoop jar ./target/ClassAvg.jar com.ls.ClassAvg /ClassAvg/grades.txt /output2</span><br><span class=\"line\"></span><br><span class=\"line\">hadoop fs -ls /output2</span><br><span class=\"line\">hadoop fs -cat /output2/part-r-00000</span><br><span class=\"line\">hadoop fs -rm -r /output2</span><br></pre></td></tr></table></figure>\n<h2 id=\"grandpc\"><a class=\"markdownIt-Anchor\" href=\"#grandpc\">#</a> GrandPC</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean</span><br><span class=\"line\">mvn package</span><br><span class=\"line\"></span><br><span class=\"line\">hadoop fs -mkdir /GrandPC</span><br><span class=\"line\">hadoop fs -put child-parent.txt /GrandPC</span><br><span class=\"line\">hadoop jar ./target/GrandPC.jar com.ls.GrandPC /GrandPC/child-parent.txt /output3</span><br><span class=\"line\"></span><br><span class=\"line\">hadoop fs -ls /output3</span><br><span class=\"line\">hadoop fs -cat /output3/part-r-00000</span><br><span class=\"line\">hadoop fs -rm -r /output3</span><br></pre></td></tr></table></figure>\n<h2 id=\"spark\"><a class=\"markdownIt-Anchor\" href=\"#spark\">#</a> Spark</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start-dfs </span><br><span class=\"line\"></span><br><span class=\"line\">hadoop fs -mkdir /spark</span><br><span class=\"line\">hadoop fs -put C:\\Users\\11523\\Desktop\\Spark\\grades.txt /spark</span><br><span class=\"line\"></span><br><span class=\"line\">pyspark</span><br><span class=\"line\"></span><br><span class=\"line\">spark-submit Spark.py</span><br><span class=\"line\"></span><br><span class=\"line\">hadoop fs -cat /interval_stu_nums/part-00000</span><br><span class=\"line\">hadoop fs -cat /avg_grades/part-00000</span><br></pre></td></tr></table></figure>\n<h1 id=\"实际效果\"><a class=\"markdownIt-Anchor\" href=\"#实际效果\">#</a> 实际效果</h1>\n<h2 id=\"stuavg-2\"><a class=\"markdownIt-Anchor\" href=\"#stuavg-2\">#</a> StuAvg</h2>\n<p><img data-src=\"2.png\" alt=\"\"></p>\n<h2 id=\"classavg-2\"><a class=\"markdownIt-Anchor\" href=\"#classavg-2\">#</a> ClassAvg</h2>\n<p><img data-src=\"3.png\" alt=\"\"></p>\n<h2 id=\"grandpc-2\"><a class=\"markdownIt-Anchor\" href=\"#grandpc-2\">#</a> GrandPC</h2>\n<p><img data-src=\"4.png\" alt=\"\"></p>\n<h2 id=\"spark-2\"><a class=\"markdownIt-Anchor\" href=\"#spark-2\">#</a> Spark</h2>\n<p><img data-src=\"5.png\" alt=\"\"><br>\n<img data-src=\"6.png\" alt=\"\"></p>\n",
            "tags": [
                "代码",
                "分布式"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/06/08/%E6%88%96%E8%AE%B8%E6%88%91%E4%BB%AC%E6%B0%B8%E8%BF%9C%E6%97%A0%E6%B3%95%E8%8E%B7%E5%BE%97%E5%B9%B3%E9%9D%99/",
            "url": "http://amentiraz.github.io/2024/06/08/%E6%88%96%E8%AE%B8%E6%88%91%E4%BB%AC%E6%B0%B8%E8%BF%9C%E6%97%A0%E6%B3%95%E8%8E%B7%E5%BE%97%E5%B9%B3%E9%9D%99/",
            "title": "或许我们永远无法获得平静",
            "date_published": "2024-06-08T08:09:20.000Z",
            "content_html": "<p>从小到大，我们不断成长，我们从哭闹，到隐忍，从无法控制自己的情绪，到能够向别人展示自己，可我们真的能达到自己理想的状态吗。</p>\n<span id=\"more\"></span>\n<p>过去的两个月应当是我活到 21 岁的现在，成长最大的几个月了。我找到了自己存在的位置，找到了自己存在的方式，我决定去热爱这个世界。我已经能承受大部分的打击了，无论我处于怎样糟糕的情况我认为我都可以平静的处理。我取回了生活的激情又去除了其中隐藏着的偏执，我应当是活出了我高中时理想的样子了。</p>\n<p>然而，在这几天正是大三的我面临许多抉择的时候，也借此机会检验了自己的内心。找研究生导师是我上周主要做的工作。面对完全陌生的人，你向他请求在他手下学习三年，这如果让以前的我来做一定会无所适从吧，我原以为经历了成长的我能够平静而顺利的去找到自己的最优解，但生活总是事与愿违。从找有哪些老师，到该怎么找老师，中间我甚至为了了解相关信息去请了一位认识的人吃饭，主动向老师发邮件并约面谈 —— 要知道，我其实并不愿意主动与他人来往。</p>\n<p>我干了太多原本自己不愿意去做的事，在这个过程中，我深刻的感受到自己的疲劳，自己的抓瞎和接踵而至的沮丧。在向老师发邮件的那天晚上我一个人在校园里面走了很久，走的时候什么都没想，在清静中回复了些许能量后，买了瓶小罐的啤酒，喝完就睡，酒精实在是逃避生活的一大良剂。或许对我而言，停止与外界接触才能获得平静吧。可这样怎么能行呢？</p>\n<p>在前几个月个人的蜕变中，其实遗留下来了一些问题，那就是我该如何看待我以前喜欢的人。这里的意思并不是我不知道该怎么面对她，而是当我看到她的消息或是想起她时我会生理性的感到恶心。这让我十分惊讶。我知道我的身体总比我的心灵能更快的对事物做出反应，我很想知道这背后的逻辑是什么。是我对过去的自己感到厌恶呢，还是对这位女生感到厌恶呢。我自认为的放下了她，而我是否只是隐藏了她的存在，进一步来说，我的成长是不是只是一种对过去的逃避呢？我思考了很久但并没有找到答案，乐观来想这也许只是单纯的 PTSD 呢（笑）。</p>\n<p>外界的信息不断的冲击着我的心灵，然而我的心灵也并不完善。但可笑的是再完善又有什么用呢？假如我一夜之间一贫如洗我仍能保持平静吗？假如我遭遇车祸，余生只能在病床上度过我如何去爱这个世界呢？或许所谓的独立与清醒不过是对现状理所当然的自大罢了。再进一步说对世界的坦然接受并积极的热爱生活似乎只是一种自我满足和自欺欺人罢了。</p>\n<p>我这里并不想引出一个消极的结论。消极解决不了问题，这是我大学三年总结出来的经验。那我应当如何去面对呢？</p>\n<p>纵观上面两个案例，其实我已经知道问题出在哪了，那就是这些案例当我面对他们时，并不存在或者极少存在我个人的意志，更多的是他人或者外在环境对我的影响，这也是我这篇杂文想说的：或许我们永远无法获得平静。为什么我们无法获得平静呢，那是我们的心灵必须向他人与世界开一个口子，我们能控制这个口的大小但往往我们并不能控制流入的内容对我们造成的影响。但这并不是我们封闭内心的理由。假如追求自己内心的充实与平静是我们的目标，那么其潜在的危害也是必须经历的。这是矛盾的，但我想说的是，在这个充满挑战的世界里，我们永远无法预测世界会对我们造成怎样的影响，难道我们要眼睁睁看着世界摧毁我们，再给我们扣上抑郁症、不支持的帽子，最后让我们自己放弃自己吗，我想不是的。</p>\n<p>也许我们永远无法获得内心的平静，但这不重要；在追求成功的路上，成功也并不重要，因为当你获得成功后，那它对你便毫无吸引力了。当我真正平静的时候，世界对我也一定会失去吸引力吧。正因为我们无法获得平静，所以我们才能爱着这个世界。</p>\n",
            "tags": [
                "生活"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/06/05/scRNA%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/",
            "url": "http://amentiraz.github.io/2024/06/05/scRNA%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/",
            "title": "scRNA论文笔记",
            "date_published": "2024-06-05T02:38:37.000Z",
            "content_html": "<p>论文阅读笔记</p>\n<span id=\"more\"></span>\n<h1 id=\"abstract\"><a class=\"markdownIt-Anchor\" href=\"#abstract\">#</a> Abstract</h1>\n<p>squencing-based spatial transcriptomics (ST) 技术无法实现单细胞分辨率，而通过单细胞 RNA 测序的数据与 ST 数据存在偏差，本文开发了一个基于实例的迁移学习框架，通过 ST 数据调整 scRNA-seq 数据，从而更精确地描述细胞类型空间组织</p>\n<h1 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\">#</a> Introduction</h1>\n<p>SPOTlight: 基于非负矩阵分解回归，缺点是无法区分个体细胞类型地贡献<br>\n SpatialDWLS: 增强了特异性但消除了不想管细胞类型影响，并可能过滤稀有类型<br>\n CARD: 可以在 scRNAseq 数据不匹配地情况下分解但没有奥利 scRNA-seq 和 ST 数据的差异<br>\n stereoscope 假设 scRNA 和 ST 基于二项分布<br>\n RCTD 利用泊松分布，假设细胞类型的共享随机效应。<br>\nCell2location 采用分层贝叶斯后验分布近似 ST 数据，拟合性差。<br>\nSTRIDE: 基于潜在狄利克雷分布<br>\n DSTG：基于图卷积网络。<br>\n大多数方法按时 scRNA 和 ST 数据分布相似，但很少考虑差异</p>\n<p>本文设计的基于实例的迁移学习框架通过 ST 数据调整 scRNA-seq 数据，以改进分解，采用核平均匹配方法</p>\n<h1 id=\"results\"><a class=\"markdownIt-Anchor\" href=\"#results\">#</a> Results</h1>\n<h2 id=\"scrna-seq和st数据的分布差异\"><a class=\"markdownIt-Anchor\" href=\"#scrna-seq和st数据的分布差异\">#</a> scRNA-seq 和 ST 数据的分布差异</h2>\n<p>有三个模拟数据集，为了更好的说明不同技术导致的分布差异存在，<br>\n 采用 Simulated Data III . 对于每种细胞类型，我们检查属于该类型的细胞中细胞类型特异性基因的表达水平，然后比较相同基因在 scRNA-seq 和 ST 数据中的概率密度分布。<br>\n对于三个模拟数据的每种细胞类型绘制出概率密度曲线，能够直观的看出模拟数据三的优越性<br>\n<img data-src=\"1.jpg\" alt=\"\"></p>\n<h2 id=\"数据调整框架\"><a class=\"markdownIt-Anchor\" href=\"#数据调整框架\">#</a> 数据调整框架</h2>\n<p>首先采用 KMM 方法，通过 ST 调整 scRNA 数据，KMM 改变了每种细胞类型中相应细胞在相应细胞类型特异性基因上的权重。<br>\n然后用三个模拟数据和四个真实数据套入模型，去关注它们的性质。<br>\n最后将 Raw 结果和调整后的结果比较<br>\n<img data-src=\"2.jpg\" alt=\"\"></p>\n<h2 id=\"评估调整数据与模拟数据\"><a class=\"markdownIt-Anchor\" href=\"#评估调整数据与模拟数据\">#</a> 评估调整数据与模拟数据</h2>\n<p>三个模拟数据集提供了 scRNA-seq 数据调整提高 ST 数据分解精度的证据，分解结果容易收到两个数据之间分布差异的影响<br>\n<img data-src=\"3.jpg\" alt=\"\"></p>\n<h2 id=\"pdac数据集上癌细胞类型的空间描述\"><a class=\"markdownIt-Anchor\" href=\"#pdac数据集上癌细胞类型的空间描述\">#</a> PDAC 数据集上癌细胞类型的空间描述</h2>\n<p>PDAC 数据表明，数据调整改善了癌细胞类型的空间描述，对细胞类型的空间组织进行更精细的注释，可以直接使用低分辨率 ST 数据来描绘癌症样本。<br>\n<img data-src=\"4.jpg\" alt=\"\"></p>\n<h2 id=\"在人类心脏上的表现\"><a class=\"markdownIt-Anchor\" href=\"#在人类心脏上的表现\">#</a> 在人类心脏上的表现</h2>\n<p>数据调整使某些基因与 ST 数据的相关性增强，并改进了分解，更丰富的基因有助于我们研究心脏相关疾病</p>\n<p>## 在小鼠嗅球数据集上的表现<br>\n调整后的数据的表达模式显示出明显的细胞类型和层的空间组织。</p>\n<h1 id=\"methods\"><a class=\"markdownIt-Anchor\" href=\"#methods\">#</a> Methods</h1>\n<p>剩下的就是理论推导，大致这篇论文想干什么，怎么干的已经了解了，后面就不写了。</p>\n",
            "tags": [
                "论文",
                "笔记"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/06/03/P2P%E7%BE%A4%E8%81%8A%E7%B3%BB%E7%BB%9F/",
            "url": "http://amentiraz.github.io/2024/06/03/P2P%E7%BE%A4%E8%81%8A%E7%B3%BB%E7%BB%9F/",
            "title": "P2P群聊系统",
            "date_published": "2024-06-03T02:39:18.000Z",
            "content_html": "<p>分布式作业</p>\n<span id=\"more\"></span>\n<h1 id=\"问题重述\"><a class=\"markdownIt-Anchor\" href=\"#问题重述\">#</a> 问题重述</h1>\n<p><img data-src=\"1.png\" alt=\"\"></p>\n<h1 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h1>\n<h2 id=\"全序广播协议\"><a class=\"markdownIt-Anchor\" href=\"#全序广播协议\">#</a> 全序广播协议</h2>\n<p><img data-src=\"2.png\" alt=\"\"></p>\n<p>采用一个服务端，多个客户端的方法，当客户端收到服务端传来的信息时，判断该信息属于 ACK 信息、新加入客户端信息还是 message 消息。</p>\n<p>如果这条信息是属于 ACK 信息，将对应消息 m 的 ACK+1, 观察队列头部的消息，如果关于该消息已经收到了所有节点的 ACK 消息，则将其从队列中取出，并完成投递。</p>\n<p>如果这条信息属于发送的信息，将消息按逻辑时间戳先后顺序放入缓存队列，观察缓存队列头部的消息，如果该消息尚未广播过 ACK 消息，则向所有节点发送关于该消息的 ACK 信息.</p>\n<p>具体实现如下图代码所示</p>\n<p><img data-src=\"3.png\" alt=\"\"></p>\n<h2 id=\"因果关系\"><a class=\"markdownIt-Anchor\" href=\"#因果关系\">#</a> 因果关系</h2>\n<p><img data-src=\"4.png\" alt=\"\"></p>\n<p>当客户端收到一条消息就将自己的时间戳与该信息的时间戳相比较，更新为更大的值实现因果关系的同一。</p>\n<p>具体实现如下<br>\n<img data-src=\"5.png\" alt=\"\"></p>\n<h2 id=\"传递消息\"><a class=\"markdownIt-Anchor\" href=\"#传递消息\">#</a> 传递消息</h2>\n<p>采用 socket 传递消息</p>\n<h2 id=\"雪花算法\"><a class=\"markdownIt-Anchor\" href=\"#雪花算法\">#</a> 雪花算法</h2>\n<p><img data-src=\"6.png\" alt=\"\"></p>\n<p>为 Server 提供信息的 ID 号</p>\n<h1 id=\"实验环境\"><a class=\"markdownIt-Anchor\" href=\"#实验环境\">#</a> 实验环境</h1>\n<h2 id=\"软件版本\"><a class=\"markdownIt-Anchor\" href=\"#软件版本\">#</a> 软件版本</h2>\n<p>Windows11<br>\nEclipse IDE for Java Developers - 2022-03<br>\nJava 1.8<br>\nMaven3.6.1<br>\nGson2.8.5</p>\n<p><img data-src=\"7.png\" alt=\"\"></p>\n<h2 id=\"pom环境\"><a class=\"markdownIt-Anchor\" href=\"#pom环境\">#</a> pom 环境</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">  &lt;groupId&gt;com.ls&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;p2psystem&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;dependencies&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  \t&lt;dependency&gt;</span><br><span class=\"line\">    \t&lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class=\"line\">    \t&lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class=\"line\">    \t&lt;version&gt;2.8.5&lt;/version&gt;</span><br><span class=\"line\">  \t&lt;/dependency&gt;</span><br><span class=\"line\">  \t</span><br><span class=\"line\">  \t&lt;dependency&gt;</span><br><span class=\"line\">    \t&lt;groupId&gt;org.glassfish.tyrus.bundles&lt;/groupId&gt;</span><br><span class=\"line\">    \t&lt;artifactId&gt;tyrus-standalone-client&lt;/artifactId&gt;</span><br><span class=\"line\">    \t&lt;version&gt;1.18&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">  \t</span><br><span class=\"line\">  \t</span><br><span class=\"line\">  &lt;/dependencies&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"设计思路\"><a class=\"markdownIt-Anchor\" href=\"#设计思路\">#</a> 设计思路</h1>\n<h2 id=\"构架图\"><a class=\"markdownIt-Anchor\" href=\"#构架图\">#</a> 构架图</h2>\n<p><img data-src=\"8.jpg\" alt=\"\"></p>\n<h2 id=\"各个代码的用途\"><a class=\"markdownIt-Anchor\" href=\"#各个代码的用途\">#</a> 各个代码的用途</h2>\n<h3 id=\"client\"><a class=\"markdownIt-Anchor\" href=\"#client\">#</a> Client</h3>\n<p>接受服务端的信息，处理终端和前端 UI 的信息，将最终信息传递给 TextSaverApp 进行展示。</p>\n<h3 id=\"server\"><a class=\"markdownIt-Anchor\" href=\"#server\">#</a> Server</h3>\n<p>不断接收来自 PORT 端口的信息，并将信息传给所有的 Client 节点，值得主义的是由于 messageID 是唯一的，所以需要进行锁操作，我采用了 Java 中的 synchronized 函数对此变量进行锁操作。</p>\n<h3 id=\"textsaverapp\"><a class=\"markdownIt-Anchor\" href=\"#textsaverapp\">#</a> TextSaverAPP</h3>\n<p>对文本框接收到的信息进行处理并传递给 Server 服务器；对从 Client 收到的信息进行展示。</p>\n<h3 id=\"messageutilsmessage\"><a class=\"markdownIt-Anchor\" href=\"#messageutilsmessage\">#</a> MessageUtils\\Message</h3>\n<p>对信息进行定义并执行序列化和反序列化操作</p>\n<h3 id=\"messagequeue\"><a class=\"markdownIt-Anchor\" href=\"#messagequeue\">#</a> MessageQueue</h3>\n<p>对信息进行存储、删除、记录次数操作，并利用优先队列对信息进行排序。</p>\n<h3 id=\"snowflakeidgenerator\"><a class=\"markdownIt-Anchor\" href=\"#snowflakeidgenerator\">#</a> SnowflakeIdGenerator</h3>\n<p>生成信息的 ID 号</p>\n<h1 id=\"commands\"><a class=\"markdownIt-Anchor\" href=\"#commands\">#</a> Commands</h1>\n<p>mvn clean<br>\nmvn compile</p>\n<p>mvn exec:java -Dexec.mainClass=“p2psystem.Server”</p>\n<p>mvn exec:java -Dexec.mainClass=“p2psystem.Client”</p>\n<h1 id=\"java程序\"><a class=\"markdownIt-Anchor\" href=\"#java程序\">#</a> JAVA 程序</h1>\n<h2 id=\"clientjava\"><a class=\"markdownIt-Anchor\" href=\"#clientjava\">#</a> Client.java</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> p2psystem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.* ;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.gson.Gson; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SEVERADDRESS</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;127.0.0.1&quot;</span> ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">PORT</span> <span class=\"operator\">=</span> <span class=\"number\">8189</span> ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">clientNum</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">logicNum</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Gson</span> <span class=\"variable\">gson</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Gson</span>() ;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">ACKseq</span> <span class=\"operator\">=</span> <span class=\"number\">1145141919</span> ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">ACKnew</span> <span class=\"operator\">=</span> <span class=\"number\">1919810</span> ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">MessageQueue</span> <span class=\"variable\">Mqueue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MessageQueue</span> ( ) ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">TextSaverApp</span> <span class=\"variable\">chat</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TextSaverApp</span>(<span class=\"string\">&quot;chatgroup&quot;</span>) ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> ClientName ;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">ACKname</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span> <span class=\"params\">( String [] args )</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义socket,输入输出变量</span></span><br><span class=\"line\">\t\t<span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span> ( SEVERADDRESS , PORT ) ; </span><br><span class=\"line\">\t\t<span class=\"type\">BufferedReader</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span> ( <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span> ( socket.getInputStream() ) ) ; </span><br><span class=\"line\">\t\t<span class=\"type\">PrintWriter</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintWriter</span> ( socket.getOutputStream() , <span class=\"literal\">true</span> ) ; </span><br><span class=\"line\">\t\t<span class=\"type\">BufferedReader</span> <span class=\"variable\">consoleInput</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span> ( <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span> ( System.in ) ) ; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创造一个不断接受服务端信息的进程</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span> ( ( ) -&gt; &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tString serverMessageJson ; </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> ( ( serverMessageJson = in.readLine() ) != <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"type\">Message</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> MessageUtils.deserialize(serverMessageJson) ; </span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 如果这条信息是属于ACK信息</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 将对应消息m的ACK+1</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 观察队列头部的消息，如果关于该消息已经收到了所有节点的ACK消息，则将其从队列中取出，并完成投递</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( message.getseq() == ACKseq ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//Mqueue.printAllMessages();</span></span><br><span class=\"line\">\t\t\t\t\t\tMqueue.incrementIdCount(message) ; </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"type\">Message</span> <span class=\"variable\">HeadMessage</span> <span class=\"operator\">=</span> Mqueue.getHeadMessage() ; </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> Mqueue.getMessageCount(HeadMessage.getId()) ; </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> ( count == clientNum ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tlogicNum = logicNum + <span class=\"number\">1</span> ; </span><br><span class=\"line\">\t\t\t\t\t\t\tchat.setLogicNum(logicNum) ;</span><br><span class=\"line\">\t\t\t\t\t\t\tMqueue.removeMessage(HeadMessage.getId()) ; </span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">//传递给应用层</span></span><br><span class=\"line\">\t\t\t\t\t\t\tchat.appendText(ClientName + <span class=\"string\">&quot;:&quot;</span> + HeadMessage.toString());</span><br><span class=\"line\">\t\t\t\t\t\t\tSystem.out.println ( HeadMessage.toString() ) ; </span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 处理新来的客户端</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( message.getseq() == ACKnew ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tlogicNum = logicNum + <span class=\"number\">1</span> ; </span><br><span class=\"line\">\t\t\t\t\t\tchat.setLogicNum(logicNum) ;</span><br><span class=\"line\">\t\t\t\t\t\tclientNum = (<span class=\"type\">int</span>)message.getId() ; </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> ( ACKname == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tACKname = <span class=\"number\">1</span> ; </span><br><span class=\"line\">\t\t\t\t\t\t\tClientName = clientNum ; </span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println ( clientNum ) ; </span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 如果这条信息属于发送的信息</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 将消息按逻辑时间戳先后顺序放入缓存队列</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 观察缓存队列头部的消息，如果该消息尚未广播过ACK消息，则向所有节点发送关于该消息的ACK信息</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">\t\t\t\t\t\tMqueue.addMessage(message) ;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//Mqueue.printAllMessages();</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//System.out.println(message.toString());</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"type\">Message</span> <span class=\"variable\">HeadMessage</span> <span class=\"operator\">=</span> Mqueue.getHeadMessage() ; </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> Mqueue.getBroadCount(HeadMessage.getId()) ;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//System.out.println ( count ) ; </span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> ( count == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 发送ACK信息</span></span><br><span class=\"line\">\t\t\t\t\t\t\tMqueue.incrementBroadCount(message) ; </span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"type\">Message</span> <span class=\"variable\">Hmessage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Message</span> ( message.getId() , ACKseq , message.getContent() )  ; </span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">messageJson</span> <span class=\"operator\">=</span> MessageUtils.serialize(Hmessage) ; </span><br><span class=\"line\">\t\t\t\t\t\t\tlogicNum = Math.max(logicNum, message.getseq()) ; </span><br><span class=\"line\">\t\t\t\t\t\t\tlogicNum = logicNum + <span class=\"number\">1</span> ; </span><br><span class=\"line\">\t\t\t\t\t\t\tchat.setLogicNum(logicNum) ; </span><br><span class=\"line\">\t\t\t\t\t\t\tout.println(messageJson);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> ( IOException e ) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace() ; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;).start ( ) ; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 告诉服务器有新客户端加入</span></span><br><span class=\"line\">\t\t<span class=\"type\">Message</span> <span class=\"variable\">infoM</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Message</span>( <span class=\"number\">0</span> , ACKnew , <span class=\"string\">&quot;Hello&quot;</span>) ;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">messageJso</span> <span class=\"operator\">=</span> MessageUtils.serialize(infoM) ; </span><br><span class=\"line\">\t\tout.println ( messageJso ) ; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 对面板输入的数据处理</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 对终端输入的数据进行处理</span></span><br><span class=\"line\">\t\tString userInput ; </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ( (userInput = consoleInput.readLine()) != <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Message</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Message</span> ( <span class=\"number\">0</span> , logicNum , userInput ) ;</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">messageJson</span> <span class=\"operator\">=</span> MessageUtils.serialize(message) ; </span><br><span class=\"line\">\t\t\tlogicNum = logicNum + <span class=\"number\">1</span> ; </span><br><span class=\"line\">\t\t\tchat.setLogicNum(logicNum) ;</span><br><span class=\"line\">\t\t\tout.println(messageJson);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"serverjava\"><a class=\"markdownIt-Anchor\" href=\"#serverjava\">#</a> Server.java</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> p2psystem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.* ; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.* ; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.* ;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.gson.Gson; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Server</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义需要的全局变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">PORT</span> <span class=\"operator\">=</span> <span class=\"number\">8189</span> ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">messageID</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;Integer,PrintWriter&gt; clientWriters = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;() ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Gson</span> <span class=\"variable\">gson</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Gson</span>() ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">SnowflakeIdGenerator</span> <span class=\"variable\">idGenerator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SnowflakeIdGenerator</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> ) ;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">ACKseq</span> <span class=\"operator\">=</span> <span class=\"number\">1145141919</span> ;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">ACKnew</span> <span class=\"operator\">=</span> <span class=\"number\">1919810</span> ;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">clientNum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span> <span class=\"params\">( String[] args )</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println ( <span class=\"string\">&quot;Central server started!&quot;</span>) ; </span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> ( <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span> ( PORT ) ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> ( <span class=\"literal\">true</span> ) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">ClientHandler</span>( serverSocket.accept() ).start() ; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> ( IOException e ) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace(); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> Socket socket ; </span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> clientID ; </span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> BufferedReader in ; </span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> PrintWriter out ; </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"title function_\">ClientHandler</span> <span class=\"params\">( Socket socket )</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.socket = socket ; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span> <span class=\"params\">( )</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">BufferedReader</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span> ( <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span> ( socket.getInputStream() ) ) ; </span><br><span class=\"line\">\t\t\t\t<span class=\"type\">PrintWriter</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintWriter</span> ( socket.getOutputStream() , <span class=\"literal\">true</span> ) ; </span><br><span class=\"line\">\t\t\t\tclientID = socket.getPort() ; </span><br><span class=\"line\">\t\t\t\tclientWriters.put(clientID, out) ; </span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tString messageJson ; </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> ( (messageJson = in.readLine()) != <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// synchronized用来锁这个相同同步块的线程，因为messageID时唯一的，只能有一个来进行写操作</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">synchronized</span> ( Server.class ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"type\">Message</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> MessageUtils.deserialize(messageJson);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> ( message.getId() == <span class=\"number\">0</span> )</span><br><span class=\"line\">\t\t\t\t\t\t\tmessage.setId ( idGenerator.nextId() ) ; </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> ( message.getseq() == ACKnew ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tmessage.setId((<span class=\"type\">long</span>)clientNum+(<span class=\"type\">long</span>)<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\tclientNum = clientNum + <span class=\"number\">1</span> ; </span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">broadcastMessage</span> <span class=\"operator\">=</span> MessageUtils.serialize(message) ; </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span> ( PrintWriter writer : clientWriters.values() ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\twriter.println ( broadcastMessage ) ; </span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> ( IOException e ) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace(); </span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ( out != <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">\t\t\t\t\tclientWriters.remove(clientID) ; </span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tsocket.close(); </span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> ( IOException e ) &#123;</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"snowflakeldgeneratorjava\"><a class=\"markdownIt-Anchor\" href=\"#snowflakeldgeneratorjava\">#</a> SnowflakeldGenerator.java</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> p2psystem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SnowflakeIdGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> workerId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> datacenterId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">twepoch</span> <span class=\"operator\">=</span> <span class=\"number\">1288834974657L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">workerIdBits</span> <span class=\"operator\">=</span> <span class=\"number\">5L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">datacenterIdBits</span> <span class=\"operator\">=</span> <span class=\"number\">5L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">maxWorkerId</span> <span class=\"operator\">=</span> -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; workerIdBits);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">maxDatacenterId</span> <span class=\"operator\">=</span> -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">sequenceBits</span> <span class=\"operator\">=</span> <span class=\"number\">12L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">workerIdShift</span> <span class=\"operator\">=</span> sequenceBits;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">datacenterIdShift</span> <span class=\"operator\">=</span> sequenceBits + workerIdBits;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">timestampLeftShift</span> <span class=\"operator\">=</span> sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">sequenceMask</span> <span class=\"operator\">=</span> -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; sequenceBits);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"variable\">lastTimestamp</span> <span class=\"operator\">=</span> -<span class=\"number\">1L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"variable\">sequence</span> <span class=\"operator\">=</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SnowflakeIdGenerator</span><span class=\"params\">(<span class=\"type\">long</span> workerId, <span class=\"type\">long</span> datacenterId)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(String.format(<span class=\"string\">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(String.format(<span class=\"string\">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.workerId = workerId;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.datacenterId = datacenterId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"type\">long</span> <span class=\"title function_\">nextId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">timestamp</span> <span class=\"operator\">=</span> timeGen();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(String.format(<span class=\"string\">&quot;Clock moved backwards. Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class=\"line\">            sequence = (sequence + <span class=\"number\">1</span>) &amp; sequenceMask;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sequence == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sequence = <span class=\"number\">0L</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        lastTimestamp = timestamp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) |</span><br><span class=\"line\">                (datacenterId &lt;&lt; datacenterIdShift) |</span><br><span class=\"line\">                (workerId &lt;&lt; workerIdShift) |</span><br><span class=\"line\">                sequence;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">long</span> <span class=\"title function_\">tilNextMillis</span><span class=\"params\">(<span class=\"type\">long</span> lastTimestamp)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">timestamp</span> <span class=\"operator\">=</span> timeGen();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class=\"line\">            timestamp = timeGen();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> timestamp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">long</span> <span class=\"title function_\">timeGen</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"textsaverapp-2\"><a class=\"markdownIt-Anchor\" href=\"#textsaverapp-2\">#</a> TextSaverApp</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> p2psystem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TextSaverApp</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> JFrame frame;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> JTextArea textArea;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> JTextField textField;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> JButton sendButton;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BufferedWriter writer;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SEVERADDRESS</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;127.0.0.1&quot;</span> ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">PORT</span> <span class=\"operator\">=</span> <span class=\"number\">8189</span> ;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">logicNum</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> ;</span><br><span class=\"line\">\tSocket socket ;</span><br><span class=\"line\">\tBufferedReader in ; </span><br><span class=\"line\">\tPrintWriter out ; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setLogicNum</span> <span class=\"params\">( <span class=\"type\">int</span> logicNum )</span> &#123; </span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.logicNum = logicNum ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TextSaverApp</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        setupUI();</span><br><span class=\"line\">        setupWriter(<span class=\"string\">&quot;output.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        \tsocket = <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span> ( SEVERADDRESS , PORT ) ; </span><br><span class=\"line\">        \tin = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span> ( <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span> ( socket.getInputStream() ) ) ; </span><br><span class=\"line\">        \tout = <span class=\"keyword\">new</span> <span class=\"title class_\">PrintWriter</span> ( socket.getOutputStream() , <span class=\"literal\">true</span> ) ; </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> ( IOException e ) &#123;</span><br><span class=\"line\">        \te.getStackTrace() ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TextSaverApp</span><span class=\"params\">(String filePath)</span> &#123;</span><br><span class=\"line\">        setupUI();</span><br><span class=\"line\">        setupWriter(filePath);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        \tsocket = <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span> ( SEVERADDRESS , PORT ) ; </span><br><span class=\"line\">        \tin = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span> ( <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span> ( socket.getInputStream() ) ) ; </span><br><span class=\"line\">        \tout = <span class=\"keyword\">new</span> <span class=\"title class_\">PrintWriter</span> ( socket.getOutputStream() , <span class=\"literal\">true</span> ) ; </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> ( IOException e ) &#123;</span><br><span class=\"line\">        \te.getStackTrace() ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setupUI</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        frame = <span class=\"keyword\">new</span> <span class=\"title class_\">JFrame</span>(<span class=\"string\">&quot;Text Saver&quot;</span>);</span><br><span class=\"line\">        textArea = <span class=\"keyword\">new</span> <span class=\"title class_\">JTextArea</span>(<span class=\"number\">20</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">        textField = <span class=\"keyword\">new</span> <span class=\"title class_\">JTextField</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\">        sendButton = <span class=\"keyword\">new</span> <span class=\"title class_\">JButton</span>(<span class=\"string\">&quot;Send&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        textArea.setEditable(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"type\">JPanel</span> <span class=\"variable\">panel</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JPanel</span>();</span><br><span class=\"line\">        panel.setLayout(<span class=\"keyword\">new</span> <span class=\"title class_\">BorderLayout</span>());</span><br><span class=\"line\">        panel.add(<span class=\"keyword\">new</span> <span class=\"title class_\">JScrollPane</span>(textArea), BorderLayout.CENTER);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">JPanel</span> <span class=\"variable\">inputPanel</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JPanel</span>();</span><br><span class=\"line\">        inputPanel.add(textField);</span><br><span class=\"line\">        inputPanel.add(sendButton);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.getContentPane().add(panel, BorderLayout.CENTER);</span><br><span class=\"line\">        frame.getContentPane().add(inputPanel, BorderLayout.SOUTH);</span><br><span class=\"line\"></span><br><span class=\"line\">        sendButton.addActionListener(<span class=\"keyword\">new</span> <span class=\"title class_\">ActionListener</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> &#123;</span><br><span class=\"line\">                sendText();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        textField.addActionListener(<span class=\"keyword\">new</span> <span class=\"title class_\">ActionListener</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> &#123;</span><br><span class=\"line\">                sendText();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.pack();</span><br><span class=\"line\">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class=\"line\">        frame.setVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setupWriter</span><span class=\"params\">(String filePath)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            writer = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(filePath, <span class=\"literal\">true</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendText</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> textField.getText();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!text.isEmpty()) &#123;</span><br><span class=\"line\">        \t<span class=\"type\">Message</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Message</span> ( <span class=\"number\">0</span> , logicNum , text ) ;</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">messageJson</span> <span class=\"operator\">=</span> MessageUtils.serialize(message) ; </span><br><span class=\"line\">\t\t\tlogicNum = logicNum + <span class=\"number\">1</span> ; </span><br><span class=\"line\">\t\t\tout.println(messageJson);</span><br><span class=\"line\">\t\t\ttextField.setText(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">/*textArea.append(text + &quot;\\n&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">            </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                writer.write(text);</span></span><br><span class=\"line\"><span class=\"comment\">                writer.newLine();</span></span><br><span class=\"line\"><span class=\"comment\">                writer.flush();</span></span><br><span class=\"line\"><span class=\"comment\">            &#125; catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                e.printStackTrace();</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;*/</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">appendText</span><span class=\"params\">(String text)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!text.isEmpty()) &#123;</span><br><span class=\"line\">            textArea.append(text + <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                writer.write(text);</span><br><span class=\"line\">                writer.newLine();</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"messagequeue-2\"><a class=\"markdownIt-Anchor\" href=\"#messagequeue-2\">#</a> MessageQueue</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> p2psystem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MessageQueue</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PriorityQueue&lt;Message&gt; messageQueue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Long, Integer&gt; idCounts;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Long, Integer&gt; broadCounts;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MessageQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化优先队列和ID计数器</span></span><br><span class=\"line\">        messageQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;(Comparator.comparingLong(Message::getseq));</span><br><span class=\"line\">        idCounts = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        broadCounts = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;() ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加消息到队列</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addMessage</span><span class=\"params\">(Message message)</span> &#123;</span><br><span class=\"line\">        messageQueue.offer(message); <span class=\"comment\">// 添加到优先队列</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">incrementBroadCount</span> <span class=\"params\">( Message message )</span> &#123;</span><br><span class=\"line\">    \tbroadCounts.put(message.getId(), <span class=\"number\">1</span> ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getBroadCount</span> <span class=\"params\">( <span class=\"type\">long</span> id )</span> &#123; </span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> broadCounts.getOrDefault(id, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 增加id的ACK计数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">incrementIdCount</span> <span class=\"params\">( Message message )</span> &#123;</span><br><span class=\"line\">    \tidCounts.put(message.getId(), idCounts.getOrDefault(message.getId(), <span class=\"number\">0</span>) + <span class=\"number\">1</span>); <span class=\"comment\">// 增加ID计数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除指定ID的消息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeMessage</span><span class=\"params\">(<span class=\"type\">long</span> id)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个新的优先队列用于存储剩余的消息</span></span><br><span class=\"line\">        PriorityQueue&lt;Message&gt; newQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;(Comparator.comparingLong(Message::getseq));</span><br><span class=\"line\">        <span class=\"comment\">// 从原队列中移除所有指定ID的消息，并更新ID计数</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!messageQueue.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"type\">Message</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> messageQueue.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (message.getId() != id) &#123;</span><br><span class=\"line\">                newQueue.offer(message); <span class=\"comment\">// 将非指定ID的消息添加到新队列中</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                idCounts.put(id, <span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 更新队列为新队列</span></span><br><span class=\"line\">        messageQueue = newQueue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取头部信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Message <span class=\"title function_\">getHeadMessage</span> <span class=\"params\">( )</span> &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> messageQueue.peek() ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取队列中的所有消息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title function_\">getAllMessages</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(messageQueue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取指定ID的消息数量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getMessageCount</span><span class=\"params\">(<span class=\"type\">long</span> id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> idCounts.getOrDefault(id, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打印队列中的所有消息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printAllMessages</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;All Messages in the Queue:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Message message : messageQueue) &#123;</span><br><span class=\"line\">            System.out.println(message.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"message\"><a class=\"markdownIt-Anchor\" href=\"#message\">#</a> Message</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> p2psystem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Message</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span> ; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">long</span> id ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String content ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> seq ; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Message</span> <span class=\"params\">( <span class=\"type\">long</span> id , <span class=\"type\">int</span> seq , String content )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.id = id ; </span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.seq = seq ; </span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.content = content ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">getId</span> <span class=\"params\">( )</span> &#123; <span class=\"keyword\">return</span> id ; &#125; </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span> <span class=\"params\">( <span class=\"type\">long</span> id )</span> &#123; <span class=\"built_in\">this</span>.id = id ; &#125; </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getseq</span> <span class=\"params\">( )</span> &#123; <span class=\"keyword\">return</span> seq ; &#125; </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setseq</span> <span class=\"params\">( <span class=\"type\">int</span> seq )</span> &#123; <span class=\"built_in\">this</span>.seq = seq ; &#125; </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getContent</span> <span class=\"params\">( )</span> &#123; <span class=\"keyword\">return</span> content ; &#125; </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setContent</span> <span class=\"params\">( String content )</span> &#123; <span class=\"built_in\">this</span>.content = content ; &#125; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span> <span class=\"params\">( )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Message&#123;&quot;</span>+</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;id=&quot;</span>+id+</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;,seq=&quot;</span>+seq+</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;,content=&#x27;&quot;</span>+content+<span class=\"string\">&#x27;\\&#x27;&#x27;</span>+</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"messageutils\"><a class=\"markdownIt-Anchor\" href=\"#messageutils\">#</a> MessageUtils</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> p2psystem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.gson.Gson;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MessageUtils</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Gson</span> <span class=\"variable\">gson</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Gson</span> ( ) ; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">serialize</span> <span class=\"params\">( Message message )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> gson.toJson(message) ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Message <span class=\"title function_\">deserialize</span> <span class=\"params\">( String json )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> gson.fromJson(json, Message.class) ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"实现效果\"><a class=\"markdownIt-Anchor\" href=\"#实现效果\">#</a> 实现效果</h1>\n<p><img data-src=\"8.png\" alt=\"\"><br>\n当我们在文本框中输入想发送的信息后，点击 Send 该信息会在 Client 各自的显示界面中出现，对于不同文本框输入的值，我们可以发现 Id 号是严格递增的符合预期，Seq 代表的逻辑序号也是递增的，符合我们实现的原理。可以看到在后台的命令指示符中各自的程序也都是良好的运行，符合预期！</p>\n",
            "tags": [
                "代码",
                "分布式"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/05/10/%E5%88%86%E5%B8%83%E5%BC%8FMOM%E4%BD%9C%E4%B8%9A/",
            "url": "http://amentiraz.github.io/2024/05/10/%E5%88%86%E5%B8%83%E5%BC%8FMOM%E4%BD%9C%E4%B8%9A/",
            "title": "分布式MOM作业",
            "date_published": "2024-05-10T09:07:10.000Z",
            "content_html": "<p>分布式作业</p>\n<span id=\"more\"></span>\n<h1 id=\"问题重述\"><a class=\"markdownIt-Anchor\" href=\"#问题重述\">#</a> 问题重述</h1>\n<p><img data-src=\"homework.png\" alt=\"\"></p>\n<h1 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h1>\n<p>这段代码涉及到 Java 消息服务（JMS）和消息代理（Apache ActiveMQ），它们是用于构建分布式、可靠和异步消息传递系统的关键技术。</p>\n<p><strong>JMS</strong> 是 Java 中用于发送和接收消息的 API 规范，它提供了一种标准的方式来创建、发送、接收和管理消息。JMS 有两种消息传递模型：点对点（Point-to-Point）和发布 / 订阅（Publish/Subscribe）。在这个例子中，我们使用的是发布 / 订阅模型。</p>\n<p><strong>消息代理</strong> 是一个中间件系统，负责将消息从发送者传递给接收者。Apache ActiveMQ 是一个流行的开源消息代理，它实现了 JMS 规范，并提供了可靠的消息传递机制。在这个例子中，ActiveMQ 充当了消息代理的角色，负责管理消息的传递和路由。</p>\n<h1 id=\"开发环境\"><a class=\"markdownIt-Anchor\" href=\"#开发环境\">#</a> 开发环境</h1>\n<h2 id=\"软件版本\"><a class=\"markdownIt-Anchor\" href=\"#软件版本\">#</a> 软件版本</h2>\n<p>Windows11<br>\nEclipse IDE for Java Developers - 2022-03<br>\nJava 1.8<br>\nActive MQ 6.1.0<br>\nXchart 3.8.1<br>\nMaven3.6.1</p>\n<p><img data-src=\"evm.png\" alt=\"\"></p>\n<h2 id=\"pom文件配置\"><a class=\"markdownIt-Anchor\" href=\"#pom文件配置\">#</a> pom 文件配置</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;maven.compiler.encoding&gt;UTF-8&lt;/maven.compiler.encoding&gt;</span><br><span class=\"line\">        &lt;java.version&gt;21&lt;/java.version&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.xidian.dc.mq&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mq-topic&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;dependencies&gt;     </span><br><span class=\"line\">        &lt;!-- https://mvnrepository.com/artifact/org.apache.activemq/activemq-all --&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">\t        &lt;groupId&gt;org.knowm.xchart&lt;/groupId&gt;</span><br><span class=\"line\">\t        &lt;artifactId&gt;xchart&lt;/artifactId&gt;</span><br><span class=\"line\">\t        &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.jfree&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;jfreechart&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.5.3&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;jakarta.jms&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;jakarta.jms-api&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;activemq-all&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;6.1.0&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.17.2&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.17.2&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"设计思路\"><a class=\"markdownIt-Anchor\" href=\"#设计思路\">#</a> 设计思路</h1>\n<h2 id=\"构架图\"><a class=\"markdownIt-Anchor\" href=\"#构架图\">#</a> 构架图</h2>\n<p><img data-src=\"stream.jpg\" alt=\"\"></p>\n<h2 id=\"各个代码的用途\"><a class=\"markdownIt-Anchor\" href=\"#各个代码的用途\">#</a> 各个代码的用途</h2>\n<h3 id=\"publisher\"><a class=\"markdownIt-Anchor\" href=\"#publisher\">#</a> Publisher</h3>\n<p>随机信号产生器微服务，生成正太分布的随机数字并发布在 MYTOPIC 服务上<br>\n生成方式’double randomNumner = random.nextGaussian () * stdDev + mean ; ’<br>\n通过传输 main 函数的变量来区分不同的产生器</p>\n<h3 id=\"asyncconsumer\"><a class=\"markdownIt-Anchor\" href=\"#asyncconsumer\">#</a> ASyncConsumer</h3>\n<p>随机信号统计分析微服务，并将处理后的数据发布在 DATA 服务上<br>\n storeMessage: 对传输过来的数据进行处理并存储<br>\n publisher: 对存储的数据进行统计和发布</p>\n<h3 id=\"mylistener\"><a class=\"markdownIt-Anchor\" href=\"#mylistener\">#</a> MyListener</h3>\n<p>实现 MessageListener 接口，并接收存储数据。实现对 ASyncConsumer 的 consumer 的处理</p>\n<h3 id=\"showconsumer\"><a class=\"markdownIt-Anchor\" href=\"#showconsumer\">#</a> ShowConsumer</h3>\n<p>实时数据显示微服务，并调用 RealTimeChart 实现数据的可视化<br>\n paint: 通过调用 RealTimeChart 里面的 plot 来实现实时绘制图像</p>\n<h3 id=\"mylistener1\"><a class=\"markdownIt-Anchor\" href=\"#mylistener1\">#</a> MyListener1</h3>\n<p>实现 MessageListener 接口，并接收存储数据。实现对 ShowConsumer 的 consumer 的处理</p>\n<h3 id=\"realtimechart\"><a class=\"markdownIt-Anchor\" href=\"#realtimechart\">#</a> RealTimeChart</h3>\n<p>实现实时画图</p>\n<h1 id=\"commands\"><a class=\"markdownIt-Anchor\" href=\"#commands\">#</a> Commands</h1>\n<p>mvn clean<br>\nmvn compile</p>\n<p>mvn exec:java -Dexec.mainClass=“ASyncConsumer”</p>\n<p>mvn exec:java -Dexec.mainClass=“ShowConsumer”</p>\n<p>mvn exec:java -Dexec.mainClass=“Publisher” -Dexec.args=“1”<br>\nmvn exec:java -Dexec.mainClass=“Publisher” -Dexec.args=“2”<br>\nmvn exec:java -Dexec.mainClass=“Publisher” -Dexec.args=“3”<br>\nmvn exec:java -Dexec.mainClass=“Publisher” -Dexec.args=“4”</p>\n<h1 id=\"java程序\"><a class=\"markdownIt-Anchor\" href=\"#java程序\">#</a> JAVA 程序</h1>\n<h2 id=\"mylistenerjava\"><a class=\"markdownIt-Anchor\" href=\"#mylistenerjava\">#</a> MyListener.java</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.MessageListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.ObjectMessage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.TextMessage;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MessageListener</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ASyncConsumer consumer ; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">MyListener</span> <span class=\"params\">( ASyncConsumer consumer )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.consumer = consumer ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onMessage</span><span class=\"params\">(Message message)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> ((TextMessage) message).getText() ; </span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;Received a message: &quot;</span>+text);</span><br><span class=\"line\">\t\t\tconsumer.storeMessage(text);</span><br><span class=\"line\">\t\t\tconsumer.publisher(<span class=\"string\">&quot;ACK&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"publisherjava\"><a class=\"markdownIt-Anchor\" href=\"#publisherjava\">#</a> Publisher.java</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random ; </span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.ConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Destination;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.JMSException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.MessageProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.ObjectMessage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Session;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Publisher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">brokerURL</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;tcp://localhost:61616&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ConnectionFactory factory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Connection connection;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Session session;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MessageProducer producer;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Topic topic;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Publisher</span><span class=\"params\">(String topicName)</span> <span class=\"keyword\">throws</span> JMSException &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    \tfactory = <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveMQConnectionFactory</span>(brokerURL);</span><br><span class=\"line\">    \tconnection = factory.createConnection();</span><br><span class=\"line\">        </span><br><span class=\"line\">        session = connection.createSession(<span class=\"literal\">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class=\"line\">\t\ttopic = session.createTopic(topicName);</span><br><span class=\"line\">        producer = session.createProducer(topic);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconnection.start();</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JMSException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> JMSException &#123;</span><br><span class=\"line\">    \t<span class=\"type\">Publisher</span> <span class=\"variable\">publisher</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Publisher</span>(<span class=\"string\">&quot;MYTOPIC&quot;</span>);</span><br><span class=\"line\">    \tSystem.out.println(args[<span class=\"number\">0</span>]) ; </span><br><span class=\"line\">    \t<span class=\"keyword\">while</span> ( <span class=\"literal\">true</span> ) &#123;</span><br><span class=\"line\">    \t\tpublisher.sendMessage(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        \t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\tpublisher.close();</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessage</span><span class=\"params\">(String UID )</span> <span class=\"keyword\">throws</span> JMSException &#123;</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>( ) ;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Integer.parseInt(UID) ;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">mean</span> <span class=\"operator\">=</span> num ; </span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">stdDev</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> ; </span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">randomNumner</span> <span class=\"operator\">=</span> random.nextGaussian() * stdDev + mean ; </span><br><span class=\"line\">        <span class=\"type\">Message</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> session.createTextMessage(UID+<span class=\"string\">&quot;+&quot;</span>+Double.toString(randomNumner));</span><br><span class=\"line\">\t\t<span class=\"comment\">//for(int i=0;i&lt;15;i++)&#123;</span></span><br><span class=\"line\">\t\tproducer.send(message);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Sent a message!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendData</span> <span class=\"params\">( String Data )</span> <span class=\"keyword\">throws</span> JMSException &#123;</span><br><span class=\"line\">    \t<span class=\"type\">Message</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> session.createTextMessage(Data) ; </span><br><span class=\"line\">    \tproducer.send(message);</span><br><span class=\"line\">    \tSystem.out.println (<span class=\"string\">&quot;Sent a Data!&quot;</span>) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"asyncconsumerjava\"><a class=\"markdownIt-Anchor\" href=\"#asyncconsumerjava\">#</a> ASyncConsumer.java</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.ConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Destination;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.JMSException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.MessageConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.MessageProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Session;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.TextMessage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Topic;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList ; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ASyncConsumer</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;String&gt; messages ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Double&gt;[] arrayOfLists = <span class=\"keyword\">new</span> <span class=\"title class_\">List</span>[<span class=\"number\">5</span>] ;  </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">ASyncConsumer</span> <span class=\"params\">( )</span> &#123;</span><br><span class=\"line\">\t\tmessages = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;() ; </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ( <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; i &lt; arrayOfLists.length ; i ++ ) &#123;</span><br><span class=\"line\">\t\t\tarrayOfLists[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;() ; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">storeMessage</span> <span class=\"params\">( String message )</span> &#123; </span><br><span class=\"line\">\t\tmessages.add(message) ; </span><br><span class=\"line\">\t\tString[] parts = message.split(<span class=\"string\">&quot;\\\\+&quot;</span>) ; </span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">intPart</span> <span class=\"operator\">=</span> parts[<span class=\"number\">0</span>] ; </span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">doublePart</span> <span class=\"operator\">=</span> parts[<span class=\"number\">1</span>] ; </span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">uid</span> <span class=\"operator\">=</span> Integer.parseInt(intPart) ; </span><br><span class=\"line\">\t\t<span class=\"type\">double</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> Double.parseDouble(doublePart) ; </span><br><span class=\"line\">\t\tarrayOfLists[uid].add(val) ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">getMessages</span> <span class=\"params\">( )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> messages ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printMessages</span> <span class=\"params\">( )</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Messages:&quot;</span>) ; </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ( String message : messages ) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.print ( <span class=\"string\">&quot;orz&quot;</span> + message ) ; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">calculateMean</span><span class=\"params\">(List&lt;Double&gt; data)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">double</span> value : data) &#123;</span><br><span class=\"line\">            sum += value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( data.size() == <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> <span class=\"number\">0</span> ; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum / data.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">calculateVariance</span><span class=\"params\">(List&lt;Double&gt; data, <span class=\"type\">double</span> mean)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">sumSquaredDiff</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">double</span> value : data) &#123;</span><br><span class=\"line\">            sumSquaredDiff += Math.pow(value - mean, <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( data.size() == <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> <span class=\"number\">0</span> ; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sumSquaredDiff / data.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publisher</span> <span class=\"params\">( String topicname )</span> <span class=\"keyword\">throws</span> JMSException &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Publisher</span> <span class=\"variable\">publisher</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Publisher</span>(<span class=\"string\">&quot;DATA&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">5</span> ; </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ( <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; i ++ ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">double</span> <span class=\"variable\">mean</span> <span class=\"operator\">=</span> calculateMean (arrayOfLists[i].subList(Math.max(arrayOfLists[i].size()-n, <span class=\"number\">0</span>),arrayOfLists[i].size())) ; </span><br><span class=\"line\">\t\t\t<span class=\"type\">double</span> <span class=\"variable\">variance</span> <span class=\"operator\">=</span> calculateVariance (arrayOfLists[i].subList(Math.max(arrayOfLists[i].size()-n, <span class=\"number\">0</span>),arrayOfLists[i].size()),mean) ; </span><br><span class=\"line\">\t\t\t<span class=\"type\">double</span> <span class=\"variable\">Max</span> <span class=\"operator\">=</span> arrayOfLists[i].stream().mapToDouble(Double::doubleValue).max().orElse(<span class=\"number\">0</span>) ; </span><br><span class=\"line\">\t\t\t<span class=\"type\">double</span> <span class=\"variable\">Min</span> <span class=\"operator\">=</span> arrayOfLists[i].stream().mapToDouble(Double::doubleValue).min().orElse(<span class=\"number\">0</span>) ;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//if ( Max == Double.NaN ) Max = 0 ; </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//if ( Min == Double.NaN ) Min = 0 ; </span></span><br><span class=\"line\">\t\t\t<span class=\"type\">double</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( arrayOfLists[i].size() != <span class=\"number\">0</span> )</span><br><span class=\"line\">\t\t\t\tcur = arrayOfLists[i].get(arrayOfLists[i].size()-<span class=\"number\">1</span>) ; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t\tcur = <span class=\"number\">0</span> ; </span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">Data</span> <span class=\"operator\">=</span> Integer.toString(i)+<span class=\"string\">&quot;+&quot;</span>+Double.toString(mean)+<span class=\"string\">&quot;+&quot;</span>+Double.toString(variance)+<span class=\"string\">&quot;+&quot;</span>+Double.toString(Max)+<span class=\"string\">&quot;+&quot;</span>+Double.toString(Min)+<span class=\"string\">&quot;+&quot;</span>+Double.toString(cur); </span><br><span class=\"line\">\t\t\tpublisher.sendData(Data);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> JMSException &#123;</span><br><span class=\"line\">    \t<span class=\"type\">ASyncConsumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ASyncConsumer</span> ( ) ; </span><br><span class=\"line\">    \t</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">brokerURL</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;tcp://localhost:61616&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">Session</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">Topic</span> <span class=\"variable\">topic</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">MessageConsumer</span> <span class=\"variable\">messageConsumer</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">MyListener</span> <span class=\"variable\">listener</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tfactory = <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveMQConnectionFactory</span>(brokerURL);</span><br><span class=\"line\">\t\t\tconnection = factory.createConnection();</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\tsession = connection.createSession(<span class=\"literal\">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class=\"line\">\t\t\ttopic = session.createTopic(<span class=\"string\">&quot;MYTOPIC&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tmessageConsumer = session.createConsumer(topic);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tlistener = <span class=\"keyword\">new</span> <span class=\"title class_\">MyListener</span>(consumer);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tmessageConsumer.setMessageListener(listener);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tconnection.start();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//consumer.printMessages();</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;Press any key to exit.&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.in.read();   <span class=\"comment\">// Pause</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tconnection.close();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"showconsumer-2\"><a class=\"markdownIt-Anchor\" href=\"#showconsumer-2\">#</a> ShowConsumer</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.ConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Destination;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.JMSException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.MessageConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.MessageProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Session;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.TextMessage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Topic;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList ; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShowConsumer</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Double&gt;[][] arrayOfLists = <span class=\"keyword\">new</span> <span class=\"title class_\">List</span>[<span class=\"number\">6</span>][<span class=\"number\">5</span>] ; </span><br><span class=\"line\">\tRealTimeChart[] chart = <span class=\"keyword\">new</span> <span class=\"title class_\">RealTimeChart</span>[<span class=\"number\">6</span>] ; </span><br><span class=\"line\">\t<span class=\"comment\">// 数组1，2，3，4,5分别代表均值，方差，最大值，最小值,目前值</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">ShowConsumer</span> <span class=\"params\">( )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ( <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> ; i &lt; <span class=\"number\">6</span> ; i ++ ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ( <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; j &lt; <span class=\"number\">5</span> ; j ++ ) &#123;</span><br><span class=\"line\">\t\t\t\tarrayOfLists[i][j] = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;() ; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ( <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> ; i &lt; <span class=\"number\">6</span> ; i ++ ) &#123;</span><br><span class=\"line\">\t\t\tchart[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">RealTimeChart</span> ( <span class=\"string\">&quot;History Data&quot;</span> , <span class=\"string\">&quot;UID&quot;</span>+Integer.toString(i) , <span class=\"number\">500</span> ) ; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">paint</span> <span class=\"params\">( )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ( <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> ; i &lt; <span class=\"number\">6</span> ; i ++ ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( arrayOfLists[i][<span class=\"number\">4</span>].size() != <span class=\"number\">0</span> )</span><br><span class=\"line\">\t\t\t\tchart[i].plot(arrayOfLists[i][<span class=\"number\">4</span>].get(arrayOfLists[i][<span class=\"number\">4</span>].size()-<span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">storeMessage</span> <span class=\"params\">( String message )</span> &#123; </span><br><span class=\"line\">\t\tString[] parts = message.split(<span class=\"string\">&quot;\\\\+&quot;</span>) ; </span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">uidPart</span> <span class=\"operator\">=</span> parts[<span class=\"number\">0</span>] ; </span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">meanPart</span> <span class=\"operator\">=</span> parts[<span class=\"number\">1</span>] ; </span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">variancePart</span> <span class=\"operator\">=</span> parts[<span class=\"number\">2</span>] ; </span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">maxPart</span> <span class=\"operator\">=</span> parts[<span class=\"number\">3</span>] ; </span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">minPart</span> <span class=\"operator\">=</span> parts[<span class=\"number\">4</span>] ; </span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">curPart</span> <span class=\"operator\">=</span> parts[<span class=\"number\">5</span>] ; </span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">uid</span> <span class=\"operator\">=</span> Integer.parseInt(uidPart) ; </span><br><span class=\"line\">\t\t<span class=\"type\">double</span> <span class=\"variable\">mean</span> <span class=\"operator\">=</span> Double.parseDouble(meanPart) ; </span><br><span class=\"line\">\t\t<span class=\"type\">double</span> <span class=\"variable\">variance</span> <span class=\"operator\">=</span> Double.parseDouble(variancePart) ;</span><br><span class=\"line\">\t\t<span class=\"type\">double</span> <span class=\"variable\">Max</span> <span class=\"operator\">=</span> Double.parseDouble(maxPart) ; </span><br><span class=\"line\">\t\t<span class=\"type\">double</span> <span class=\"variable\">Min</span> <span class=\"operator\">=</span> Double.parseDouble(minPart) ; </span><br><span class=\"line\">\t\t<span class=\"type\">double</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> Double.parseDouble(curPart) ; </span><br><span class=\"line\">\t\tarrayOfLists[uid][<span class=\"number\">0</span>].add(mean) ; </span><br><span class=\"line\">\t\tarrayOfLists[uid][<span class=\"number\">1</span>].add(variance) ;</span><br><span class=\"line\">\t\tarrayOfLists[uid][<span class=\"number\">2</span>].add(Max) ;</span><br><span class=\"line\">\t\tarrayOfLists[uid][<span class=\"number\">3</span>].add(Min) ;</span><br><span class=\"line\">\t\tarrayOfLists[uid][<span class=\"number\">4</span>].add(cur) ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> JMSException &#123;</span><br><span class=\"line\">    \t<span class=\"type\">ShowConsumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ShowConsumer</span> ( ) ; </span><br><span class=\"line\">    \t</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">brokerURL</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;tcp://localhost:61616&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">Session</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">Topic</span> <span class=\"variable\">topic</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">MessageConsumer</span> <span class=\"variable\">messageConsumer</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">MyListener2</span> <span class=\"variable\">listener</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tfactory = <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveMQConnectionFactory</span>(brokerURL);</span><br><span class=\"line\">\t\t\tconnection = factory.createConnection();</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\tsession = connection.createSession(<span class=\"literal\">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class=\"line\">\t\t\ttopic = session.createTopic(<span class=\"string\">&quot;DATA&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tmessageConsumer = session.createConsumer(topic);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tlistener = <span class=\"keyword\">new</span> <span class=\"title class_\">MyListener2</span>(consumer);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tmessageConsumer.setMessageListener(listener);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tconnection.start();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//consumer.printMessages();</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;Press any key to exit.&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.in.read();   <span class=\"comment\">// Pause</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tconnection.close();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"mylistener2java\"><a class=\"markdownIt-Anchor\" href=\"#mylistener2java\">#</a> MyListener2.java</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.MessageListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.ObjectMessage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.jms.TextMessage;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyListener2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MessageListener</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ShowConsumer consumer ; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">MyListener2</span> <span class=\"params\">( ShowConsumer consumer )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.consumer = consumer ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onMessage</span><span class=\"params\">(Message message)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> ((TextMessage) message).getText() ; </span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;Received a message2: &quot;</span>+text);</span><br><span class=\"line\">\t\t\tconsumer.storeMessage(text);</span><br><span class=\"line\">\t\t\tconsumer.paint ( ) ; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//consumer.publisher(&quot;ACK&quot;);</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"realtimechartjava\"><a class=\"markdownIt-Anchor\" href=\"#realtimechartjava\">#</a> RealTimeChart.java</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.JFrame;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.knowm.xchart.SwingWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.knowm.xchart.XYChart;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.knowm.xchart.XYChartBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.knowm.xchart.style.Styler.ChartTheme;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.knowm.xchart.style.Styler.LegendLayout;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.knowm.xchart.style.Styler.LegendPosition;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RealTimeChart</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> SwingWrapper&lt;XYChart&gt; swingWrapper ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> XYChart chart ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JFrame frame ; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String title ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String seriesName ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Double&gt; seriesData ; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span> ; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getSize</span> <span class=\"params\">( )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getSeriesName</span> <span class=\"params\">( )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> seriesName ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSeeriesName</span> <span class=\"params\">( String seriesName )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.seriesName = seriesName ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getTitle</span> <span class=\"params\">( )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> title ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTitle</span> <span class=\"params\">( String title )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.title = title ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">RealTimeChart</span> <span class=\"params\">( String title , String seriesName )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span> ( ) ; </span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.seriesName = seriesName ; </span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.title = title ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">RealTimeChart</span> <span class=\"params\">( String title , String seriesName , <span class=\"type\">int</span> size )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span> ( ) ; </span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.seriesName = seriesName ; </span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.title = title ;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.size = size ; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">plot</span> <span class=\"params\">( <span class=\"type\">double</span> data )</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( seriesData == <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">\t\t\tseriesData = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;() ; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( seriesData.size( ) == <span class=\"built_in\">this</span>.size ) &#123;</span><br><span class=\"line\">\t\t\tseriesData.clear ( ) ; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tseriesData.add(data) ; </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( swingWrapper == <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">\t\t\tchart = <span class=\"keyword\">new</span> <span class=\"title class_\">XYChartBuilder</span>().width(<span class=\"number\">600</span>).height(<span class=\"number\">450</span>).theme(ChartTheme.Matlab).title(title).build();</span><br><span class=\"line\">\t\t\tchart.addSeries(seriesName, <span class=\"literal\">null</span>, seriesData);</span><br><span class=\"line\">\t\t\tchart.getStyler().setLegendPosition(LegendPosition.OutsideS);<span class=\"comment\">// 设置legend的位置为外底部</span></span><br><span class=\"line\">\t\t\tchart.getStyler().setLegendLayout(LegendLayout.Horizontal);<span class=\"comment\">// 设置legend的排列方式为水平排列</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t\tswingWrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">SwingWrapper</span>&lt;XYChart&gt;(chart);</span><br><span class=\"line\">\t\t\tframe = swingWrapper.displayChart();</span><br><span class=\"line\">\t\t\tframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);<span class=\"comment\">// 防止关闭窗口时退出</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">\t\t\tchart.updateXYSeries ( seriesName , <span class=\"literal\">null</span> , seriesData , <span class=\"literal\">null</span> ) ; </span><br><span class=\"line\">\t\t\tswingWrapper.repaintChart();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"实现效果\"><a class=\"markdownIt-Anchor\" href=\"#实现效果\">#</a> 实现效果</h1>\n<p><img data-src=\"Show1.png\" alt=\"\"><br>\n可以看到不同的产生器的数据分布在不同的值之间，产生器 1 徘徊在 1 之间，产生器 2 徘徊在 2 之间以此类推<br>\n可以看到无论是处理器还是产生器在命令指示符中均正常工作，达到实验预期！<br>\n<img data-src=\"topic.png\" alt=\"\"><br>\n观察 topic 界面，可以看出在正常工作，符合预期！</p>\n",
            "tags": [
                "代码",
                "分布式"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/05/08/%E3%80%8A%E6%83%85%E7%88%B1%E7%8E%B0%E8%B1%A1%E5%AD%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",
            "url": "http://amentiraz.github.io/2024/05/08/%E3%80%8A%E6%83%85%E7%88%B1%E7%8E%B0%E8%B1%A1%E5%AD%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",
            "title": "《情爱现象学》读书笔记",
            "date_published": "2024-05-08T08:57:36.000Z",
            "content_html": "<p>本书从爱出发，将爱与存在的理论相结合，在阅读此书前已对大致内容有所了解，自认为能够解决目前我所遇到的精神危机，特此做笔记摘录并留下自己些许思考。<br>\n笔记的内容分为对文章内容的概括，值得思考的原文，和自己的一些思索。若能对读者你或者今后的我有所帮助就再好不过了！</p>\n<span id=\"more\"></span>\n<h1 id=\"爱的沉默\"><a class=\"markdownIt-Anchor\" href=\"#爱的沉默\">#</a> 爱的沉默</h1>\n<h2 id=\"爱的沉默-2\"><a class=\"markdownIt-Anchor\" href=\"#爱的沉默-2\">#</a> 爱的沉默</h2>\n<h3 id=\"原文摘录\"><a class=\"markdownIt-Anchor\" href=\"#原文摘录\">#</a> 原文摘录</h3>\n<blockquote>\n<p>所有那些去爱却并不完全知道爱意味着什么，也不完全知道爱想要他们做什么，尤其是不完全知道如何将爱延续下去的人 —— 他们首先就是你和我。</p>\n</blockquote>\n<blockquote>\n<p>哲学只在它去爱的范围内理解 —— 我爱理解，因此我去爱以便去理解</p>\n</blockquote>\n<blockquote>\n<p>人们要想达到真理，应该首先去欲求真理，因此去爱真理</p>\n</blockquote>\n<blockquote>\n<p>人并不自发地爱真理，而且只要一谎言向他保证权势，他就经常为这种谎言而牺牲真理。</p>\n</blockquote>\n<blockquote>\n<p>宣称 “我爱你” 在最好的情况下，听起来就如一种猥亵或一种嘲讽，以至于在良好的社会，在受教育者的社会之中，更没有人敢认真地大声说出这样一种无意义 (non-sens)</p>\n</blockquote>\n<blockquote>\n<p>人们一认为有理由区分爱的各种有分歧的、甚至不可调和的词义，就削弱和损害了每一种爱的概念；例如人们一上来就把爱与仁慈对立起来，把假定为占有性的欲望与假定为不求回报的善心对立起来，把合理性的爱与非理性的激情对立起来，就像这是一件无可争议的明显的事情一样。</p>\n</blockquote>\n<blockquote>\n<p>爱只有在一种独一无二的意义中才能自称是单义的。</p>\n</blockquote>\n<blockquote>\n<p>爱从属于爱洛斯的合理性</p>\n</blockquote>\n<blockquote>\n<p>人们在此预设，想要被爱或者使自己被爱，首先必须存在。然而有关爱洛斯现象的最少经验都证实了相反的情况 —— 我完全能够爱并不存在或不再存在的那位，以及我同样能够使自己被不再存在、还没有存在或其存在保持为未定的那位所爱。反之，一位存在者确定地存在并没有使他获得资格以至我爱他或他爱我，同样，他的不确定性再也没有使我在爱洛斯意义上对他无动于衷。<br>\n研究应该在爱洛斯现象特有的域 —— 一种不具存在的爱之域 —— 之中来描述爱洛斯现象</p>\n</blockquote>\n<blockquote>\n<p>为什么人们让爱随风四处散开？… 因为人们把爱定义为一种激情，因此把它定义为 “主体” 的一种派生的、甚至是随意的样式，这一 “主体” 自身被只适用于各种对象和各种存在者的合理性的运用所定义，且通过思源初地存在。<br>\n在思地自我只有与爱洛斯的行动者相反且只有通过压抑这一爱洛斯的行动者，才能自身建立起来。</p>\n</blockquote>\n<blockquote>\n<p>（笛卡尔对自我的定义）通过遗漏导致的是，我既不再被视为去爱者也不再被视为去恨者；更恰当地说：至少在初审中，我是如此存在，以至于我既不需要去爱，也不需要去恨。</p>\n</blockquote>\n<blockquote>\n<p>我们应该通过重新定义自我：把自我重新定义为去爱且尤其去恨的那位，重新定义为由于首先去爱而思的思者，简言之，重新定义为爱洛斯者 (amant)[在爱的自我 (ego amans)]… 通过用原初的爱的自我来代替不去爱的在思的自我… 我们应该用各种爱洛斯沉思代替各种形而上学沉思</p>\n</blockquote>\n<blockquote>\n<p>爱的每一种行为永远地刻在我之中且明确地勾画出我。</p>\n</blockquote>\n<blockquote>\n<p>我既不是通过第三者去爱，也不是通过中间人去爱，而是作为肉 (chair) 去爱</p>\n</blockquote>\n<blockquote>\n<p>我在爱中不愿意与我所爱者相区分，同样，我爱的事实无法与自我相区分。</p>\n</blockquote>\n<blockquote>\n<p>既然在此我为以我的专名来说话而付出代价，那么，你将让我以你的名义来说话。</p>\n</blockquote>\n<h3 id=\"内容概括\"><a class=\"markdownIt-Anchor\" href=\"#内容概括\">#</a> 内容概括</h3>\n<p>本章由哲学对爱保持沉默，而且爱在这种沉默之中变得模糊这种现象开始，论证为什么<strong>哲学</strong>并不喜欢爱，为什么<strong>哲学</strong>在沉默之下跳过爱，接着论证<strong>人们</strong>为什么逃避并抛弃爱。最后说明对爱的诊断要回归哲学并强调定义爱的概念的困难性。</p>\n<p>作者由爱在哲学被否认的之处反过来对爱进行理解，最终认为哲学拒绝了爱的统一性、合理性和至上性。接下来作者详细论述了为什么爱具有统一性、合理性并说明了对爱洛斯现象的研究应该在一种不具存在的爱之域中研究。接着作者由笛卡尔对自我的定义反过来说明了上面论证的合理性，并剖析了为什么笛卡尔对自我的定义是在压抑爱洛斯中建立起来的。并且通过重新定义自我为在爱的自我，进而用爱洛斯沉思代替各种形而上学沉思。</p>\n<p>那么我们该如何完成上述的定义呢，也就是方法论是什么呢：不能依赖传统，通过现象出发构造每一个概念，让爱洛斯现象本身显现出来。然而接下来是作者一大段的 “免责声明”，因为爱总是以第一人称出发，有着大量的主观性，所以作者也认识到可能它写这本书后不过是一种 “自命不凡的表面中立”，但是他也认为自己的经历会在概念的精确性之中消除。最后是致谢。</p>\n<h3 id=\"自己的思考\"><a class=\"markdownIt-Anchor\" href=\"#自己的思考\">#</a> 自己的思考</h3>\n<p>阅读完这一章后对本书想达成什么目的有了较为清晰的认识。在阅读时本来以为自己会有许多思考记录，最不济也会有一些问题。但在阅读时涌出的问题过几天再去思考也发现其内在逻辑的严密。所以这个板块在以后的章节如果没有必要便不再论述了，当然如果有什么难以理解的问题和自己的浅薄想法也会记录。</p>\n<h1 id=\"论一种根本还原\"><a class=\"markdownIt-Anchor\" href=\"#论一种根本还原\">#</a> 论一种根本还原</h1>\n<h2 id=\"怀疑确定性\"><a class=\"markdownIt-Anchor\" href=\"#怀疑确定性\">#</a> 怀疑确定性</h2>\n<h3 id=\"原文摘录-2\"><a class=\"markdownIt-Anchor\" href=\"#原文摘录-2\">#</a> 原文摘录</h3>\n<blockquote>\n<p>我们并不欲求认知，而是欲求享乐我们自身</p>\n</blockquote>\n<blockquote>\n<p>欲望即使在认识中，也只欲求自身享乐</p>\n</blockquote>\n<blockquote>\n<p>认知欲望是朝着已知者或可知者 —— 然而它首先且最终是为了认知者的利益。在认知者之中，包围自身的欲望，即享乐自身的欲望，显得比认知欲望更根本。</p>\n</blockquote>\n<blockquote>\n<p>科学只有区分各种事物中那些能够被还原至永恒的事物和那些不能被还原的事物，才能取得其确定性。</p>\n</blockquote>\n<blockquote>\n<p>谁画出了确定者与可疑者、对象与不可对象化者之间的界限呢？是那个认知者，是自我（ego）—— 是哪个把将成为其对象的东西与将不成为其对象且逃避其的东西区分开来的我（je）。因此确定性表示已知者转到自我之上，以至于在认识对象中，更多地设计对象化对象、构成对象和完全确证对象的那个自我，而非这一对象。<br>\n当然，对象因确定性而闪耀，然而，如果这种确定性不参照自我，它就不会有任何意义，只有自我才发现确定性且尤其创立确定性。<br>\nps：这一段很难懂，我将在后面写入我的理解与思考。</p>\n</blockquote>\n<blockquote>\n<p>即使一种唯一的确定性支配着自我及其对象，如果自我不得不面对与确定性可以消除的怀疑完全不同的另一种怀疑的话，那么自我仍然会逃离确定性。</p>\n</blockquote>\n<blockquote>\n<p>我依据我的<strong>肉</strong>存在… 只是因为它本身显示为可感 - 受的。</p>\n</blockquote>\n<blockquote>\n<p>就在我掌握了各种贫乏现象的确定性的那一时刻，该确定性就不再令我感兴趣了：该确定性只涉及不同于我的现象的另一类现象的使用，但丝毫不涉及我特有的方式，也不涉及我的不可兼得、不可确证的肉的独一无二的自我性。</p>\n</blockquote>\n<blockquote>\n<p>自我要想弄错或被骗，就必须思，因此必须存在。</p>\n</blockquote>\n<blockquote>\n<p>对象可能并不总是呈现于思，而我将总是能够自思，因为思只取决于我。</p>\n</blockquote>\n<blockquote>\n<p>我不是自我，而且，对象 - 自我的确定性并没有触及到我所是的我。</p>\n</blockquote>\n<blockquote>\n<p>一旦我对实存确信无疑，我就能够真正怀疑自我。</p>\n</blockquote>\n<blockquote>\n<p>多次成功之后，我看到了这些成功的无意义，我由此重新回到了我当初的不确定。</p>\n</blockquote>\n<blockquote>\n<p>在此我看到了我的信念之少和我的愚蠢，我没有丝毫的满意，尤其不满意于智慧或毅力方面的长进。</p>\n</blockquote>\n<blockquote>\n<p>即使已知的各种对象对我们来说已是确定的了，即使在我们之中它们的那个自我同样是确定的了，我们仍然可以长久地、根本地进行怀疑。</p>\n</blockquote>\n<blockquote>\n<p>也许怀疑并没有努力地去生产确定性，而是努力去超越确定性。</p>\n</blockquote>\n<blockquote>\n<p>在我的不可还原的自我性之上建立起某种确定性。</p>\n</blockquote>\n<blockquote>\n<p>我们可以合法地指责它们（形而上学），指责它们通过忽视或无视唯一关乎我的确定性即自我的确定性，从来瞄准的只是一种第二性的、派生的、不相干的，而且最终为毫无价值的确定性。</p>\n</blockquote>\n",
            "tags": [
                "读书笔记"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/05/07/FLCL/",
            "url": "http://amentiraz.github.io/2024/05/07/FLCL/",
            "title": "FLCL",
            "date_published": "2024-05-07T09:02:12.000Z",
            "content_html": "<p>FLCL (特别的她），四刷纪念文。</p>\n<span id=\"more\"></span>\n<p>FLCL 是一部于千禧年初放送的一部动画，参与人员眼花缭乱：庵野秀明、鹤卷和哉、今石洋之、吉成曜等等业界扛把子的人物，这部作品也不负众望用最顶级的炫技向我们呈现了制作团队最饱满的热情。对我而言，如果要挑出一部作品代表日本动画，那我认为毫无疑问是这部作品。青春、意识流、天马行空的想象力，这些是日本动画最与众不同的地方。<br>\n对我而言这部作品是我极少在 bangumi 上打 10 分的作品，它是我青春期绕不开的话题，这部作品将我带入了成熟，又让我回归青春热情的本心。</p>\n<hr>\n<p>第一次看 FLCL 是在 2020 年的春天，那时的我心灵无法承受现实的残酷，那是高二的寒假，我正沉浸在高中最大的失利中，思考着要不然就摆烂不学了，因为我再也无法承受努力后带来失败的感觉了。在日复一日的看动漫消极度日中，我意外的看到了这部动画。<br>\n那时的我永远不会想到这部动画带给我的影响之深远，毫不夸张的说如果没有这部动画我可能会就此颓废下去、沉浸在失败中，或许要过好几年才能换过来吧。直到现在，明知日本动画有着诸多不能见人的灰色地带，我仍愿意大大方方的承认自己爱好动漫。并不是我对此了解甚少，也不是我不能明辨是非，而是日本动画总能在荒芜中带给我奇迹。<br>\n回到这部动画，当时的我并没有鉴赏它的能力，我能看到的有什么呢？毫不避讳性暗示和性明示，不明觉厉的分镜演出，无法厘清的剧情展开，以及那股浓厚的积极的意味。现在想来，那股感染我的积极是盲目的，无理由的，但是当我看到男主拿着女主的贝斯站在废墟之上仰望天空时，从床上坐起来的我暗暗想到，要不我还是再试试吧，要是再不行再说。毕竟:“如果不挥棒的话，就什么也不会发生”。<br>\n我开始认真学习高考科目，在一次又一次的考试中不断成长，最终在那一年的期末考试中拔得头筹，然而这个头筹并没有让我一往无前，这就是后话了。但是我在现实中挥出了球棒，短暂的成功让我又活了下去。从那以后，我每年总会抽出一段时间来重温 FLCL。每一年我都不能完全看懂它，但我每年都能从中收获许多。比如那巨大的熨斗其实是在抚平大脑的褶皱，我暗暗想自己不能变得麻木不仁；再比如那句 Never knows best，引起了我诸多共鸣。但是我迟早有一天会看懂它的。</p>\n<hr>\n<p>前几年我一直没有看懂 FLCL，甚至连 FLCL 是什么意思都不甚理解。但是从中获取的积极的意味一直感染着我，如果这部片在我眼里一直是积极的意味，那我也不至于在此写影评了。当然我还是想先谈一谈自己，谈一谈如今自认为成熟了的自己。<br>\n我这几年可以说是对事物的认知水平有了显著的提高，也有了自己独特的世界观价值观。我活出了自己想要的大学生活，但我的生活总是枯燥而乏味的。我去参加比赛并不是我想与他人竞争，而是我对此感兴趣；我不愿天天卷绩点，比起这个还不如多弹一会儿吉他，然而弹吉他每天也是控制在 1 个小时；我没有谈恋爱，但我的生活已经足够丰富了。看着一切都很美好，但我知道，自己的生活缺了很重要的一个东西：激情。<br>\n前几天又面临情感上的困惑，强烈而沉重的情感摧毁了我积极生活的欲望，躺着又有什么不好呢。在看 FLCL 之前其实前面的问题已经解决的差不多了，我仍然缺乏激情，但我已经打算重拾生活了，所以我是把 FLCL 当作生活的启动器的</p>\n",
            "tags": [
                "书评"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/05/07/%E6%80%9D%E6%83%B3%E7%82%B9%E6%BB%B4/",
            "url": "http://amentiraz.github.io/2024/05/07/%E6%80%9D%E6%83%B3%E7%82%B9%E6%BB%B4/",
            "title": "思想点滴",
            "date_published": "2024-05-07T08:33:35.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-NTPOyKfP\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"477215674\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>每一句话都记载了当时自己那看似成熟的思想，里面有暴论，但更多的是真情实感。<br>\n体裁是没有限制的，有诗，有句子。诗由于没有系统学过所以只能算是随口说出的句子，但这样也足够了。</p>\n<span id=\"more\"></span>\n<hr>\n<blockquote>\n<p>责任不过是对爱的一种异化，是对爱的拙劣模仿<br>\n 2024/07/14</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>爱建立在主观唯心之上<br>\n 2024/05/23</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>细雨朦胧的上午<br>\n回寝室的路上<br>\n耳机里传来的是回忆<br>\n是过去的情绪</p>\n<p>不断跳过又不舍删去的歌<br>\n如今也能静静凝听<br>\n这意味着成长<br>\n也意味着失去</p>\n<p>2021/11/20</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>《梦》<br>\n没有任何犹豫<br>\n把朋友抛下<br>\n只因望见她的身影</p>\n<p>“原来你和我在同一座城市”<br>\n 对于她撒谎这件事<br>\n心中委屈却毫无芥蒂</p>\n<p>明知道她在微笑<br>\n可为什么<br>\n我怎么也看不清她的脸</p>\n<p>恍惚中猛一转头<br>\n无论梦里梦外<br>\n人群里早已不见她的身影</p>\n<p>时间不详</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>在我初识算法时<br>\n我一直认为人生不过是动态规划<br>\n走好每一步即可<br>\n可最后我发现<br>\n人生是有后效性的<br>\n它是无法穷尽的搜索<br>\n可能我一直都是鼠目寸光吧<br>\n然而我们永远不会知道我们现在干的事对将来有什么影响<br>\n我们永远也不会重来<br>\n自以为对未来的把握很可笑不是吗<br>\n或许鼠目寸光也不错<br>\n毕竟我们能享受当下</p>\n<p>时间不详</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>强者与斗士的区别类似于智者与伟人<br>\n我更欣赏与羡慕后者<br>\n因为他们有着无可比拟的信念<br>\n信念支撑着他们<br>\n但生活却挫败着他们<br>\n但这并不重要<br>\n或许后来斗士不再善战<br>\n伟人的行为变得愚蠢<br>\n甚至他们自身的信念也被生活磨砺光滑<br>\n但是他们的信念传承了下去<br>\n激励了千千万万的人<br>\n这是前两者所不能比的</p>\n<p>2022/1/8</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>缺少常识是一件很幸福的事</p>\n<p>2024/2/4</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>请原谅我不是为了你而永远怀念你</p>\n<p>2024/2/7</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>《入幻》<br>\n雾林灯火众，体遍斑驳影。<br>\n紫琴抚虚弦，墨云倾远岫。<br>\n来路隐新木，往处浮茫汀。<br>\n何不举灯起，一饮烛流情。</p>\n<p>2023/2/23</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>爱情似乎是谁手的折磨越深谁越有发言权</p>\n<p>2024/3/7</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>任何与你相关的表征都是你灵魂的一部分</p>\n<p>2024/3/24</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>世界是个巨大的扶她</p>\n<p>2024/3/29</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>《祭坛》<br>\n我的生命之中有一座祭坛<br>\n它是由一位可爱的天使带来的<br>\n我总是虔诚的向它献出自己的血肉<br>\n过程虽然痛苦<br>\n一想到那位天使便不算什么了<br>\n祭坛总是公平的，它慷慨的回馈我</p>\n<p>天真换来了沉稳<br>\n幽默换来了聪慧<br>\n随波逐流换来了特立独行</p>\n<p>人们惊叹于我的成长<br>\n我的血肉逐渐与祭坛交融<br>\n我的灵魂逐渐有了神性 ——</p>\n<p>所以我再也受不了了<br>\n我将祭坛砸了个粉碎<br>\n而那位天使<br>\n她必死无疑</p>\n<p>2024/4/3</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>我们过于追求独立与完整<br>\n从而常常忘记了残缺的自己<br>\n所以我们无法拥抱彼此</p>\n<p>2024/4/22</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>看烂片才能凸显你的品味</p>\n<p>2024/4/26</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>我还是喜欢看人在现实中的面具<br>\n起码那蕴含了亲近真实的意愿<br>\n所以我讨厌网络聊天</p>\n<p>2024/4/28</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>把记忆留在梦中</p>\n<p>2024/4/29</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>ghost is a guarantee of love<br>\n// 注：这句话在三天后被自己推翻了改为下句：<br>\nlove is a guarantee of love<br>\n “爱即是同语反复”</p>\n<p>2024/4/29</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>在爱中，你我皆是被害者</p>\n<p>2024/4/29</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>无论我处于哪个阶段，爱总是自私的<br>\n我希望上面这句话能被我亲自推翻</p>\n<p>2024/4/30</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>经过我缜密的分析，爱如果参杂着排他性则毫无价值<br>\n但爱如果没有排他性，则爱对我毫无意义</p>\n<p>2024/5/3</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>你是来自灵魂深处的灼烧</p>\n<p>2024/4/7</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>台前息消雪，轩槛念化冰</p>\n<p>2023/11/20</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>我对自己成为什么样的人不感兴趣<br>\n我对自己没成为什么样的人感到欣喜</p>\n<p>2023/3/4</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>与事物建立联系是痛苦的，但让我们存在<br>\n而与事物脱离联系是快乐的，但让我们轻松却不踏实</p>\n<p>2023/1/2</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>《同理心》<br>\n自由使人存在，生命使人活着<br>\n智慧令人目明，愚蠢令人轻松<br>\n爱总是有趣的，陪伴总是无趣的<br>\n这是因为前者的目的是自己，后者的目的是他人</p>\n<p>在我看来<br>\n自由源于生命最终选择生命<br>\n智慧源于愚蠢最终外显愚蠢<br>\n爱源于陪伴最终圆满于陪伴</p>\n<p>这就是我认为的同理心</p>\n<p>//ps:2023/2/22, 我已经看不懂自己一年前写出来的文字了，hh</p>\n<p>2023/2/22</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>在人生的征途中，我不断的寻找自己的坟墓</p>\n<p>2022/11/29</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>我是神的使徒<br>\n去救助他人是我的职责，我的信仰<br>\n可我无法解决神的问题<br>\n这是理所应当的<br>\n可我无法忍受<br>\n因为这是我第一次想要去帮助别人</p>\n<p>2022/11/27</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>快乐就是打破固有认知</p>\n<p>//ps: 当年的自己是真积极</p>\n<p>2022/10/16</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>十八岁那年我将心中宝箱中的宝物义无反顾送给了别人<br>\n十九岁的我在深不见底的海底重塑了自己的宝物<br>\n它虽然残缺，但对我而言足够了</p>\n<p>//ps：几个月后你就发现这东西没啥用 hh</p>\n<p>2022/9/25</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>愿你在攀爬高峰之后，取得自己想要的果实的那双手，仍如攀登前一样白净。</p>\n<p>2022/9/3</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>自律就像处女膜</p>\n<p>2022/8/31</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>漆黑的夜空<br>\n忽然散发出紫色的光芒<br>\n纯白的老虎忽地出现在笔直的十字路口中央<br>\n红绿灯在无规律的闪烁<br>\n柏油路指向的方向似乎看不到尽头</p>\n<p>白虎的胸腔内燃起了不稳定的火焰<br>\n自身也闪起了微弱的白光<br>\n可在刺眼的路灯下<br>\n它的阴影打向各个方向</p>\n<p>锐利的指爪在坑坑洼洼的沥青中却使不上劲<br>\n它似乎发出了一声叹息<br>\n无力的抬头望向理应属于自己的天空</p>\n<p>不经意间<br>\n微弱的光点闪烁着缓慢划过夜空<br>\n它意识到了些什么</p>\n<p>于是做出决定<br>\n艰难的撑起身子<br>\n在奇幻的夜还未消失殆尽之前<br>\n选择一条与光点方向相近的道路<br>\n消失在了初起的朝阳里</p>\n<p>2022/8/14</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>最简单的活法就是像自己最讨厌的人那样活</p>\n<p>//ps:wwww, 真年轻</p>\n<p>2022/7/20</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>记忆让我们存在，遗忘让我们活着</p>\n<p>2022/2/5</p>\n</blockquote>\n<hr>\n",
            "tags": [
                "诗"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/04/26/%E4%BD%A0%E6%80%BB%E8%83%BD%E6%AF%81%E7%81%AD%E4%B8%80%E5%88%87/",
            "url": "http://amentiraz.github.io/2024/04/26/%E4%BD%A0%E6%80%BB%E8%83%BD%E6%AF%81%E7%81%AD%E4%B8%80%E5%88%87/",
            "title": "你总能毁灭一切",
            "date_published": "2024-04-26T08:32:48.000Z",
            "content_html": "<p>你如同流星坠落，毁灭了一切，但也带来了逢魔之时。</p>\n<span id=\"more\"></span>\n<p>我本不愿再想起你，本打算写完我自己的回忆录便将你永远的尘封在我的记忆之中，可是为什么你还要联系我？<br>\n我想象过没有你的生活：虽然随波逐流，但能融入世俗之中。我会取得各方面的成就，我有这方面的自信。在荣格的理论中，我的心一定会更偏向物质而非自身的心灵。我能肆无忌惮的备战高考，学习专业知识，备战考研，从而把自己物化，最终成为一个与现在相反的自己。<br>\n但由于你的存在我不能这么干了。高考复习时我常想如果以后我们到了一个城市会怎样，学习专业知识时我得保持克制，因为我知道这不过是一个异化自己的过程，因为我对此并没有那么感兴趣。我时常提醒自己让自己融入集体活动 —— 即使我一点也不喜欢，接触丰富多彩的活动，弹吉他，看书，丰富自己的内心世界，这一切的出发点是为了能有朝一日再与你相见时，让自己显得不无趣。但遗憾的是接触了那么多的东西之后我发现我本来就是一个无趣的人，我讨厌社交即使我很擅长，我讨厌与他人建立联系因为维系起来太麻烦了，我狂妄自大却没有相应的能力，我懒惰不愿意去为一个目标奋斗，我认为我配不上你，况且我们不在一个城市。<br>\n上大学后我再也没有联系过你，这并不是因为我不再关注你了。上大学后我喜欢上了散步，在散步时我能创造一个又一个的世界，如果你没有这种经历可以看看《白夜》这本书。我虽没有书中主角这么癫狂，但可以保证的是这一个又一个的世界里面你常常出现。你都是怎样出现的呢？它常常以这样的开头：如果我们再次相见。是啊，如果我们再次相见我们会在什么情况下相见呢？我们会聊什么呢？我会做出怎样的举动呢？在构建世界的过程中时间悄无声息的消逝，我一点也感到可惜，因为这些是支撑我活着的精神源泉。你可能会想一般人可不用臆想才能活下去，但是你知道为什么吗？因为你毁灭了我的愚昧，我的精神世界从此无所遁形。我试过小说、哲学、音乐、与他人格斗甚至麻痹自己，可这些都没有用。但最终我还是拯救了自己。大二上时我曾写下过这样的句子：你偷走了我的宝物，但这已经不重要了，因为我创造了我的宝物。这虽然和 “你” 无关，但 “你” 让我学会了爱上我自己。遗憾的是这并没有用。<br>\n爱上自己以此让自己内心充裕是虚无的，它是如此脆弱，很快我便又一次陷入苦痛。更绝望的是与此同时我发现了一件事：在我创造的这么多世界里，从来没有相遇以后的事。原来在潜意识当中我并没有奢望过我们能够在一起啊，进一步的说：原来我并没有奢望过别人爱我。在这个过程中我险些没有挺过来，因为我意识到我早已同时失去了你和我所创造的世界。<br>\n现在想来我没有想过相遇之后很大程度上也是因为你。我是一个保守的人，我能够接受各种观点但大多时候我只能在理性上认可。所以当你在朋友圈里发女权、lgbt 还有纹身的照片时，你知道有多冲击我的理智吗，我感觉自己很愚蠢，为什么要对一个自己三观不合的人这么上心，但又会想愚蠢就愚蠢吧。你知道吗只有面对你我是割裂的。所以我把你的备注改成了一个大众的名字，又屏蔽了你的朋友圈，以此避免自己因为你而分心。可我还是常常专门点入你的朋友圈看看你的近况。<br>\n最终我还是活过来了，我在一项含金量还行的比赛中拿了国际特等奖。当我得知此事时，我内心没有什么波动，言语附和了几句前来恭喜的人便该干啥干啥去了。我的队友拿着这个奖想象着自己保研后的生活，然而那段时间我常常在不经意间思考我是否能以此有勇气向你搭话。结论是可以，结果是不行，因为我认为我们早已没有交际，如同两根相交的直线，只在 2018 年的暑假有过交点便从此各奔东西，况且，我没有勇气面对你的回话。<br>\n但这个奖项为我带来了其它的东西，我开始与他人交际，主动接触他人。原来与他人接触也没有那么令人厌烦。我也在大学交上了可以讨论政治，讨论爱情，讨论音乐的朋友。现实生活变得满意，我渐渐不再那么思念你。于是在大二下的五月十七日晚上八时许，我决定忘记你。<br>\n我开始有意识的把你排除在记忆中，也能感觉到那些对我而言珍贵的回忆正在淡出我的生活。毫不意外的是，我再一次陷入了空虚之中，像是心中缺了一个洞一般，再继续下去的话一定会很不妙吧。于是持续了不到十天的行动就此失败。结果是我接受了自己去怀念一个幻影，我对此也很无奈，算了，怀念就怀念吧。<br>\n反而在这样的心态中，我各方面开始变得顺利，无论是学习，生活还是原本只能算闹着玩的音乐，我都有了进展而且我自身也变得自信。在五月至七月的过程中，我觉得我无所不能，我觉得我过上了我想要的生活。<br>\n7 月 1 日，你发了一则朋友圈：想要成为绿毛水怪。我看过王小波很多书，但这一本我只是单单知道名字。大二的暑假我非常忙，我要复习九月的国赛，八月下我计划去日本旅游，但我还是抽时间去新华书店购买了这本书并在当天看完了。这本书写的是多么真挚啊，我看完立马就知道你在说我了（当然也没有那么确定），我又一次开始想象自己能否再与你相见，你又一次给予我希冀，但你很快便毁灭了它。<br>\nSGYT 同学，你总能毁灭一切。因为我既无法承受你与我仍有关这个事实，也无法承受你与我无关的这个事实。在七月底吧，你晒出了自己与另一个人的合影，内容是什么我忘记了，但记得似乎是暗示你们已是情侣？而且与你合影的这位似乎是女生。结合以往你那毫无顾虑的 LGBT 人士发言，再结合你高三时用的《莉兹与青鸟》的头像 —— 好吧，这些并不重要，重要的是我终于找到一个借口永远的远离你。但这个时间点太坏了，这个很忙的暑假过后的比赛我也无心去争取了。人是多么脆弱啊，无论再坚硬的心理防线也能轻易摧毁。你顺带的摧毁了我整个大三上，也多亏你，在这段混沌的时光中，我想清楚了什么是爱，也些许看透了自己的本质。<br>\nSGYT 同学，你总能毁灭一切，但这并不怪你，因为我是一个脆弱胆小的妄想症患者。还记得你在高三的寒假对我说过：“我总怀疑你是否存在”。对呀，自从 2018 年的暑假我们便再未相见，你能产生这样的想法再正常不过了。但你知道吗，你是否存在似乎对我而言并不重要。网上的一句话对我概况的很好：只能爱抽象的人，不能爱具体的人。大三上的我清晰的认识到一件事，那便是我爱 “你”，但 “你” 不一定是个具体的人，“你” 只不过是我虚构出来的一个幻影，而这个幻影恰巧以你为原型罢了。当然也有可能我是爱你的，这点先按下不表。<br>\n时间总能抚慰一切，现实中仍有许多待我处理的事情。大三下的我开始准备考研了，我全身心的投入此事中，为了避免你无时不刻的干扰我的生活，我每天会留出一点时间开始写你我之间的回忆录，名为开头提到的《朝花夕拾》。我只会在特定的时间思念你，其余的时间我保持着很高的效率学习，我又过上了自己理想的生活，每天都很充实。接下来你也知道了，你毫不意外的又摧毁了我的生活，有时候我真会想你怕不是我生命中的一个劫难，但现在想来你可能是那枚禁果吧，偷吃了禁果的代价便是毒蛇缠绕上心头。<br>\n那天的月亮是弯的，房屋和树木恰巧没有挡住月色。在收到你的消息的时候我比想象中的镇定。我看到你的消息的时候已经过了约莫 5 分钟，寝室还有半小时就熄灯了，我对我的舍友是这样说的：如果我没按时回来，那我一定是死在外面了。说完便拿着手机去了阳台。晚风吹拂着我的内心，过道的人熙熙攘攘。我蹲坐着盯着手机屏幕期待着你的回话，这段时间并不难等，因为我知道你一定会回复我。与你的聊天总是快乐的，从高中时我便知道。<br>\n我很想保持着一副成熟的面孔与你交流。而当我看到你所发的 7498 这串密码时你要知道，屏幕那头短暂的沉默并不是在思考数字的含义，而是在思考是否应当表露出自己那早被舍弃的思念。最终我还是没能克制住，以一种委婉的措辞表示自己早已知晓。然而你再次的试探还是令我措手不及，SGYT 同学，我从不会骗你，所以我坦诚的说明的自己的密码，这是否会令你失望呢？我那拙劣的补救是否起作用了呢？<br>\n你可能会说，我就是个骗子，但我想告诉你的是，我对待你永远是真诚的。但真诚的语句不代表它永远正确，我只能确保当下，如果有我承诺却没有做到的事情，那一定是因为我那时已经没有办法做到，唯有这点请你相信我。<br>\n我们约定了明年线下见上一面，太相似了，高三的我们也是这样说的不是吗。但此刻的我已经拥有了与你见面的勇气，即使当我写下这段文字时还在残忍的四月，我相信我能够做到的，我相信你也是。但在约定之日到达之前请谅解我仍然不主动联系你，因为你我都要准备考研，我不愿你因为我这么微不足道的人而在人生的关键节点落入遗憾。还有就是我自认为洞察人心，但我仍无法确定或者是承认你对我是如何看待的，所以我不敢主动联系你。如果这对你带来困扰，我只能深深的对此感到抱歉。<br>\n之后，我又一次无法专心学习了，那本回忆录也不再写了，你再一次毁灭了我的生活。我开始想当我们重逢我应当做些什么。不注重外表的我应当怎样改变自己的形象，我该以怎样的态度面对你，还有最重要的：在那之后我该怎么办。<br>\n当你看到这封信时应当一切已经结束了，无论是好是坏，我也算是为青春画下了句号。我思考了一个可能性最大的结局，如果真是我想象中的那样我希望你不会因为我做出的决定而感到困惑，所以便提前写在这里了：<br>\n当天，我与你一同吃饭，一同讨论生活和人生，你会欣赏到我这二十余载最精彩的与人交往的实例。那天的我会幽默风趣，谦卑而充满理性，不会受到以往经历的束缚，能自然的聊起你我以前的事。如果你对我的经历感兴趣，我会详细的讲述我的故事，以便让你理解我是怎样的一个人。如果顺利的话，我甚至有可能对你表白，但我不会让你接受，或者让你思考几天之后再回答。不出意外的话，最后在感动的告别之后，我会彻底的删去你所有的联系方式，也拒绝你再次与我联系。如果是这个结局，那这天将成为我人生的最高杰作，也是我人生中最令人作呕的一天。<br>\n你一定会疑惑这是为什么，是你干错了什么吗？不，是我刻薄又自私，对人要求太高。但我还是想说，SGYT 同学，即使你读过那么多书，有着那么多新颖而深刻的观点，但可能你还是不够沉稳，而证据便是你没能看出我是怎样的一个人，我为什么要再次与你相见。<br>\n先说自己为什么要与你再次相见吧。这个其实很简单，我对我以往对你刻意的无视感到抱歉。我希望我能表现出我的歉意，并为此做出一定的弥补。最重要的是，我要确定一件事，那便是网上流行的一句话：“没有人能比过当年的你，现在的你也不行” 是否正确。我希望它是错误的。<br>\n我是一个怎样的人呢？我讨厌与人过分生疏又害怕与人过于熟悉；我能接受各种各样的观点并能用理性加以消化但我本质十分保守；我能理解大多数人的情感但不能共情，或者说我能共情但情绪永远不会大幅波动；我擅长社交，能够很好的揣摩他人的心理但我实际更喜欢独处；我向往崇高的爱情，但如果得不到我宁愿孤独终老。SGYT 同学，你很少见过我真实的一面，我也不追求自己真实的一面能被人接受。所以在不确定的未来，如果当天你并未让我感受到一个确定性的答复，我应该是没有勇气再坚持下去了。我可能无法包容你开放的思想，因为我认为爱是排他而专一的；我可能无法接受异地恋，即使爱的表现是跨过时间与距离；我可能无法再接受自己的生活再大起大落了，即使我从中获得了成长。我不想成为崇高，所以很抱歉我其实是个庸俗的人。<br>\n原本这篇文章打算以残忍的方式结尾的，可惜我还是做不到。说实话，上面几段文字越写越心虚，我果然还是期待着你能拯救我冥顽不化的灵魂，或者说我也期待着自我救赎吧。所以即使这个结局多么合理，即使我当天真的这么做了，未来一定会改变的，我相信这一点。最后，无论我们最终关系走向如何，我希望我们所重逢的那一天能够令你满意。<br>\nViole<br>\n2024-04-27</p>\n",
            "tags": [
                "生活"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/04/07/%E4%BD%A0%E6%83%B3%E6%B4%BB%E5%87%BA%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BA%BA%E7%94%9F/",
            "url": "http://amentiraz.github.io/2024/04/07/%E4%BD%A0%E6%83%B3%E6%B4%BB%E5%87%BA%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BA%BA%E7%94%9F/",
            "title": "你想活出怎样的人生",
            "date_published": "2024-04-07T08:03:17.000Z",
            "content_html": "<p>大概率是宫崎骏的最后一部作品了，看完感触良多，特此记录。</p>\n<span id=\"more\"></span>\n<p>宫崎骏一直是我喜欢不来的动画监督。上大学以前，我只看过他的《幽灵公主》，上大学后先后看了《天空之城》，《红猪》，《千与千寻》，《龙猫》，但是其中除了红猪我还算喜欢，剩下几部实在令我无感。我能很好的欣赏他那天马行空的作画，那种平淡之中若隐若现的思想，那种适合儿童的天真的气氛，但每次点开他的作品都有一种不会失望，但不会期待的情绪。让我来概况他的作品，那就是不计成本的作画，和局部极佳的演出表现，可作为电影，他的叙事情节过于平淡简单，不能很好的激起我个人的共鸣，在《天空之城》他那回归田园的观点更是让我敬而远之。<br>\n想到《你想活出怎样的人生》（以下简称《人生》）大概率是他最后一部作品我还是决定去看了。中国上映较晚，于是能在观影前看到很多风声：难以理解，意识流，甚至还有认为这部作品思想是反战败。我很喜欢意识主义动画，在动画领域，我认为意识主义动画才是日本最绚丽的瑰宝。意识主义动画往往以一种含蓄的方式去表达自己的观点，方式就是跳脱常规的剧情讲述，不明所以但似乎蕴含思想的作画，以极大的信息量冲击观众的感官，不追求你能看懂，只是导演团队的自嗨罢了。所以在面对这种动画时，我采用的态度往往是感受这个气氛，顺着导演的情绪去走，若是能窥见他思想的一角那更是极好，但如果在观影中自己获得了某种情绪，那便是更加。例如《EVA》中看完后对于故事为什么这样发展是模糊的，但我能感受到真嗣的在爱中寻找存在的冲动，再例如《FLCL》中，在富有激情的作画中感受到男主的青春与成长（这部片也是在我人生低谷中激励我的一部），《和平保卫战》中看到最后都不明白剧情的发展，但城市上空充满威胁的飞艇所渲染的绝望低气压的气息令人深思。<br>\n受到商业化的冲击，如今已经很少看到这种动画了，上一部还不错的意识流动画我印象里还是 21 年的《漂流少年》。这并不奇怪，商业化意味着降低作者本人的情感表达，更倾向于迎合市场，扁平的剧情更适合现代人快节奏的情感摄取需求。我很喜欢《人生》的一点便在于它无所谓观众的想法，不计成本的作画存粹的输出宫崎骏自己的人生体会，这只有宫崎骏能做得到。</p>\n<hr>\n<p>《人生》注定是一部叫好不叫座的作品，它的观影门槛过高，这部电影浓缩了宫崎骏以往的经历和 13 部电影后更是如此。但遗憾的是中国夸张的宣传让主流人群对这部电影施加了太多不该有的抨击，让我感到非常可惜。甚至在我的影院有人穿着花哨的 cos 来观影，可以料到评论区是什么情况了。当然你要说我装婆罗门我也没办法，每个人的观念不同罢了。<br>\n回到这部电影，在观影途中意外的是时间过的很快，我并没有感到枯燥乏味，同行的不看动画的同学看完也认为虽然看不懂，但不无聊。可以看出它的演出手法是多么高明了。动画主线剧情其实很好理解，男主人公丧母后父亲与母亲的妹妹再婚，在开始与社会的疏离之中，中间穿越进入一个奇幻的世界经历一系列事后重新拥抱世界。主线与《千与千寻》非常像，很符合我对宫崎骏故事编排的理解（笑），但我认为这部片子真正出彩的地方恰恰在此。<br>\n我说过，我不喜欢宫崎骏那简单的故事，但很喜欢他在细节的处理，在《人生》中他是怎么 “扬长避短” 呢，那就是用大量单独的故事去拼接。这些故事的拼接很有说法，因为宫崎骏想把自己人生的关键节点和拍摄的电影融入进去，而这必定会牺牲故事情节的合理性，那怎么减弱这一点呢？那当然是创造一个虚幻的不合理的世界：后妈为什么会去这个世界，那当然是那块神奇的石头诱使的；为什么有墓地，奇幻世界出现什么都不奇怪；什么是第七号羽毛，那便是任君想象了。有人说这样是不是太取巧糊弄观众了，确实，但这些不重要，因为这些细节并不影响整体的表达，还有这部电影并不照顾观众。<br>\n我并不是什么宫崎骏迷，所以关于对以往作品和人生的致敬我不甚了解，那些意象的暗示更是无从下手，但我认为 nbht 的那期视频说的很好，从电影从业者的角度对这部电影进行了剖析，可以看看。</p>\n<hr>\n<p>在电影的最开始，能感受到的是男主对世界的疏离感。后妈强抓着他的手抚摸未出生的婴儿，把他拉下车强迫他向战争归来的士兵鞠躬，被霸凌后为了扩大事情的严重性，和隐式的报复他人抓起石头砸向自己的头，这些充满细节的情感流露正是宫崎骏擅长的，在《千与千寻》中也能看到这一点。但是与《千》不同的是他们所改变的方式。千寻通过长期的劳动，不断在妖怪的社会中谋生最终获得了成长，那么本片的男主呢？我认为是阅读了他母亲留下的那本《你想活出怎样的人生》的小说。我也写日记，在我想描述自己通过读了某本书突然醒悟过来改变自己对人生的态度时我发现难以下笔。因为你无法让读者也跟着读一遍你读过的书，重复书中的思想也显得累赘。那么宫崎骏怎么处理的 —— 他不处理，因为你爱看不看。以至于后来男主突然去救后妈，喊后妈 “母亲” 等等情节让人感到割裂。所以在我看来，中间的情节并不涉及男主的成长，反倒是一种书中理论的实践，当然也可以理解为在经历了宫崎骏人生中的种种事后最终选择拥抱世界，我认为也解释的通。<br>\n故事情节本身是简单的，我一直认为宫崎骏的作品情节总是单调，不能算作跌宕起伏。我看到很多网友也是这样的观点，包括押井守也对宫崎骏的剧情结构持批判的态度。所以当我每次抱着审视的态度去看宫崎骏的作品时总是折戟而归 —— 也可以说转变自己的态度，像小孩一样放空自己去欣赏，这样我认为才是观看宫崎骏作品的态度。相比之下，比如押井守的作品，我得高度集中注意力，还得拖拽进度条反复评鉴才能说自己看懂了，虽然这样有点破坏观影体验，我更喜欢后者的严谨。所以如果这个故事单单如此我也不会写这么多了。更令我惊讶的是我能看到宫崎骏思想的变化。<br>\n前面说过，我对于天空之城那种回归田园的思想敬而远之，作为左翼的宫崎骏这样想再正常不过了，如果《人生》延续《天空之城》的思想会是怎样呢？恐怕在最后，男主会拿着纯白的积木就开始重塑世界了吧。回归现实没有解决方法，战争无法解决。日本从黄金时代之后一直笼罩在美国的威胁之下，（顺带一提，为什么日本总是在战争类作品中渲染自己的不幸，因为对于泡沫崩溃的一代人来说，他们不仅没有享受到战争的红利，反而面临高压的社会），直到现在日本首相在美国的演讲极力的渲染中国的威胁，想以此获取某些权利。特别是现在中日右翼盛行，似乎回归现实便只有战争，在《进击的巨人》中谏山创认为这是没有办法的，战争会不断的蔓延，非常消极，所以我不喜欢进击的巨人的结局。那么《人生》就解决这个问题了吗？它也没有，它也不能有。一旦它试图解决这个问题，那么就会演变为上世纪前辈的说教，这也是为什么象征宫崎骏的真人拒绝重塑世界。那么它是怎么说的呢，首先象征军国主义和幻想的塔倒了，那些穷凶极恶的鹈鹕重新变得憨态可掬，这也印证了毛的一句话：“中国人民与日本人民是一致的，只有一个敌人，就是日本帝国主义与中国民族败类”。其次，积极的面对现实：真人的母亲回到了自己的时代，即使这样自己会死亡；真人回到了自己的时代，背负着战争的记忆勇敢面对生活。孕育下一代的后妈也回到了自己的时代，不再躲在安全的塔中。当然《人生》没有解决现实中的任何问题，但是它给予观众了一种精神。</p>\n<hr>\n<p>这种精神像《EVA》，像《sonny boy》，像《FLCL》：我们毁灭了一切，而这一切已成飘渺。我们很难说我们从中得到了什么，相比得到，我们失去的更多。我们一跃活出了自己想要的人生吗？现实恰恰相反。那么我们该怎么办？像这些不讲人话的意识流作品一样，我们拒绝沉浮，拒绝逃避，在搅成一团的思绪中，在与他人疏远但坚持己见的个性中，活出自己想要的人生，活出这个世界想要的答案。这也是为什么我如此喜欢意识主义动画，如此喜欢这部作品。</p>\n",
            "tags": [
                "书评",
                "生活"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2024/02/19/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE/",
            "url": "http://amentiraz.github.io/2024/02/19/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE/",
            "title": "朝花夕拾",
            "date_published": "2024-02-19T13:40:13.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-wPKJDxFS\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"528284\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<span id=\"more\"></span>\n",
            "tags": [
                "生活"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2023/11/14/%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87/",
            "url": "http://amentiraz.github.io/2023/11/14/%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87/",
            "title": "博客使用的图片",
            "date_published": "2023-11-14T01:58:38.000Z",
            "content_html": "<p>这里把所有我在博客中使用的图片和相应的地址给放出来，以便后面写文章使用</p>\n<span id=\"more\"></span>\n<p>生活类<br>\n<img data-src=\"https://i.postimg.cc/zfxwqzC7/wallhaven-pkw6y3.jpg\" alt=\"\"><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLnBvc3RpbWcuY2MvemZ4d3F6Qzcvd2FsbGhhdmVuLXBrdzZ5My5qcGc=\"> https://i.postimg.cc/zfxwqzC7/wallhaven-pkw6y3.jpg</span><br>\n 学习笔记类<br>\n<img data-src=\"https://i.postimg.cc/XvqGcw5K/wallhaven-e7pwdw.jpg\" alt=\"\"><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLnBvc3RpbWcuY2MvWHZxR2N3NUsvd2FsbGhhdmVuLWU3cHdkdy5qcGc=\"> https://i.postimg.cc/XvqGcw5K/wallhaven-e7pwdw.jpg</span><br>\n 数学建模类<br>\n<img data-src=\"https://i.postimg.cc/CKR5fwym/wallhaven-r2g7rm.jpg\" alt=\"\"><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLnBvc3RpbWcuY2MvQ0tSNWZ3eW0vd2FsbGhhdmVuLXIyZzdybS5qcGc=\"> https://i.postimg.cc/CKR5fwym/wallhaven-r2g7rm.jpg</span><br>\n 算法类<br>\n<img data-src=\"https://i.postimg.cc/Dy5wjSnx/46985381-p0-master1200.jpg\" alt=\"\"><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLnBvc3RpbWcuY2MvRHk1d2pTbngvNDY5ODUzODEtcDAtbWFzdGVyMTIwMC5qcGc=\"> https://i.postimg.cc/Dy5wjSnx/46985381-p0-master1200.jpg</span></p>\n",
            "tags": [
                "杂"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2022/01/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/",
            "url": "http://amentiraz.github.io/2022/01/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/",
            "title": "python学习笔记1",
            "date_published": "2022-01-12T11:55:31.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-FVVRxfLT\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1458550\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>除开函数外的 python 基础知识总汇，用于复习及查看，写的会很简略</p>\n<span id=\"more\"></span>\n<h3 id=\"基础知识\"><a class=\"markdownIt-Anchor\" href=\"#基础知识\">#</a> 基础知识</h3>\n<p>普通的除法：1/2  0.5<br>\n 整除: 1//2 0<br>\n 取模：%<br>\n 乘方：2<strong>3 (-3</strong>2 等同于 -(3**2))</p>\n<p>十六进制：0xAF<br>\n 八进制：010</p>\n<p>变量无需声明即可使用</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">3</span> </span><br><span class=\"line\">x * <span class=\"number\">2</span> </span><br><span class=\"line\">output : <span class=\"number\">6</span> </span><br></pre></td></tr></table></figure>\n<p>变量名命名同 C 语言</p>\n<p>print 在 python2 是语句，在 python3 中是函数，所以应当加上（）</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">input</span> ( <span class=\"string\">&quot;The meaning of life: &quot;</span> )</span><br><span class=\"line\">The meaning of life <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"built_in\">input</span> ( <span class=\"string\">&quot;x: &quot;</span> ) </span><br><span class=\"line\">x: <span class=\"number\">34</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = <span class=\"built_in\">input</span> ( <span class=\"string\">&quot;y: &quot;</span> ) </span><br><span class=\"line\">y : <span class=\"number\">42</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span> ( x * y ) </span><br><span class=\"line\"><span class=\"number\">1428</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">pow</span> ( <span class=\"number\">2</span> , <span class=\"number\">3</span> ) </span><br><span class=\"line\"><span class=\"number\">8</span> </span><br></pre></td></tr></table></figure>\n<p>round 函数会把浮点数四舍五入为最接近的整数值 （ py2 与 py3 对于 0.5 的取值有所不同）<br>\nabs 绝对值函数</p>\n<p>可以用变量来引用函数</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math </span><br><span class=\"line\">math.floor( <span class=\"number\">32.9</span> ) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> floor</span><br><span class=\"line\">floor</span><br><span class=\"line\"></span><br><span class=\"line\">foo = math.sqrt </span><br><span class=\"line\">foo ( <span class=\"number\">4</span> ) </span><br></pre></td></tr></table></figure>\n<p>math 中的 sqrt 不支持复数运算而 cmath 中支持</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> cmath</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cmath.sqrt ( -<span class=\"number\">1</span> ) </span><br><span class=\"line\"><span class=\"number\">1j</span></span><br><span class=\"line\"><span class=\"comment\"># 没有使用from 。。。import 。。。是因为一旦使用了这个语句那么就无法使用普通的sqrt了</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">1</span>+<span class=\"number\">3j</span>) * (<span class=\"number\">9</span>+<span class=\"number\">4j</span>) </span><br><span class=\"line\">(-<span class=\"number\">3</span>+<span class=\"number\">31j</span>) </span><br></pre></td></tr></table></figure>\n<p>字符串是值，就像数字一样，单引号和双引号没有本质区别<br>\n \\ 与 C 语言中一样使用<br>\n字符串之间可以拼接</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello,&quot;</span> + <span class=\"string\">&quot;world&quot;</span></span><br></pre></td></tr></table></figure>\n<p>转换成字符串有两种方式<br>\n str 将对象转换成用户看的，repr 转换成 python 表达式</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> ( <span class=\"built_in\">repr</span> ( <span class=\"string\">&quot;hello world&quot;</span> ) )</span><br><span class=\"line\"><span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> ( <span class=\"built_in\">str</span> ( <span class=\"string\">&quot;hello world &quot;</span> ) )</span><br><span class=\"line\">hello world </span><br></pre></td></tr></table></figure>\n<p>长字符串：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> ( <span class=\"string\">&quot;&quot;&quot; This is a very long string</span></span><br><span class=\"line\"><span class=\"string\">It continues here </span></span><br><span class=\"line\"><span class=\"string\">And it&#x27;s not over yet</span></span><br><span class=\"line\"><span class=\"string\">Still here &quot;&quot;&quot;</span> )</span><br><span class=\"line\"><span class=\"comment\"># 换行符可以被转义</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> ( <span class=\"string\">&quot;&quot;&quot; hello \\ </span></span><br><span class=\"line\"><span class=\"string\">world &quot;&quot;&quot;</span> ) </span><br></pre></td></tr></table></figure>\n<p>原始字符串</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path = <span class=\"string\">&#x27;c:\\\\program\\\\fnord&#x27;</span></span><br><span class=\"line\">path = <span class=\"string\">r&#x27;c:\\ll&quot;</span></span><br><span class=\"line\"><span class=\"string\"># r紧贴&#x27;</span>且字符串末尾不是\\</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列\"><a class=\"markdownIt-Anchor\" href=\"#序列\">#</a> 序列</h3>\n<p>列表和元组的区别在于列表可以修改而元组不可以</p>\n<p>通用的序列操作：索引，分片，加，乘<br>\n索引同数组，数组最后一个元素的位置标号为 - 1 如：greeting [-1]<br>\n print 的返回值是一个序列，所以我们可以如此调用</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fourth = <span class=\"built_in\">input</span> ( <span class=\"string\">&quot;Year: &quot;</span> )[<span class=\"number\">3</span>] </span><br></pre></td></tr></table></figure>\n<p>列表可以相加与相乘，例如</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">endings = [<span class=\"string\">&#x27;st&#x27;</span>,<span class=\"string\">&#x27;nd&#x27;</span>,<span class=\"string\">&#x27;rd&#x27;</span>]+<span class=\"number\">17</span> * [<span class=\"string\">&#x27;th&#x27;</span>,] \\ </span><br><span class=\"line\">+    [<span class=\"string\">&#x27;st&#x27;</span>,<span class=\"string\">&#x27;nd&#x27;</span>,<span class=\"string\">&#x27;rd&#x27;</span>]+ <span class=\"number\">7</span> * [<span class=\"string\">&#x27;th&#x27;</span>,]  \\</span><br><span class=\"line\">+ [<span class=\"string\">&#x27;st]</span></span><br><span class=\"line\"><span class=\"string\">[1,2,3] + [4,5,6]</span></span><br><span class=\"line\"><span class=\"string\">= [1,2,3,4,5,6]</span></span><br><span class=\"line\"><span class=\"string\"># 初始化一个长度为10 的列表</span></span><br><span class=\"line\"><span class=\"string\">sequence = [None] * 10 </span></span><br></pre></td></tr></table></figure>\n<p>分片<br>\n numbers [-3:-1]<br>\nnumbers[-3:]<br>\nnumbers[0::2]<br>\nnumbers[-1:0:-2]</p>\n<p>成员资格：in 函数</p>\n<p>长度：len<br>\n 最大值：max<br>\n 最小值：min</p>\n<h4 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h4>\n<p>list 函数 对立： ‘’.join (somelist)<br>\n 删除元素 del names [2]<br>\n 分片赋值：可以使用与原序列不等长的序列将分片替换（可以用来删除某一段）</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers[<span class=\"number\">1</span>:<span class=\"number\">1</span>] = [<span class=\"number\">2</span>, <span class=\"number\">3</span> ,<span class=\"number\">4</span> ]</span><br><span class=\"line\">numbers[<span class=\"number\">1</span>:<span class=\"number\">5</span>] = [] </span><br></pre></td></tr></table></figure>\n<p>.append( )<br>\n.count ( )<br>\n.extend ( ) 追加一个序列<br>\n.index ( ) 找出第一个匹配项索引位置<br>\n.insert (i , value) 插入<br>\n.pop ( ) 移除最后一个值并返回值<br>\n.remove ( ) 移除第一个匹配项<br>\n.reserve ( ) 反向存放<br>\n.sort ( ) 会该表原来的列表修改，也就是说修改副本不会影响原本，反之不然<br>\n<strong> sort 里面可以有参数如 cmp，key=len，reserve=True</strong><br>\nsorted ( ) 返回已排序的列表副本</p>\n<h4 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h4>\n<p>如果你用逗号分隔了一些值，那么你就自动创建了元组<br>\n tuple ( ) 类比于 list</p>\n<h3 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h3>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">format</span> = <span class=\"string\">&quot;hello , %s , %s enough for ya!&quot;</span> </span><br><span class=\"line\">values = ( <span class=\"string\">&#x27;world&#x27;</span> , <span class=\"string\">&#x27;Hot&#x27;</span> ) </span><br><span class=\"line\"><span class=\"built_in\">print</span> ( <span class=\"built_in\">format</span> % values ) </span><br></pre></td></tr></table></figure>\n<p>模板字符串：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> Template</span><br><span class=\"line\">s = Template ( <span class=\"string\">&#x27;$x , glorious $x &#x27;</span> ) </span><br><span class=\"line\">s.substitute ( x = <span class=\"string\">&#x27;slum&#x27;</span> ) </span><br><span class=\"line\"></span><br><span class=\"line\">s = Template ( <span class=\"string\">&quot;It&#x27;s $&#123;x&#125;tatic&quot;</span> ) </span><br><span class=\"line\">s.substitute ( x = <span class=\"string\">&#x27;slum&#x27;</span> ) </span><br><span class=\"line\"></span><br><span class=\"line\">s = Template ( <span class=\"string\">&#x27;A $thing must never $action&#x27;</span> ) </span><br><span class=\"line\">d = &#123; &#125; </span><br><span class=\"line\">d[<span class=\"string\">&#x27;thing&#x27;</span>] = <span class=\"string\">&#x27;gentleman&#x27;</span> </span><br><span class=\"line\">d[<span class=\"string\">&#x27;action&#x27;</span>] = <span class=\"string\">&#x27;show his socks&#x27;</span> </span><br><span class=\"line\">s.substitute ( d ) </span><br></pre></td></tr></table></figure>\n<p>转换符包括（注意顺序）</p>\n<ol>\n<li>%</li>\n<li>转换标志 ，- : 左对齐，+ : 正负号，&quot;&quot; 正数前保留空格，0：位数不够用零来凑</li>\n<li>最小值宽（若为 * 则从元组读入）例如’%. * s’ % (5 , ‘dada’)</li>\n<li>. 后跟精确度</li>\n</ol>\n<p>字符串方法：<br>\n.find (“target” ,start ,end ) 查找字串 (start end 可忽略)<br>\nsth.join ( )<br>\n.lower ( ) 转换成小写<br>\n.title ()  //.capwords () 标题<br>\n.replace (A , B) 查找并替换<br>\n.split ( ) join 的逆运算<br>\n.strip () 去除两侧空格，可自己添加例如.strip ( ’ * !’)<br>\n.translate ( ) &amp;&amp; .maketrans python3 有所区别，运用时自己网上查</p>\n<h3 id=\"字典\"><a class=\"markdownIt-Anchor\" href=\"#字典\">#</a> 字典</h3>\n<p>创建： phonebook = {‘A’ : 1 , ‘B’ : 2 …}<br>\n dict (序列)<br>\nlen ( )<br>\nd[k]<br>\nd[k] = v<br>\ndel d[k]<br>\n k in d 检查 d 中是否有含有键为 k 的项<br>\n字典可以嵌套，类比于多维数组</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template = <span class=\"string\">&quot;%(title)s , %(ooo)d &quot;</span> </span><br><span class=\"line\">data = &#123; <span class=\"string\">&#x27;title&#x27;</span> : <span class=\"string\">&#x27;fff&#x27;</span> , <span class=\"string\">&#x27;ooo&#x27;</span> : <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span> ( template % data )  </span><br></pre></td></tr></table></figure>\n<p>.clear ( ) 原本操作<br>\n.copy ( ) 替换值不变原本，修改值会变<br>\n.deepcopy (copy 函数库中) 复制其包含的所有值<br>\n.fromkeys ([] , ‘default’ ) or dict.fromkeys ( [ ] , ‘default’ ) 给给定的键建立新的字典<br>\n.get (‘value’) 访问不存在的项返回 None<br>\n.has_key (‘value’) 查询是否有此键，py3 中被__contains__(key) 替代<br>\n.items () 把所有项以列表形式返回，且每一项返回 (键，值) 的形式<br>\n.iteritems ( ) 返回迭代器<br>\n.keys ( ) 返回键 ， 同上<br>\n.itereys ( ) 同上<br>\n.values ( ) 同上<br>\n.itervalues ( ) 同上<br>\n.pop (‘键’) 删除对应的键值对<br>\n.popitem ( ) 随机弹出项<br>\n.setdefault (键，‘default’)<br>\n.update (x) 有则不变，无则加之</p>\n<h3 id=\"条件-循环和其它语句\"><a class=\"markdownIt-Anchor\" href=\"#条件-循环和其它语句\">#</a> 条件、循环和其它语句</h3>\n<p>print: , 即空格，print 即换行（除非在最后加，)<br>\nimport somemodule<br>\nfrom sm import sf<br>\nfrom sm import sf as (可避免重名)</p>\n<p>解包时可在最后用 * rest 把剩下的值都存入 rest</p>\n<p>+=</p>\n<ul>\n<li>=</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ... : </span><br><span class=\"line\">    代码块</span><br><span class=\"line\">    代码块</span><br><span class=\"line\"><span class=\"keyword\">elif</span> ... : </span><br><span class=\"line\">    代码块</span><br><span class=\"line\">    代码块</span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">    代码块</span><br><span class=\"line\">    代码块</span><br></pre></td></tr></table></figure>\n<p>x is y x 和 y 是同一对象<br>\n x is not y …<br>\nx in y<br>\nx not in y<br>\n 可以使用 x&lt;y&lt;z</p>\n<p>断言：assert 判断条件<br>\n如果不满足直接程序崩溃</p>\n<p>while 判断 :<br>\n 代码块<br>\n代码块</p>\n<p>for i in sequence :<br>\n…<br>\n…</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>range ( 3 )<br>\n[ 0 , 1 , 2 , 3 ]</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>xrange ( 3 )<br>\n 同 range 只不过是一个一个给出的，更为高效</p>\n</blockquote>\n</blockquote>\n</blockquote>\n",
            "tags": [
                "学习笔记",
                "python"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/12/28/%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "http://amentiraz.github.io/2021/12/28/%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "文件学习笔记",
            "date_published": "2021-12-28T01:46:28.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-MtvMxXMJ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1486106274\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<h3 id=\"文件是什么\"><a class=\"markdownIt-Anchor\" href=\"#文件是什么\">#</a> 文件是什么</h3>\n<p>文件是指一组相关数据的有序集合，这个数据集有一个名称叫做文件名。文件可以是自己编制的，也可以是系统已有的。事实上我们已经多次使用了文件，例如源程序文件，目标文件、可执行文件、库文件等。<br>\n为了将结果保存起来，就需要使用文件。将数据以文件的形式存放在光盘、磁盘等外存储器上，可以达到重复利用、永久保存数据的目的。文件可分为普通文件和设备文件两种。通常吧显示器定义为标准输出文件，一般情况下在屏幕上显示有关信息就是向标准输出文件输出。如前面经常使用的 printf、putchar 函数就是这类输出。键盘通常被指定标准的输入文件，从键盘上输入意味着以标准输入文件输入数据。scanf、getchar 函数就属于这类输入。</p>\n<h3 id=\"文件类型\"><a class=\"markdownIt-Anchor\" href=\"#文件类型\">#</a> 文件类型</h3>\n<p>文件可分为 ASCII 码文件和二进制文件两种。ASCII 文件也成为文本文件，这种文件在磁盘中存放时每个字符对应一个字节，用于存放对应的 ASCII 码。<br>\n例如数 6843 的存储形式为：<br>\nASCII 码：00110110 00111000 00110100 00110011<br>\n 十进制码：  6         8        4        3<br>\n 共占用四个字节。<br>\nASCII 码文件可在屏幕上按字符显示，例如源程序文件就是 ASCII 文件，用 DOS 命令 TYPE 可显示文件的内容。<br>\n二进制文件是按二进制编码的方式来存放文件的。例如，数 6843 的存储形式为：00011010 10111011<br>\n 只占两个字节。二进制文件也可以在屏幕中显示，但内容无法读懂。<br>\n输入输出字符流的开始和结束只由程序控制而不受物理符号（如回车符）的控制。因此也把这种文件称作流式文件。</p>\n<h3 id=\"文件指针\"><a class=\"markdownIt-Anchor\" href=\"#文件指针\">#</a> 文件指针</h3>\n<p>在 C 语言中用一个指针变量指向一个文件，这个指针被称为文件指针，通过文件指针可以对它所指的文件进行各种操作。存放文件的有关信息被保存在一个结构体变量中，它是由系统定义的，取名为 FILE。在编写源程序时不必关心 FILE 结构的细节。例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE * 指针变量标识符</span><br></pre></td></tr></table></figure>\n<p>其中 FILE 必须为大写，该结构中含有文件名、文件状态和文件当前位置等信息。<br>\n注意：在操作系统中，文件被作为重要的系统资源来看待。因此，当程序需要访问文件时，程序员必须显式地打开某个文件，并在使用后关闭它。程序中所有对文件的操作都通过文件指针来实现。</p>\n<h3 id=\"文件打开操作\"><a class=\"markdownIt-Anchor\" href=\"#文件打开操作\">#</a> 文件打开操作</h3>\n<p>C 语言没有输入输出语句，对文件的读写都是用看库函数来实现的。<br>\n对文件进行操作时应遵循一下步骤：</p>\n<ol>\n<li>打开文件。打开文件是指请求系统为指定文件分配内存缓冲区，建立文件的各种有关信息，文件使用前必须先打开。</li>\n<li>读写文件。包括文件的读、写、定位等操作。</li>\n<li>关闭文件。确保数据完整写入文件并释放内存缓冲区。</li>\n</ol>\n<p>打开文件，实际上是建立文件的各种有关信息，并使文件指针指向该文件。关闭文件则是断开指针与文件之间的联系，也就是禁止再对该文件操作。<br>\nfopen 函数用来打开一个文件，其调用的一般形式为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件指针名 = <span class=\"built_in\">fopen</span> ( 文件名 , 使用文件方式 ) ; </span><br></pre></td></tr></table></figure>\n<p>文件指针名必须是被说明为 FILE 类型的指针变量；文件名使被打开文件的文件名，可以是字符串常量或字符串数组；使用文件方式是指文件类型和操作要求。<br>\n例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE * fp ; </span><br><span class=\"line\">fp = ( <span class=\"string\">&quot;file a&quot;</span> , <span class=\"string\">&quot;r&quot;</span> ) ; </span><br></pre></td></tr></table></figure>\n<p>其意义使在当前目录下打开文件 file a，只允许进行读入操作，并使 fp 指向该文件。<br>\n又如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE * fp ; </span><br><span class=\"line\">fp = ( <span class=\"string\">&quot;c:\\\\test&quot;</span> , <span class=\"string\">&quot;rb&quot;</span> ) ; </span><br></pre></td></tr></table></figure>\n<p>其意义是打开 C 驱动磁盘的根目录下的文件 test，这是一个二进制文件，只允许按二进制的方式进行读操作。两个反斜杠 &quot;\\&quot; 第一个表示转义字符，第二个表示根目录。<br>\n或者使用：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">FILE * <span class=\"title\">fopen</span> <span class=\"params\">( <span class=\"type\">const</span> <span class=\"type\">char</span> * filename , <span class=\"type\">const</span> <span class=\"type\">char</span> * mode )</span> </span>; </span><br></pre></td></tr></table></figure>\n<p>返回失败时返回空指针 NULL<br>\n 使用文件的方式共有 12 种，下表给出其符号以及意义。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">文件使用方式</th>\n<th style=\"text-align:center\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:center\">打开文件，只读</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:center\">打开或建立文件只写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">追加打开一个文本文件，并在文件末尾写数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rb</td>\n<td style=\"text-align:center\">二进制文件，同上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wb</td>\n<td style=\"text-align:center\">二进制文件，同上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ab</td>\n<td style=\"text-align:center\">二进制文件，同上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r+</td>\n<td style=\"text-align:center\">读 + 写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w+</td>\n<td style=\"text-align:center\">读 + 写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a+</td>\n<td style=\"text-align:center\">读 + 写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rb+&amp;wb+&amp;ab+</td>\n<td style=\"text-align:center\">类推</td>\n</tr>\n</tbody>\n</table>\n<p>总结如下：r (ead) , w (rite) , a (ppend) , t (ext) , b (inary) 。+：读和写<br>\n查看是否成功读入</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( ( fp = <span class=\"built_in\">fopen</span> ( <span class=\"string\">&quot;text&quot;</span> , <span class=\"string\">&quot;rb&quot;</span> ) ) == <span class=\"literal\">NULL</span>  ) &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;error&quot;</span> ; </span><br><span class=\"line\">    <span class=\"built_in\">getch</span> ( ) ; <span class=\"built_in\">exit</span> ( <span class=\"number\">1</span> ) ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件关闭操作\"><a class=\"markdownIt-Anchor\" href=\"#文件关闭操作\">#</a> 文件关闭操作</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE * fp ; </span><br><span class=\"line\">fp = <span class=\"built_in\">fopen</span> ( <span class=\"string\">&quot;a.out&quot;</span> , <span class=\"string\">&quot;r&quot;</span> ) ; </span><br><span class=\"line\"><span class=\"built_in\">fclose</span> ( fp ) ; </span><br></pre></td></tr></table></figure>\n<p>关闭成功返回值为 0，否则为非零值<br>\n如果打开了多个文件且需要统一关闭：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fcloseall</span> <span class=\"params\">( )</span> </span>; </span><br></pre></td></tr></table></figure>\n<p>此函数关闭除了标准流意外的所有打开流，刷新所有的流缓冲区，并关闭返回的参数，否则返回 EOF。<br>\n标准流：stdin，stdout，stderr</p>\n<h3 id=\"文件结束检测\"><a class=\"markdownIt-Anchor\" href=\"#文件结束检测\">#</a> 文件结束检测</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">feof</span> <span class=\"params\">( FLIE * fp )</span> </span>; </span><br></pre></td></tr></table></figure>\n<p>文件未结束返回 0，已结束返回真。</p>\n<h3 id=\"文件错误检测函数\"><a class=\"markdownIt-Anchor\" href=\"#文件错误检测函数\">#</a> 文件错误检测函数</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ferror</span> <span class=\"params\">( FILE * fp )</span> </span>; </span><br></pre></td></tr></table></figure>\n<p>发生错误返回非零，否则返回 0</p>\n<h3 id=\"定位文件位置指针函数\"><a class=\"markdownIt-Anchor\" href=\"#定位文件位置指针函数\">#</a> 定位文件位置指针函数</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">fseek</span> ( FILE * fp , <span class=\"type\">long</span> offset , <span class=\"type\">int</span> startpos ) ; </span><br></pre></td></tr></table></figure>\n<p>offset 表示目标位置相对起始点的偏移量，要求偏移量为 long 型数据以便在文件长度大于 64KB 时不会出错，当用常量表示位移量时，要求加后缀 L.<br>\nstartpos 表示从何处计算偏移量：SEEK_SET:0 , SEEK_CUR:1 , SEEK_END:2 ;<br>\nfseek 函数一般用于二进制文件，在文本文件中由于要进行转换，故往往会出现错误。</p>\n<h3 id=\"重置文件位置指针函数\"><a class=\"markdownIt-Anchor\" href=\"#重置文件位置指针函数\">#</a> 重置文件位置指针函数</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rewind</span> ( FILE * fp ) ; </span><br></pre></td></tr></table></figure>\n<p>移动到文件开始的位置。<br>\n无返回值</p>\n<h3 id=\"移动指针到当前位置函数\"><a class=\"markdownIt-Anchor\" href=\"#移动指针到当前位置函数\">#</a> 移动指针到当前位置函数</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"title\">ftell</span> <span class=\"params\">( FILE * p )</span> </span>;</span><br></pre></td></tr></table></figure>\n<p>若函数调用成功则函数的返回值时当前读写位置偏离文件头部的字节数，否则返回 - 1 ；<br>\n文件的长度</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ftell</span> ( fp , <span class=\"number\">0L</span> , SEEK_END ) ;</span><br><span class=\"line\">len = <span class=\"built_in\">ftell</span> ( fp ) ; </span><br></pre></td></tr></table></figure>\n<h3 id=\"面向字符的文件读写操作\"><a class=\"markdownIt-Anchor\" href=\"#面向字符的文件读写操作\">#</a> 面向字符的文件读写操作</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">fputc</span> ( <span class=\"type\">int</span> c , FILE * stream ) ; </span><br></pre></td></tr></table></figure>\n<p>c 是带写入的字符，可以是字符常量或者变量。<br>\n每写入一个字符，文件内部位置指针将向后移动一个字节。返回值为字符或者 EOF。<br>\n如果用写或者读写方式打开一个已存在的文件时将清除原有的文件内容，写入字符从文件首开始，如需保留原有文件内容，必须以追加的方式打开文件。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch = <span class=\"built_in\">fgetc</span> ( FILE * stream ) ; </span><br></pre></td></tr></table></figure>\n<p>读取的文件必须是以读写或读的方式打开的。</p>\n<h3 id=\"面向字符串的文件读写操作\"><a class=\"markdownIt-Anchor\" href=\"#面向字符串的文件读写操作\">#</a> 面向字符串的文件读写操作</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span> * <span class=\"title\">fgets</span> <span class=\"params\">( <span class=\"type\">char</span> * string , <span class=\"type\">int</span> n , FILE * stream )</span> </span>; </span><br></pre></td></tr></table></figure>\n<p>函数的功能是从 stream 指向的文件中逐一读取 n-1 个字符，并将读取的字符保存到 string 指向的连续存储空间。<br>\n在读取 n-1 个字符之前如果遇到了换行符或 EOF，则读取结束。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fputs</span> <span class=\"params\">( <span class=\"type\">const</span> <span class=\"type\">char</span> * string , FILE * stream )</span> </span>; </span><br></pre></td></tr></table></figure>\n<p>执行成功返回非负整数，否则返回 EOF。不会把 \\0 写入文件。</p>\n<h3 id=\"面向格式化输入输出的文件读写操作\"><a class=\"markdownIt-Anchor\" href=\"#面向格式化输入输出的文件读写操作\">#</a> 面向格式化输入输出的文件读写操作</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fscanf</span> <span class=\"params\">( FILE * stream , <span class=\"type\">const</span> <span class=\"type\">char</span> * format[,argument]...)</span> </span>; </span><br></pre></td></tr></table></figure>\n<p>返回值为读取正确的数据个数， EOF 为读取错误或文件结束。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fprintf</span> <span class=\"params\">( FILE * stream , <span class=\"type\">const</span> <span class=\"type\">char</span> * format[,argument]... )</span> </span>; </span><br></pre></td></tr></table></figure>\n<p>返回值为正确写入返回数据的个数，负值为读写错误。</p>\n<h3 id=\"面向信息块的文件读写操作\"><a class=\"markdownIt-Anchor\" href=\"#面向信息块的文件读写操作\">#</a> 面向信息块的文件读写操作</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">fread</span> ( <span class=\"type\">void</span> * buffer , <span class=\"type\">int</span> size , <span class=\"type\">int</span> count , FILE * fp ) ; </span><br><span class=\"line\"><span class=\"built_in\">fwrite</span> ( <span class=\"type\">void</span> * buffer , <span class=\"type\">int</span> size , <span class=\"type\">int</span> count , FILE * fp ) ; </span><br></pre></td></tr></table></figure>\n<p>例如：fread (fa , 4 , 5 , fp) ; 的意义是从 fp 所指的文件中，每次读 4 个字节，送入实数数组 fa 中，连续读 5 次。</p>\n",
            "tags": [
                "学习笔记",
                "C语言"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/12/11/%E8%A5%BF%E7%94%B5%E6%96%B0%E7%94%9F%E8%B5%9B%E7%BD%91%E7%BB%9C%E8%B5%9B%E9%A2%98%E8%A7%A3/",
            "url": "http://amentiraz.github.io/2021/12/11/%E8%A5%BF%E7%94%B5%E6%96%B0%E7%94%9F%E8%B5%9B%E7%BD%91%E7%BB%9C%E8%B5%9B%E9%A2%98%E8%A7%A3/",
            "title": "西电新生赛网络赛题解",
            "date_published": "2021-12-11T02:19:40.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-vjZNhBBk\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"507001285\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>持续六天的新生赛终于落下了帷幕，打了 8 道题，第 21 名，对于两年没有碰过 oi 的我来说已经是一个不错的成绩了，如果运气好的话还能水到一等奖，怎么说都血赚。<br>\n但不得不说的是，我这次的状态比两年前打 CSPS 要好太多了，如果以我现在的心理素质和之前的知识水平去打，那肯定是不同的结果了。<br>\n这次比赛原本想用 Amentiraz 这个昵称去打，但思来想去还是用了最开始的 dsfly 昵称去打，一来这个名称短（够装 B），二来这个名称是我最开始打 oi 时的昵称，意味着一个新的开始吧。<br>\n说是六天，实际上就打了前三天，主要是还有本职的学习工作，第二是因为小说太好看了（笑）。还是把除了 J 题以外的所有题都摸了一遍，可以说除了 J 题我做不出来，其余的花时间都能做出来，放了 H 题和 K 题，H 题是因为纯模拟暴力，太恶心了，不想写，K 题是让你直接输出时间复杂度，搞了几下没出来，又不想去看资料，于是就放了。（留着时间看番不香吗）</p>\n<span id=\"more\"></span>\n<h3 id=\"t1位运算\"><a class=\"markdownIt-Anchor\" href=\"#t1位运算\">#</a> T1 位运算</h3>\n<p>题意：输入 a，b，输出 a&amp;b,a|b,a^b 的二进制表示<br>\n签到题，特判值为 0 的情况，没啥说的<br>\n代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ;</span><br><span class=\"line\"></span><br><span class=\"line\">void deal ( int x ) &#123;</span><br><span class=\"line\">    if ( x == 0 ) &#123; cout &lt;&lt; &quot;0&quot; &lt;&lt; endl ; return ; &#125;</span><br><span class=\"line\">    int a[10000] , len = 1 ;</span><br><span class=\"line\">    while ( x ) &#123;</span><br><span class=\"line\">        a[len++] = x &amp; 1 ; x &gt;&gt;= 1 ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = len - 1 ; i &gt;= 1 ; i -- ) cout &lt;&lt; a[i] ;</span><br><span class=\"line\">    cout &lt;&lt; endl ; return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    int a , b ; scanf ( &quot;%d%d&quot; , &amp; a , &amp; b ) ;</span><br><span class=\"line\">    int ans1 = a &amp; b , ans2 = a | b , ans3 = a ^ b ;</span><br><span class=\"line\">    deal ( ans1 ) ; deal ( ans2 ) ; deal ( ans3 ) ;</span><br><span class=\"line\">    return 0 ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"t21931\"><a class=\"markdownIt-Anchor\" href=\"#t21931\">#</a> T21931</h3>\n<p>题面：<br>\n<img data-src=\"https://tva1.sinaimg.cn/large/008i3skNly1gx9p89fa2vj30wl0fz7az.jpg\" alt=\"\"><br>\n歌颂我们伟大的母校 90 周年的题目。<br>\n一眼看不出来，先打表枚举找规律。大胆猜想最佳情况是把每一张劵平摊开，尽可能的覆盖到每一次买套餐，小心求证列几个数学公式就出来了，这题不难。关键是你要眼尖的看出如果不买饭那么就不花钱。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ;</span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    int T ; scanf ( &quot;%d&quot; , &amp; T ) ;</span><br><span class=\"line\">    while ( T -- ) &#123;</span><br><span class=\"line\">        int n , m ; scanf ( &quot;%d%d&quot; , &amp; n , &amp; m ) ;</span><br><span class=\"line\">        int a[1000] , tot = 0 ;</span><br><span class=\"line\">        for ( int i = 1 ; i &lt;= n ; i ++ ) scanf ( &quot;%d&quot; , &amp; a[i] ) , tot += a[i] ;</span><br><span class=\"line\">        if ( m &gt; n ) &#123;</span><br><span class=\"line\">            cout &lt;&lt; tot * 2 * ( m - n ) + tot * n - tot &lt;&lt; endl ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if ( m == 0 ) cout &lt;&lt; &quot;0&quot; &lt;&lt; endl ;</span><br><span class=\"line\">        else cout &lt;&lt; m * tot - tot &lt;&lt; endl ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0 ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"t3等级展示\"><a class=\"markdownIt-Anchor\" href=\"#t3等级展示\">#</a> T3 等级展示</h3>\n<p>题意：<br>\n类比于 qq 的等级，对应星星、月亮、太阳、皇冠有 *,(,0,W 给出等级，输出图标<br>\n签到题，简单的一批，直接上代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ; </span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    int n ; scanf ( &quot;%d&quot; , &amp; n ) ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n / 64 ; i ++ ) cout &lt;&lt; &quot;W&quot; ; n %= 64 ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n / 16 ; i ++ ) cout &lt;&lt; &quot;O&quot; ; n %= 16 ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n / 4 ; i ++ ) cout &lt;&lt; &quot;(&quot; ; n %= 4 ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) cout &lt;&lt; &quot;*&quot; ; </span><br><span class=\"line\">    return 0 ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"t4边权之和\"><a class=\"markdownIt-Anchor\" href=\"#t4边权之和\">#</a> T4 边权之和</h3>\n<p>题意：n 个点的无向完全图，对于每个点有点权 ai，对于两个点 i，j 的边权为 | ai-aj|，统计边权之和对于 998244353 取模值<br>\n考虑把绝对值去掉，先把数组给排序，计算它们的和，如何整体计算即可，也不难。<br>\n至此，新生赛所有的送分题以及送完了，后面的题或多或少都有些难度，这四道题基本上是所有接触过 c 的人都能写出来的，只是快慢罢了。<br>\n我新生赛来迟了 30min，我写到这道题时排位 30 多名，后面排名基本上是只升不降，说明大部分人开始卡住了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ; </span><br><span class=\"line\">const long long mod = 998244353 ;</span><br><span class=\"line\">long long a[1000006] ;</span><br><span class=\"line\"></span><br><span class=\"line\">bool cmp ( int x , int y ) &#123; return x &gt; y ; &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    int n ; long long ans = 0 , tot = 0 ; scanf ( &quot;%d&quot; , &amp; n ) ;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) &#123;</span><br><span class=\"line\">        scanf ( &quot;%lld&quot; , &amp; a[i] ) ;</span><br><span class=\"line\">        tot += a[i] ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort ( a + 1 , a + 1 + n , cmp ) ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) &#123;</span><br><span class=\"line\">        tot -= a[i] ; </span><br><span class=\"line\">        ans += ( ( long long ) ( n - i ) ) * a[i] - tot ;</span><br><span class=\"line\">        ans %= mod ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans ; </span><br><span class=\"line\">    return 0 ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"t5tsy的轻音梦\"><a class=\"markdownIt-Anchor\" href=\"#t5tsy的轻音梦\">#</a> T5tsy 的轻音梦</h3>\n<p>（没想到在这都能见到轻音厨，但可惜的是这个轻音厨太坑了）<br>\n题面：<br>\n<img data-src=\"https://tva1.sinaimg.cn/large/008i3skNly1gx9ppizm8sj30wt09btag.jpg\" alt=\"\"><br>\n请大家先看看那位交了 48 次都没过的大佬：<br>\n<img data-src=\"https://tva1.sinaimg.cn/large/008i3skNly1gx9pqbexghj30nh0hiajq.jpg\" alt=\"\"><br>\n怎么说呢，从第一天开始我就仰望大佬的英姿，虽然最后大佬跟我 A 的题是一个数，但就凭这道题我就不得不佩服他。我一度怀疑他在整活，但看到他在比赛终都没有 A 掉这题，不由得对他产生崇高的敬意。<br>\n我开始也被绕进去了，很明显，我们可以联想到幻方，幻方似乎是斜着放，中间是最中间的数，然后呈现一定规律依次放入数，但是我们怎么类比推理都无法得出正确的解法，特别是输出 - 1 给我了很大的迷惑，是不是要考虑奇数次项的奇偶关系？是不是对称放？等等，然而这些都是放屁。想出来正解后我觉得自己是个傻逼。<br>\n正解：对于奇数次项考虑对角线为分隔除了正中间的一定为偶其余的依次按从大到小的顺序从对角线依次填入，保证左边是偶右边是奇就行。<br>\n对于偶数次项直接依次填入即可<br>\n（ls 的轻音梦碎了）<br>\n代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ; </span><br><span class=\"line\"></span><br><span class=\"line\">int a[1005][1005] ; </span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">\tint n ; scanf ( &quot;%d&quot; , &amp; n ) ; </span><br><span class=\"line\">\tif ( n % 2 == 0 ) &#123;</span><br><span class=\"line\">\t\tfor ( int i = 1 ; i &lt;= n * n ; i ++ ) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; i &lt;&lt; &quot; &quot; ; </span><br><span class=\"line\">\t\t\tif ( i % n == 0 ) cout &lt;&lt; endl ; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse if ( n == 1 ) cout &lt;&lt; &quot;1&quot; ; </span><br><span class=\"line\">\telse &#123;</span><br><span class=\"line\">\t\tfor ( int i = 1 ; i &lt;= n / 2 ; i ++ ) &#123;</span><br><span class=\"line\">\t\t\ta[i][i] = i * 2 ; </span><br><span class=\"line\">\t\t\ta[i][i+1] = i * 2 + 1 ; \t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[1][3] = 1 ; </span><br><span class=\"line\">\t\ta[n/2+1][n/2] = n + 1 ; </span><br><span class=\"line\">\t\tfor ( int i = 1 ; i &lt;= n / 2 + 1 ; i ++ ) &#123;</span><br><span class=\"line\">\t\t\tint x = n / 2 + i , y = n / 2 + i ; </span><br><span class=\"line\">\t\t\ta[x][y] = n + 1 + i * 2 - 1 ; </span><br><span class=\"line\">\t\t\ta[x+1][y] = n + 1 + i * 2 ;\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tint cur1 = n + 1 + ( n / 2 + 1 ) * 2 + 1 ;</span><br><span class=\"line\">\t\tint cur2 = cur1 - 1 ;  </span><br><span class=\"line\">\t\tfor ( int i = 1 ; i &lt;= n ; i ++ ) &#123;</span><br><span class=\"line\">\t\t\tfor ( int j = 1 ; j &lt;= n ; j ++ ) &#123;</span><br><span class=\"line\">\t\t\t\tif ( ! a[i][j] ) &#123;</span><br><span class=\"line\">\t\t\t\t\tif ( i &gt; j ) a[i][j] = cur2 , cur2 += 2 ; </span><br><span class=\"line\">\t\t\t\t\tif ( j &gt; i ) a[i][j] = cur1 , cur1 += 2 ; \t</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; a[i][j] &lt;&lt; &quot; &quot; ; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; endl ; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0 ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"t6奇怪的排序\"><a class=\"markdownIt-Anchor\" href=\"#t6奇怪的排序\">#</a> T6 奇怪的排序</h3>\n<p>题意：<br>\n<img data-src=\"https://tva1.sinaimg.cn/large/008i3skNly1gx9q4jdkkwj30ge0d475c.jpg\" alt=\"\"><br>\n这题是很有意思的一道题，考察算法线段树和逆序对，只能说挺难想的吧，难度估计有提高组 D2T1 的难度。<br>\n我们发现这个神奇的算法是把每个最大的数抬到第 i 个位置上并对前 i 个数排序，第 i+1 个数按照大小顺序交换到自己的位置上，交换的次数为这个数不重复的逆序对。<br>\n本身分析到这里我以为套个逆序对就完了，结果发现是不重复的，然后我就弄了一个小暴力，把这些重复的数强制给删掉，结果时间复杂度为 O (n^2*logn) 比他原来的还大，emmm。<br>\n对于常见的求逆序对的方法归并和树状数组我都不是很熟悉，于是我就用最无脑的线段树去做，依次判断这个数是否读入过然后决定是否加入到逆序对的计算，最后加起来就行。时间复杂度为 O (nlogn)<br>\n 代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">#include&lt;queue&gt;</span><br><span class=\"line\">#include&lt;vector&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ;</span><br><span class=\"line\">typedef long long LL ;</span><br><span class=\"line\">const int maxn = 200005 ;</span><br><span class=\"line\">struct L &#123;</span><br><span class=\"line\">    int val , add ;</span><br><span class=\"line\">&#125; t[maxn&lt;&lt;2] ;</span><br><span class=\"line\">int n , m ; LL sum = 0 ;</span><br><span class=\"line\">struct M &#123;</span><br><span class=\"line\">    int val , id ;</span><br><span class=\"line\">&#125; a[maxn] ;</span><br><span class=\"line\">int vis[maxn] , arank[maxn] ;</span><br><span class=\"line\"></span><br><span class=\"line\">bool cmp ( M x , M y ) &#123;</span><br><span class=\"line\">    if ( x.val == y.val ) return x.id &lt; y.id ;</span><br><span class=\"line\">    return x.val &lt; y.val ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void spread ( int p , int l , int r ) &#123;</span><br><span class=\"line\">    if ( t[p].add ) &#123;</span><br><span class=\"line\">        int mid = ( l + r ) &gt;&gt; 1 ;</span><br><span class=\"line\">        t[p&lt;&lt;1].val = ( t[p&lt;&lt;1].val + t[p].add * ( mid - l + 1 ) ) , t[p&lt;&lt;1].add += t[p].add ;</span><br><span class=\"line\">        t[p&lt;&lt;1|1].val = ( t[p&lt;&lt;1|1].val + t[p].add * ( r - mid ) ) , t[p&lt;&lt;1|1].add += t[p].add ;</span><br><span class=\"line\">        t[p].add = 0 ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void change ( int p , int l , int r , int x , int y , int z ) &#123;</span><br><span class=\"line\">   if ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; t[p].val += z * ( r - l + 1 ) ; t[p].add += z ; return ; &#125;</span><br><span class=\"line\">   int mid = ( l + r ) &gt;&gt; 1 ; spread ( p , l , r ) ;</span><br><span class=\"line\">   if ( x &lt;= mid ) change ( p &lt;&lt; 1 , l , mid , x , y , z ) ;</span><br><span class=\"line\">   if ( y &gt; mid ) change ( p &lt;&lt; 1 | 1 , mid + 1 , r , x , y , z ) ;</span><br><span class=\"line\">   t[p].val = t[p&lt;&lt;1].val + t[p&lt;&lt;1|1].val ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int ask ( int p , int l , int r , int x , int y ) &#123;</span><br><span class=\"line\">    if ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; return t[p].val ; &#125;</span><br><span class=\"line\">    int mid = ( l + r ) &gt;&gt; 1 ; spread ( p , l , r ) ; int ans = 0 ;</span><br><span class=\"line\">    if ( x &lt;= mid ) ans = ans + ask ( p &lt;&lt; 1 , l , mid , x , y ) ;</span><br><span class=\"line\">    if ( y &gt; mid ) ans = ans + ask ( p &lt;&lt; 1 | 1 , mid + 1 , r , x , y ) ;</span><br><span class=\"line\">    return ans ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    scanf ( &quot;%d&quot; , &amp; n ) ; int maxn = 0 , site = 0 ;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) &#123;</span><br><span class=\"line\">        scanf ( &quot;%d&quot; , &amp; a[i].val ) ;</span><br><span class=\"line\">        if ( a[i].val &gt; maxn ) maxn = a[i].val , site = i ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= site ; i ++ ) &#123;</span><br><span class=\"line\">        if ( a[i].val &gt; a[1].val ) &#123;</span><br><span class=\"line\">            swap ( a[i].val , a[1].val ) ; sum += 1LL ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) a[i].id = i ;</span><br><span class=\"line\">    sort ( a + 1 , a + 1 + n , cmp ) ;</span><br><span class=\"line\">    int cur = 2 ;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) &#123;</span><br><span class=\"line\">        if ( a[i].val == a[i-1].val ) cur -- ;</span><br><span class=\"line\">        arank[a[i].id] = cur ++ ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) &#123;</span><br><span class=\"line\">        sum += ( LL ) ( ask ( 1 , 1 , n , arank[i] , arank[i] ) ) ;</span><br><span class=\"line\">        if ( vis[arank[i]] ) continue ;</span><br><span class=\"line\">        vis[arank[i]] ++ ;</span><br><span class=\"line\">        change ( 1 , 1 , n , 1 , arank[i] - 1 , 1 ) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; sum ;</span><br><span class=\"line\">    return 0 ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"t7更高更妙的字符游戏\"><a class=\"markdownIt-Anchor\" href=\"#t7更高更妙的字符游戏\">#</a> T7 更高更妙的字符游戏</h3>\n<p>题面：<br>\n<img data-src=\"https://tva1.sinaimg.cn/large/008i3skNly1gx9qg4e2lij30m607qjsl.jpg\" alt=\"\"><br>\n对于我来说，博弈论分为两种，一种是简单的，一种是做不出来的。<br>\n我在比赛中惊喜的发现居然有超过 5 个人做出来了这道题，我稍加思索，然后大胆假设，也没小心求证，直接交了然后就 A 了，www。<br>\n考虑两种必死的情况，也就是之差一个的和不差的，直接判断就行。对于其它情况，我们从上帝视角来看，如果是我发现下一步我可能会输，我们直接把那个字符删了就行，但是万一删了还是必死呢。我们假设有 abcabc 这种情况，我们肯定不可能删 b，删了就死，但我们可以删最边上的 a 和 c 啊，那么最终的赢家只由字符串的大小决定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ; </span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    int T ; scanf ( &quot;%d&quot; , &amp; T ) ; </span><br><span class=\"line\">    int flag = 2 ; </span><br><span class=\"line\">    while ( T -- ) &#123;</span><br><span class=\"line\">        flag = 2 ; </span><br><span class=\"line\">        int n ; scanf ( &quot;%d&quot; , &amp; n ) ; </span><br><span class=\"line\">        char a[1000006] ; a[n+1] = 0 ; </span><br><span class=\"line\">        scanf ( &quot;%s&quot; , a + 1 ) ; </span><br><span class=\"line\">        for ( int i = 1 ; i &lt;= n - 1 ; i ++ ) &#123;</span><br><span class=\"line\">            if ( a[i] == a[i+1] ) flag = 0 ;</span><br><span class=\"line\">            if ( a[i] == a[i+2] &amp;&amp; i + 2 &lt;= n ) flag = min ( flag , 1 ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if ( flag == 0 ) cout &lt;&lt; &quot;pllj&quot; &lt;&lt; endl ; </span><br><span class=\"line\">        else if ( flag == 1 ) cout &lt;&lt; &quot;freesin&quot; &lt;&lt; endl ; </span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            flag = n % 2 ; </span><br><span class=\"line\">            if ( flag == 0 ) cout &lt;&lt; &quot;pllj&quot; &lt;&lt; endl ;</span><br><span class=\"line\">            else if ( flag == 1 ) cout &lt;&lt; &quot;freesin&quot; &lt;&lt; endl ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0 ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"t8内存占用计算\"><a class=\"markdownIt-Anchor\" href=\"#t8内存占用计算\">#</a> T8 内存占用计算</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008i3skNly1gx9qmm6ve0j30hu0i240c.jpg\" alt=\"\"><br>\n纯模拟，利用高精的思想去比较，乘法就先判断位数够不够如果正好就逐位比较，想了思路感觉很恶心没写代码，如果说错了还请谅解。</p>\n<h3 id=\"t9tsy的排序\"><a class=\"markdownIt-Anchor\" href=\"#t9tsy的排序\">#</a> T9tsy 的排序</h3>\n<p>题面：<br>\n<img data-src=\"https://tva1.sinaimg.cn/large/008i3skNly1gx9qpp37ttj30qg06z0u0.jpg\" alt=\"\"></p>\n<blockquote>\n<p>三年 oi 一场空，不开 long long 见祖宗</p>\n</blockquote>\n<p>每个数只出现一次，我们可以计算它们的逆序对，然后就可以算出它们的正序对等等数据，所以我们只需枚举中间两位，答案就是对于每个逆序对，求两个数左边比他们小的和右边比它们大的数的积。<br>\n但这个算法的复杂度还是 O (n^2)，我们把每个数从大到小丢入线段树中，把标号大于它本身的数都加上它的正序对的个数，强制强制把时间复杂度压缩到 O (nlogn)，再一次性乘起来就行。<br>\n注意一定要开 longlong</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL ; </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">300005</span> ; </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod = <span class=\"number\">35198030</span> ; </span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">L</span> &#123;</span><br><span class=\"line\">    LL add , val ;</span><br><span class=\"line\">&#125; t[maxn&lt;&lt;<span class=\"number\">2</span>] ; </span><br><span class=\"line\"><span class=\"type\">int</span> a[maxn] ;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">M</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val , id ;</span><br><span class=\"line\">&#125; f[maxn] ; </span><br><span class=\"line\">LL g[maxn] ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">spread</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( t[p].add ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; </span><br><span class=\"line\">        t[p&lt;&lt;<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p].add * ( mid - l + <span class=\"number\">1</span> ) ) % mod , t[p&lt;&lt;<span class=\"number\">1</span>].add += t[p].add ; t[p&lt;&lt;<span class=\"number\">1</span>].add %= mod ;</span><br><span class=\"line\">        t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p].add * ( r - mid ) ) % mod , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add += t[p].add ; t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add %= mod ;</span><br><span class=\"line\">        t[p].add = <span class=\"number\">0</span> ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , LL z )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; t[p].val += z * ( r - l + <span class=\"number\">1</span> ) ; t[p].add += z ; t[p].val %= mod , t[p].add %= mod ; <span class=\"keyword\">return</span> ; &#125;</span><br><span class=\"line\">   <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">   <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ; </span><br><span class=\"line\">   <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y , z ) ; </span><br><span class=\"line\">   t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ) % mod ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ask</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; <span class=\"keyword\">return</span> t[p].val % mod ; &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; LL ans = <span class=\"number\">0</span> ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) ans = ( ans + <span class=\"built_in\">ask</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ) % mod ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) ans = ( ans + <span class=\"built_in\">ask</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ) % mod ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d&quot;</span> , &amp; n ) ; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i ++ ) <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d&quot;</span> , &amp; a[i] ) ; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i ++ ) &#123;</span><br><span class=\"line\">        f[a[i]].val = <span class=\"built_in\">ask</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , a[i] , a[i] ) ; f[a[i]].id = i ; </span><br><span class=\"line\">        <span class=\"built_in\">change</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , a[i] , n , <span class=\"number\">1</span> ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt;= ( n &lt;&lt; <span class=\"number\">2</span> ) ; i ++ ) t[i].add = t[i].val = <span class=\"number\">0</span> ; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = n ; i &gt;= <span class=\"number\">1</span> ; i -- ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ind = f[i].id ; </span><br><span class=\"line\">        g[i] = ( <span class=\"built_in\">ask</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , ind , ind ) ) % mod ; </span><br><span class=\"line\">        <span class=\"built_in\">change</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , ind , n , f[i].val ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LL ans = <span class=\"number\">0</span> ; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i ++ ) &#123;</span><br><span class=\"line\">        LL num = ( ( n - a[i] ) - ( i - f[a[i]].val - <span class=\"number\">1</span> ) ) % mod ;</span><br><span class=\"line\">        ans = ( ans + ( num * g[a[i]] ) ) % mod ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"t10璀璨星空\"><a class=\"markdownIt-Anchor\" href=\"#t10璀璨星空\">#</a> T10 璀璨星空</h3>\n<p>题意：<br>\n<img data-src=\"https://tva1.sinaimg.cn/large/008i3skNly1gx9qz63046j30fy0fq3zm.jpg\" alt=\"\"><br>\n没去做，也没有想，全场也只有六个做出来了，后面如果它们发题解再补吧。（还得补高数欠下的）</p>\n<h3 id=\"t11复杂度理论初步\"><a class=\"markdownIt-Anchor\" href=\"#t11复杂度理论初步\">#</a> T11 复杂度理论初步</h3>\n<p>题意：<br>\n<img data-src=\"https://tva1.sinaimg.cn/large/008i3skNly1gx9r210kolj30g60g5q3j.jpg\" alt=\"\"><br>\n<img data-src=\"https://tva1.sinaimg.cn/large/008i3skNly1gx9r29droxj30hm0guaas.jpg\" alt=\"\"><br>\n<img data-src=\"https://tva1.sinaimg.cn/large/008i3skNly1gx9r2gd287j30gl0aeq35.jpg\" alt=\"\"><br>\n<img data-src=\"https://tva1.sinaimg.cn/large/008i3skNly1gx9r2nnny9j30fu0dnmxw.jpg\" alt=\"\"><br>\n提交了几次没对就没提交了。有几个结论还是可以记下来：对于 for 循环的时间复杂度就是最内层之积，对于递归就是递归的次数 * 每次递归的时间复杂度。同样的，有题解再做吧。</p>\n",
            "tags": [
                "题解"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/12/02/DP/",
            "url": "http://amentiraz.github.io/2021/12/02/DP/",
            "title": "DP",
            "date_published": "2021-12-02T09:26:14.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-spFbFTgV\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"464413083\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>学了三天 DP 连个 P 都不会，总的来说就是寄了，每道题不看题解就做不来，试着做了做三道提高组难度的题，做出来了俩，另外一个没有思路。这俩题我都想出了大部分思路，但最后几步由于经验问题没想出来。做完后我以为我懂了，然后膨胀了，去挑战<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDExMDg=\">低价购买</span>这道题。然后不出意外寄了。打算先不弄这个了，等以后在弄，先把之前写的贴上来吧。</p>\n<span id=\"more\"></span>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQ4MzI=\">珈百璃的堕落</span><br>\n这番是好看的，题是不会的。<br>\n这道题有三个麻烦的点，一个是范围的确定，一个是 dp 数组的含义确定，还有一个是压缩数组的大小。<br>\n通过这道题我掌握了基本的 DP 递推的根据和要领，意思就是我能证明 dp 递推的正确性了，但然而并没有什么卵用，不会的还是不会。<br>\n我在高中时就做出来了这道题，但我认为在我高中的时候是不可能想出这道题的思路的，可以说我高中学竞赛就是在自欺欺人了（笑）。但讲道理的是，我起步太慢了，那个时候我也不是什么天才，依葫芦画瓢才是我应该干的，不管怎样我现在是不能这么干了。<br>\n一个很重要的点是，我们要继承上一个状态，又不能破坏现在的状态，所以起码要二维的数组，我们要尽力压缩空间，注意到第一维只会用到上一个的状态，所以我们调整一下。<br>\n代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;queue&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ; </span><br><span class=\"line\"></span><br><span class=\"line\">int tots , totc , dp[2][2000006] ; </span><br><span class=\"line\">int T = 1000000 ; </span><br><span class=\"line\">char a[2000006] ; </span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    int n ; scanf ( &quot;%d&quot; , &amp; n ) ;</span><br><span class=\"line\">    int l = 0 , r = 0 ; </span><br><span class=\"line\">    for ( int i = 0 ; i &lt;= 2000006 ; i ++ ) dp[0][i] = dp[1][i] = -100000006 ; </span><br><span class=\"line\">    dp[0][T] = 0 ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) &#123;</span><br><span class=\"line\">        scanf ( &quot;%s&quot; , a ) ; </span><br><span class=\"line\">        int len = strlen ( a ) , tots = 0 , totc = 0 ; </span><br><span class=\"line\">        for ( int j = 0 ; j &lt; len ; j += 2 ) </span><br><span class=\"line\">            a[j] == &#x27;s&#x27; ? tots ++ : totc ++ ; </span><br><span class=\"line\">        int v = totc , w = tots - totc ;</span><br><span class=\"line\">        l = min ( l + w , l ) ; r = max ( r + w , r ) ; </span><br><span class=\"line\">        for ( int j = l ; j &lt;= r ; j ++ ) &#123;</span><br><span class=\"line\">            dp[i&amp;1][T+j] = max ( dp[i&amp;1^1][T+j] , dp[i&amp;1][T+j] ) ; </span><br><span class=\"line\">            dp[i&amp;1][T+j] = max ( dp[i&amp;1^1][T+j-w] + v , dp[i&amp;1][T+j] ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; dp[n&amp;1][T] ; </span><br><span class=\"line\">    return 0 ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDExNTY=\">垃圾陷阱</span><br>\n其实高度和维持生命的时间可以换一下，就是时间做数组，生命做值，但太麻烦了，就没写。<br>\n要时刻记住当前状态由上一个状态推导而来，别自己吓自己。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ; </span><br><span class=\"line\"></span><br><span class=\"line\">struct L &#123;</span><br><span class=\"line\">    int t , f , h ; </span><br><span class=\"line\">&#125; trash[1005] ; </span><br><span class=\"line\">int dp[105][105] ; </span><br><span class=\"line\">bool cmp ( L x , L y ) &#123; return x.t &lt; y.t ; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    int D , G ; scanf ( &quot;%d%d&quot; , &amp; D , &amp; G ) ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= G ; i ++ ) scanf ( &quot;%d%d%d&quot; , &amp; trash[i].t , &amp; trash[i].f , &amp; trash[i].h ) ; </span><br><span class=\"line\">    sort ( trash + 1 , trash + 1 + G , cmp ) ;</span><br><span class=\"line\">    dp[0][0] = 10 ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= G ; i ++ ) &#123;</span><br><span class=\"line\">        for ( int j = 0 ; j &lt;= D ; j ++ ) &#123;</span><br><span class=\"line\">            if ( j &gt;= trash[i].h &amp;&amp; dp[i-1][j-trash[i].h] &gt;= trash[i].t ) &#123;</span><br><span class=\"line\">                dp[i][j] = max ( dp[i-1][j-trash[i].h] ,dp[i][j] ) ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if ( dp[i-1][j] &gt;= trash[i].t ) &#123;</span><br><span class=\"line\">                dp[i][j] = max ( dp[i-1][j] + trash[i].f , dp[i][j] ) ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= G ; i ++ ) &#123;</span><br><span class=\"line\">        if ( dp[i][D] != 0 ) &#123;</span><br><span class=\"line\">            cout &lt;&lt; trash[i].t ; return 0 ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int now = 10 ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= G; i ++ ) &#123;</span><br><span class=\"line\">        if ( now &lt; trash[i].t - trash[i-1].t ) &#123; cout &lt;&lt; trash[i-1].t + now ; return 0 ; &#125;  </span><br><span class=\"line\">        else now = now - trash[i].t + trash[i-1].t + trash[i].f ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; trash[G].t + now ; </span><br><span class=\"line\">    return 0 ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "DP",
                "算法"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/11/29/Tarjan/",
            "url": "http://amentiraz.github.io/2021/11/29/Tarjan/",
            "title": "Tarjan",
            "date_published": "2021-11-29T08:50:27.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-HWVpZywi\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"488388731\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>想当年高中组织活动的时候我还专门写过 Tarjan 的流程和证明，如今已经忘的干干净净，原来的代码也找不到了，只能现写了。<br>\n总的来说就是利用一个栈，将每个访问到的点 push 入栈，在寻找的过程中记录两个值，一个是 dfn—— 它是第几个搜索到的，一个是 low—— 它能衍生的点中 dfn 最小的值。如果一个点 dfn==low 说明它本身就是最小的点，把它及它栈以上的点全部 pop 出来就行，因为它上面的点必定是与它形成强联通分量。我们不妨假设它上面的点有不是它强联通分量的，那么此点在回溯到它本身的时候只有两种情况，一是它本身是强联通最小的点，那么在找到此点时会把它上面的点全部 pop 出去，另一种是它不是最小点，那么在遍历的过程中总会到第一种情况把它排除。<br>\nTarjan 程序是正确无误的，然后最后要跑一个拓扑，然鹅我不大会。luogu 上爆了 40pt，然后去看别人的题解秒懂。用拓扑可以优化掉 ans、Q、new_val 等等数组，估计就 80pt 了，然后我们还得用 dp 去解决菊花图这种类型的数据。<br>\n这道题还给人一个教训是，对于缩点的题，我们记录下每条路径的开始与结束去构造新图，没必要单独列个 Q 这种数组。<br>\n40pt 代码如下：<br>\n（其实会个 Tarjan 就行了吧）</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;queue&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ; </span><br><span class=\"line\">const int maxn = 100005 ; </span><br><span class=\"line\">int n , m ; </span><br><span class=\"line\">int head[maxn] , val[maxn] , nex[maxn] , cnt , to[maxn] , group[10004] ; </span><br><span class=\"line\">int tot , ind , a[10004] , stac[10004] , dfn[10004] , vis[10004] , low[10004] ;</span><br><span class=\"line\">queue &lt; int &gt; Q[10004] ; int col , in[10004] , new_val[10004] ; </span><br><span class=\"line\">int ans[10004] , num ; </span><br><span class=\"line\">void add ( int x , int y ) &#123; nex[++cnt] = head[x] ; head[x] = cnt ; to[cnt] = y ; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">void Tarjan ( int u ) &#123;</span><br><span class=\"line\">    dfn[u] = low[u] = ++ tot ; vis[u] = 1 ; stac[++ind] = u ;  </span><br><span class=\"line\">    for ( int i = head[u] ; i ; i = nex[i] ) &#123;</span><br><span class=\"line\">        if ( ! dfn[to[i]] ) &#123;</span><br><span class=\"line\">            Tarjan ( to[i] ) ; </span><br><span class=\"line\">            low[u] = min ( low[u] , low[to[i]] ) ; </span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">        else if ( vis[to[i]] ) &#123;</span><br><span class=\"line\">            low[u] = min ( low[u] , low[to[i]] ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ( low[u] == dfn[u] ) &#123;</span><br><span class=\"line\">        int v ; col ++ ;  </span><br><span class=\"line\">        while ( v = stac[ind--] ) &#123;</span><br><span class=\"line\">            Q[col].push ( v ) ; group[v] = col ;  </span><br><span class=\"line\">            vis[v] = 0 ; </span><br><span class=\"line\">            if ( v == u ) break ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void dfs ( int x , int val ) &#123;</span><br><span class=\"line\">    int flag = 0 ; </span><br><span class=\"line\">    for ( int i = head[x] ; i ; i ++ ) &#123;</span><br><span class=\"line\">        flag = 1 ; </span><br><span class=\"line\">        dfs ( to[i] , val + new_val[to[i]] ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ( ! flag ) &#123;</span><br><span class=\"line\">        ans[++num] = val ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void topo ( ) &#123;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= col ; i ++ ) &#123;</span><br><span class=\"line\">        if ( in[i] == 0 ) &#123;</span><br><span class=\"line\">            dfs ( i + n , new_val[i] ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool cmp ( int x , int y ) &#123; return x &gt; y ; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    scanf ( &quot;%d%d&quot; , &amp; n , &amp; m ) ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) scanf ( &quot;%d&quot; , &amp; a[i] ) ; </span><br><span class=\"line\">    while ( m -- ) &#123;</span><br><span class=\"line\">        int x , y ; scanf ( &quot;%d%d&quot; , &amp; x , &amp; y ) ; </span><br><span class=\"line\">        add ( x , y ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) &#123;</span><br><span class=\"line\">        if ( ! dfn[i] ) Tarjan ( i ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= col ; i ++ ) &#123;</span><br><span class=\"line\">        int new_node = i + n , val = 0 ;</span><br><span class=\"line\">        while ( ! Q[i].empty ( ) ) &#123;</span><br><span class=\"line\">            int x = Q[i].front ( ) ; Q[i].pop ( ) ; val += a[x] ; </span><br><span class=\"line\">            for ( int j = head[x] ; j ; j = nex[j] ) &#123;</span><br><span class=\"line\">                if ( group[to[j]] == group[x] ) continue ; </span><br><span class=\"line\">                add ( new_node , group[to[j]] + n ) ;</span><br><span class=\"line\">                in[to[j]] ++ ; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        new_val[i] = val ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    topo ( ) ; </span><br><span class=\"line\">    sort ( ans + 1 , ans + 1 + num , cmp ) ; </span><br><span class=\"line\">    printf ( &quot;%d&quot; , ans[1] ) ; </span><br><span class=\"line\">    return 0 ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "Tarjan"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/11/29/LCA/",
            "url": "http://amentiraz.github.io/2021/11/29/LCA/",
            "title": "LCA",
            "date_published": "2021-11-29T03:20:10.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-RdztVWRC\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"29850611\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<blockquote>\n<p>LCA（Least Common Ancestors），即最近公共祖先，是指在有根树中，找出某两个结点 u 和 v 最近的公共祖先。 ——— 来自百度百科</p>\n</blockquote>\n<p>对于一棵树来说，我们为了求它的最近公共祖先其实思路和快速幂是差不多的，我们不能直接一个个的向上查找，这样会使时间复杂度爆表，我们应当以 2^k 的速率往上找，这样可以使其时间复杂度降为 log 级别。<br>\n不得不说 luogu 上的题解实在是晦涩难懂，我能明白他们在寻找相同深度的点的时候使用 log 可以更快的找到，但是其实可以一层层的向上跳，可能时间复杂度常数上乘个 5 左右的数，但影响不大。（还是自己的代码好懂）<br>\n听说树链剖分也可以做，但这玩意写起来太麻烦了，我高中最快时写一遍也要半个小时（毕竟 100 多行）<br>\n总之，我们求 LCA 时首先找每个节点 2^i 的父亲，然后先将它们跳到相同的深度然后再同时向上跳，注意特判其中一个节点就是 LCA。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ;</span><br><span class=\"line\"></span><br><span class=\"line\">const int maxn = 1000005 ;</span><br><span class=\"line\">int n , m , s ;</span><br><span class=\"line\">int head[maxn] , to[maxn] , nex[maxn] , cnt = 0 ;</span><br><span class=\"line\">int father[maxn][20] , dep[maxn] ;</span><br><span class=\"line\"></span><br><span class=\"line\">void add ( int x , int y ) &#123; nex[++cnt] = head[x] ; head[x] = cnt ; to[cnt] = y ; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void dfs ( int x , int fa , int depth ) &#123;</span><br><span class=\"line\">    father[x][0] = fa ; dep[x] = depth ;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= 19 ; i ++ ) &#123;</span><br><span class=\"line\">        father[x][i] = father[father[x][i-1]][i-1] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = head[x] ; i ; i = nex[i] ) &#123;</span><br><span class=\"line\">        if ( to[i] == fa ) continue ;</span><br><span class=\"line\">        dfs ( to[i] , x , depth + 1 ) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int LCA ( int x , int y ) &#123;</span><br><span class=\"line\">    if ( dep[x] &lt; dep[y] ) swap ( x , y ) ;</span><br><span class=\"line\">    for ( int i = 19 ; i &gt;= 0 ; i -- ) &#123;</span><br><span class=\"line\">        if ( dep[father[x][i]] &gt;= dep[y] ) &#123;</span><br><span class=\"line\">            x = father[x][i] ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ( x == y ) return x ;</span><br><span class=\"line\">    for ( int i = 19 ; i &gt;= 0 ; i -- ) &#123;</span><br><span class=\"line\">        if ( father[x][i] != father[y][i] ) &#123;</span><br><span class=\"line\">            x = father[x][i] , y = father[y][i] ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return father[x][0] ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    scanf ( &quot;%d%d%d&quot; , &amp; n , &amp; m , &amp; s ) ;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt; n ; i ++ ) &#123;</span><br><span class=\"line\">        int x , y ; scanf ( &quot;%d%d&quot; , &amp; x , &amp; y ) ;</span><br><span class=\"line\">        add ( x , y ) ; add ( y , x ) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs ( s , 0 , 1 ) ;</span><br><span class=\"line\">    while ( m -- ) &#123;</span><br><span class=\"line\">        int x , y ; scanf ( &quot;%d%d&quot; , &amp; x , &amp; y ) ;</span><br><span class=\"line\">        printf ( &quot;%d\\n&quot; , LCA ( x , y ) ) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "LCA"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/11/27/%E7%BA%BF%E6%AE%B5%E6%A0%91/",
            "url": "http://amentiraz.github.io/2021/11/27/%E7%BA%BF%E6%AE%B5%E6%A0%91/",
            "title": "线段树",
            "date_published": "2021-11-27T09:12:43.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-fPuxBiZF\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"27846868\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>线段树是一种树状数据结构，它可以区间加减，区间乘除等一系列操作，用于处理那种可以合并状态的数据，在使用其 3 倍左右的空间的代价下使得其修改、查询、求区间和等等操作变得更加快捷。但与此同时，我们无法利用它处理类似于区间最长 01 序列此类问题，而且线段树代码冗长，其实很容易写错（也可能是因为我太菜了）。<br>\n我们将一组数据进行如下处理，每相邻的两个数据有一个父亲节点来记录其总的状态，然后再记录其相邻父节点的总的状态，以此类推，最终得到一个树状结构，我们从上到下依次编号 1-n，这棵树满足父节点 * 2 = 左节点，父节点 * 2+1 = 右节点，设每个父节点代表 l-r 区间的状态，则左区间为 l,(r+l)/2 , 右区间为 (r+l)/2+1,r。根据此性质我们可以对他们进行维护。<br>\n每当我们访问一个节点，我们保证此节点的值一定正确，并尽可能少的改变其子孙节点的值，让时间消耗尽可能的小，同时把 lazy 标记也就是本来应该加的数传递到下一节点。<br>\n第一颗树实现了区间加与查询，第二颗树实现了区间乘法，加法，判断其中的先后顺序，其实也大同小异。<br>\n第三颗树用于实现历史最大值这种操作，然而由于本人电脑跑不动 500mb 的程序，再加之修改起来有点麻烦，就写个大致正确的程序摆在这了。<br>\n如果要继续完善，那么需要记录次大值并对于 spread 函数进行修改，就这样吧，后面再来补。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL ; </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">500005</span> ; </span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">L</span> &#123;</span><br><span class=\"line\">    LL val , add ; </span><br><span class=\"line\">&#125; t[maxn] ; </span><br><span class=\"line\">LL n , m , a[maxn] ; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( l == r ) &#123; t[p].val = a[l] ; <span class=\"keyword\">return</span> ; &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid ) ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r ) ; </span><br><span class=\"line\">    t[p].val = t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">spread</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( t[p].add ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; </span><br><span class=\"line\">        t[p&lt;&lt;<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p].add * ( mid - l + <span class=\"number\">1</span> ) ) , t[p&lt;&lt;<span class=\"number\">1</span>].add += t[p].add ; </span><br><span class=\"line\">        t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p].add * ( r - mid ) ) , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add += t[p].add ; </span><br><span class=\"line\">        t[p].add = <span class=\"number\">0</span> ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , <span class=\"type\">int</span> z )</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; t[p].val += z * ( r - l + <span class=\"number\">1</span> ) ; t[p].add += z ; <span class=\"keyword\">return</span> ; &#125;</span><br><span class=\"line\">   <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">   <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ; </span><br><span class=\"line\">   <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y , z ) ; </span><br><span class=\"line\">   t[p].val = t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ask</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; <span class=\"keyword\">return</span> t[p].val ; &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; LL ans = <span class=\"number\">0</span> ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) ans = ans + <span class=\"built_in\">ask</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) ans = ans + <span class=\"built_in\">ask</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%lld%lld&quot;</span> , &amp; n , &amp; m ) ; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i ++ ) <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , &amp; a[i] ) ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n ) ; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= m ; i ++ ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> com , x , y ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d%d&quot;</span> , &amp; com , &amp; x , &amp; y ) ; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( com == <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">            LL k ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , &amp; k ) ; </span><br><span class=\"line\">            <span class=\"built_in\">change</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y , k ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span> ( <span class=\"string\">&quot;%lld\\n&quot;</span> , <span class=\"built_in\">ask</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y ) ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100003</span> ;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span> <span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch = <span class=\"built_in\">getchar</span> ( ) ; <span class=\"type\">int</span> res = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( ch &gt; <span class=\"string\">&#x27;9&#x27;</span> || ch &lt; <span class=\"string\">&#x27;0&#x27;</span> ) ch = <span class=\"built_in\">getchar</span> ( ) ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span> ) res = res * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span> , ch = <span class=\"built_in\">getchar</span> ( ) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">L</span> &#123;</span><br><span class=\"line\">    ll mul , val , add ;</span><br><span class=\"line\">&#125; t[N&lt;&lt;<span class=\"number\">2</span>] ;</span><br><span class=\"line\"><span class=\"type\">int</span> n , m , a[N] , mod ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    t[p].mul = <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( l == r ) &#123; t[p].val = a[l] ; <span class=\"keyword\">return</span> ; &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid ) ;</span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r ) ;</span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>].val ) % mod ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">spread</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val * t[p].mul + t[p].add * ( mid - l + <span class=\"number\">1</span> ) ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val * t[p].mul + t[p].add * ( r - mid ) ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].mul = ( t[p&lt;&lt;<span class=\"number\">1</span>].mul * t[p].mul ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].mul = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].mul * t[p].mul ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].add = ( t[p&lt;&lt;<span class=\"number\">1</span>].add * t[p].mul + t[p].add ) % mod ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add * t[p].mul + t[p].add ) % mod ;</span><br><span class=\"line\">    t[p].mul = <span class=\"number\">1</span> ; t[p].add = <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change2</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , ll z )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123;</span><br><span class=\"line\">        t[p].mul = ( t[p].mul * z ) % mod ;</span><br><span class=\"line\">        t[p].add = ( t[p].add * z ) % mod ;</span><br><span class=\"line\">        t[p].val = ( t[p].val * z ) % mod ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">spread</span> ( p , l , r ) ;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change2</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change2</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y , z ) ;</span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>].val ) % mod ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change1</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , ll z )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123;</span><br><span class=\"line\">        t[p].add = ( t[p].add + z ) % mod ;</span><br><span class=\"line\">        t[p].val = ( t[p].val + ( r - l + <span class=\"number\">1</span> ) * z ) % mod ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">spread</span> ( p , l , r ) ;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change1</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change1</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span> , r , x , y , z ) ;</span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>].val ) % mod ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">aska</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) <span class=\"keyword\">return</span> t[p].val ;</span><br><span class=\"line\">        <span class=\"built_in\">spread</span> ( p , l , r ) ;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">        ll ans = <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( x &lt;= mid ) ans += <span class=\"built_in\">aska</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( mid &lt; y ) ans += <span class=\"built_in\">aska</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ;</span><br><span class=\"line\">        ans %= mod ;</span><br><span class=\"line\">        t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>].val ) % mod ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span> ( ) ; m = <span class=\"built_in\">read</span> ( ) ; mod = <span class=\"built_in\">read</span> ( ) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i ++ ) <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d&quot;</span> , &amp; a[i] ) ;</span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n ) ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( m -- ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> command = <span class=\"built_in\">read</span> ( ) ; ll x = <span class=\"built_in\">read</span> ( ) , y = <span class=\"built_in\">read</span> ( ) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( command == <span class=\"number\">1</span> ) <span class=\"built_in\">change2</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y , <span class=\"built_in\">read</span> ( ) ) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( command == <span class=\"number\">2</span> ) <span class=\"built_in\">change1</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y , <span class=\"built_in\">read</span> ( ) ) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( command == <span class=\"number\">3</span> ) cout &lt;&lt; <span class=\"built_in\">aska</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , x , y ) &lt;&lt; endl ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ; </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2000006</span> ; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL ; </span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">L</span> &#123;</span><br><span class=\"line\">    LL val , maxa , maxb , add , mina ;</span><br><span class=\"line\">&#125; t[maxn] ;</span><br><span class=\"line\">LL a[maxn&gt;&gt;<span class=\"number\">2</span>] ; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    t[p].mina = <span class=\"number\">0x7fffffff</span> ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( l == r ) &#123; t[p].maxa = t[p].maxb = t[p].val = a[l] ; <span class=\"keyword\">return</span> ; &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid ) ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r ) ; </span><br><span class=\"line\">    t[p].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxa , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa ) ; </span><br><span class=\"line\">    t[p].maxb = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb ) ; </span><br><span class=\"line\">    t[p].val = t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">spread</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"comment\">//这里有一定的问题，需要判断变为最小的影响，需要分类讨论，其余的没有问题（大概）</span></span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].val = <span class=\"built_in\">min</span> ( t[p].mina , ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p].add * ( mid - l + <span class=\"number\">1</span> ) ) ) ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val = <span class=\"built_in\">min</span> ( t[p].mina , ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val + t[p].add * ( r - mid ) ) ) ;</span><br><span class=\"line\">    <span class=\"comment\">//持续到这里</span></span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxa + t[p].add , t[p].mina == <span class=\"number\">0x7fffffff</span> ? <span class=\"number\">0</span> : t[p].mina ) ;</span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa + t[p].add , t[p].mina == <span class=\"number\">0x7fffffff</span> ? <span class=\"number\">0</span> : t[p].mina ) ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].maxb = <span class=\"built_in\">max</span>( t[p&lt;&lt;<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>].maxa ) ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa ) ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].add += t[p].add ; t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add += t[p].add ; </span><br><span class=\"line\">    t[p&lt;&lt;<span class=\"number\">1</span>].mina = <span class=\"built_in\">min</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].mina , t[p].mina ) ; t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].mina = <span class=\"built_in\">min</span> ( t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].mina , t[p].mina ) ; </span><br><span class=\"line\">    t[p].mina = <span class=\"number\">0x7fffffff</span> ; t[p].add = <span class=\"number\">0</span> ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change1</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , LL z )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; </span><br><span class=\"line\">        t[p].maxa += z ; </span><br><span class=\"line\">        t[p].maxb = <span class=\"built_in\">max</span> ( t[p].maxb , t[p].maxa ) ; </span><br><span class=\"line\">        t[p].val = ( t[p].val + z * ( r - l + <span class=\"number\">1</span> ) ) ; </span><br><span class=\"line\">        t[p].add += z ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change1</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change1</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y , z ) ; </span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ) ; </span><br><span class=\"line\">    t[p].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxa , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa ) ;</span><br><span class=\"line\">    t[p].maxb = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb ) ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change2</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y , LL z )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123;</span><br><span class=\"line\">        t[p].val = <span class=\"built_in\">min</span> ( t[p].val , z * ( r - l + <span class=\"number\">1</span> ) ) ; </span><br><span class=\"line\">        t[p].maxa = <span class=\"built_in\">min</span> ( z , t[p].maxa ) ;</span><br><span class=\"line\">        t[p].mina = z ; </span><br><span class=\"line\">        t[p].maxb = <span class=\"built_in\">max</span> ( t[p].maxb , t[p].maxa ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) <span class=\"built_in\">change2</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y , z ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) <span class=\"built_in\">change2</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y , z ) ; </span><br><span class=\"line\">    t[p].val = ( t[p&lt;&lt;<span class=\"number\">1</span>].val + t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val ) ; </span><br><span class=\"line\">    t[p].maxa = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxa , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxa ) ; </span><br><span class=\"line\">    t[p].maxb = <span class=\"built_in\">max</span> ( t[p&lt;&lt;<span class=\"number\">1</span>].maxb , t[p&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxb ) ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ask1</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; <span class=\"keyword\">return</span> t[p].val ; &#125;  </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; LL ans = <span class=\"number\">0</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) ans += <span class=\"built_in\">ask1</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) ans += <span class=\"built_in\">ask1</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ask2</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; <span class=\"keyword\">return</span> t[p].maxa ; &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; LL ans = <span class=\"number\">0x7fffffff</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) ans = <span class=\"built_in\">min</span> ( ans , <span class=\"built_in\">ask2</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ) ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) ans = <span class=\"built_in\">min</span> ( ans , <span class=\"built_in\">ask2</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ) ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ask3</span> <span class=\"params\">( <span class=\"type\">int</span> p , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> x , <span class=\"type\">int</span> y )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= l &amp;&amp; r &lt;= y ) &#123; <span class=\"keyword\">return</span> t[p].maxb ; &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> mid = ( l + r ) &gt;&gt; <span class=\"number\">1</span> ; LL ans = <span class=\"number\">0x7fffffff</span> ; <span class=\"built_in\">spread</span> ( p , l , r ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( x &lt;= mid ) ans = <span class=\"built_in\">min</span> ( ans , <span class=\"built_in\">ask3</span> ( p &lt;&lt; <span class=\"number\">1</span> , l , mid , x , y ) ) ; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( y &gt; mid ) ans = <span class=\"built_in\">min</span> ( ans , <span class=\"built_in\">ask3</span> ( p &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span> , mid + <span class=\"number\">1</span> , r , x , y ) ) ; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , m ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d&quot;</span> , &amp; n , &amp; m ) ; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i ++ ) <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , &amp; a[i] ) ; </span><br><span class=\"line\">    <span class=\"built_in\">build</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n ) ; </span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( m -- ) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d&quot;</span> , &amp; op ) ; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( op == <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; LL k ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d%lld&quot;</span> , &amp; l , &amp; r , &amp; k ) ; </span><br><span class=\"line\">            <span class=\"built_in\">change1</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r , k ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( op == <span class=\"number\">2</span> ) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; LL k ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d%lld&quot;</span> , &amp; l , &amp; r , &amp; k ) ; </span><br><span class=\"line\">            <span class=\"built_in\">change2</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r , k ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( op == <span class=\"number\">3</span> ) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d&quot;</span> , &amp; l , &amp; r ) ; </span><br><span class=\"line\">            <span class=\"built_in\">printf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , <span class=\"built_in\">ask1</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r ) ) ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( op == <span class=\"number\">4</span> ) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d&quot;</span> , &amp; l , &amp; r ) ;    </span><br><span class=\"line\">            <span class=\"built_in\">printf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , <span class=\"built_in\">ask2</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r ) ) ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l , r ; <span class=\"built_in\">scanf</span> ( <span class=\"string\">&quot;%d%d&quot;</span> , &amp; l , &amp; r ) ;    </span><br><span class=\"line\">            <span class=\"built_in\">printf</span> ( <span class=\"string\">&quot;%lld&quot;</span> , <span class=\"built_in\">ask3</span> ( <span class=\"number\">1</span> , <span class=\"number\">1</span> , n , l , r ) ) ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "线段树"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/11/27/Dijkstra/",
            "url": "http://amentiraz.github.io/2021/11/27/Dijkstra/",
            "title": "Dijkstra",
            "date_published": "2021-11-27T07:44:01.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-BpvTOYAt\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1345488418\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>Dijkstra 算法用于解决单源最短路问题，假设起始点为 S，在最开始我们可以知道 S 到某些点的距离，从中取出最小的一个，我们可以保证在我们取出这个最小值的时候不可能有任何路径可以更短的到达此点，，此过程使用了贪心的思想。每当我们找出一个这样的点就更新 S 到与此点相连的其它点的距离，我们每一次取点都保证取出的是最短的且未被访问的点，这就是 Dijkstra 算法。</p>\n<span id=\"more\"></span>\n<p>网上对于 Dijkstra 的优缺点有很好的描述我就直接引用了：</p>\n<blockquote>\n<p>优点：O (N*N), 加堆优化：O (N*logN)<br>\n 缺点：在单源最短路径问题的某些实例中，可能存在权为负的边。<br>\n如果图 G＝（V，E）不包含从源 s 可达的负权回路，<br>\n则对所有 v∈V，最短路径的权定义 d (s,v) 依然正确，<br>\n即使它是一个负值也是如此。但如果存在一从 s 可达的负回路，<br>\n最短路径的权的定义就不能成立。S 到该回路上的结点就不存在最短路径。<br>\n当有向图中出现负权时，则 Dijkstra 算法失效。当不存在源 s 可达的负回路时，<br>\n我们可用 Bellman-Ford 算法实现。<br>\n————————————————<br>\n 版权声明：本文为 CSDN 博主「Chandery」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>\n原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkeTEyMDY0NzM2MDEvYXJ0aWNsZS9kZXRhaWxzLzUyNjQ4NjE5\">https://blog.csdn.net/cdy1206473601/article/details/52648619</span></p>\n</blockquote>\n<p>下面贴上我年轻时写的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;queue&gt;</span><br><span class=\"line\">#include&lt;vector&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ; </span><br><span class=\"line\"></span><br><span class=\"line\">const int maxn = 5000000 ;</span><br><span class=\"line\">int head[maxn] , nex[maxn] , to[maxn] , val[maxn] , cnt = 0 ; </span><br><span class=\"line\">int vis[maxn] , dis[maxn] ; </span><br><span class=\"line\">struct L &#123;</span><br><span class=\"line\">    int val , id ; </span><br><span class=\"line\">    bool operator &lt; ( const L &amp; x ) const &#123;</span><br><span class=\"line\">        return val &gt; x.val ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; ; </span><br><span class=\"line\"></span><br><span class=\"line\">void add ( int x , int y , int z ) &#123; nex[++cnt] = head[x] ; head[x] = cnt ; to[cnt] = y ; val[cnt] = z ; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">void dijkstra ( int s ) &#123; </span><br><span class=\"line\">    priority_queue &lt; L &gt; Q ; Q.push ( ( L ) &#123; 0 , s &#125; ) ; dis[s] = 0 ; </span><br><span class=\"line\">    while ( ! Q.empty ( ) ) &#123;</span><br><span class=\"line\">        L u = Q.top ( ) ; int x = u.id ; Q.pop ( ) ; </span><br><span class=\"line\">        if ( vis[x] ) continue ; vis[x] = 1 ; </span><br><span class=\"line\">        for ( int i = head[x] ; i ; i = nex[i] ) &#123; </span><br><span class=\"line\">            if ( dis[to[i]] &gt; dis[x] + val[i] ) &#123;</span><br><span class=\"line\">                dis[to[i]] = dis[x] + val[i] ; </span><br><span class=\"line\">                if ( ! vis[to[i]] ) Q.push ( ( L ) &#123; dis[to[i]] , to[i] &#125; ) ; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    int n , m , s ; scanf ( &quot;%d%d%d&quot; , &amp; n , &amp; m , &amp; s ) ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= m ; i ++ ) &#123;</span><br><span class=\"line\">        int x , y , z ; scanf ( &quot;%d%d%d&quot; , &amp; x , &amp; y , &amp; z ) ; </span><br><span class=\"line\">        add ( x , y , z ) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) dis[i] = 0x7fffffff ; </span><br><span class=\"line\">    dijkstra ( s ) ; </span><br><span class=\"line\">    for ( int i = 1 ; i &lt;= n ; i ++ ) printf ( &quot;%d &quot; , dis[i] ) ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "Dijkstra"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/11/22/%E7%BB%93%E6%9E%84/",
            "url": "http://amentiraz.github.io/2021/11/22/%E7%BB%93%E6%9E%84/",
            "title": "结构",
            "date_published": "2021-11-22T13:02:31.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-TxVuxMvi\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"29393038\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<h3 id=\"结构的基本知识\"><a class=\"markdownIt-Anchor\" href=\"#结构的基本知识\">#</a> 结构的基本知识</h3>\n<p>结构是一个或者多个变量的几何，这些变量可能为不同的类型，为了处理的方便而将这些变量组织在一个名字之下。<br>\n结构可以拷贝、赋值、传递给函数，函数也可以返回结构类型的返回值，在 ANSI 标准中，自动结构和数组现在也可以进行初始化。</p>\n<span id=\"more\"></span>\n<p>我们首先来看一个关于平面坐标的结构体</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct point &#123;</span><br><span class=\"line\">    int x , y ; </span><br><span class=\"line\">&#125; ; </span><br></pre></td></tr></table></figure>\n<p>关键字 struct 引入结构声明。结构声明由包含在花括号内的一系列声明组成。关键字 struct 后面的名字是可选的，称为<em>结构标记</em>（这里是 point）。<br>\n结构标记用于为结构命名，在定义之后，结构标记就代表花括号内的声明，可以用它作为该声明的简写形式。<br>\n结构中定义的变量称为<em>成员</em>。结构成员，结构标记和普通变量（即非成员）可以采用相同的名字，它们之间不会冲突，因为通过上下文分析总可以对它们进行区分。不同结构中的成员也可以使用相同的名字。<br>\nstruct 声明定义了一种数据类型，在标志结构成员表结束的右花括号之后可以跟一个变量表，这与其它基本类型的变量声明是相同的。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct &#123; ... &#125; x , y , z ; </span><br></pre></td></tr></table></figure>\n<p>从语法角度来说，这种声明与声明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int x , y , z ; </span><br></pre></td></tr></table></figure>\n<p>具有类似的意义。如果结构声明的后面不带变量表，则不需要为它分配存储空间，它仅仅描述了一个结构的模版。但是，如果结构声明中带有标记，那么在以后定义结构实例时便可以使用该标记定义。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct point maxpt = &#123; 320 , 200 &#125; ; </span><br></pre></td></tr></table></figure>\n<p>定义了一个 struct point 类型的变量 pt。结构的初始化可以在定义的后面使用初值表进行，除指标中同每个成员对应的处置必须是常量表达式。<br>\n自动结构也可以通过赋值初始化，还可以通过调用返回相应类型结构中的成员。<br>\n在表达式中可以通过下列形式引用某哥特定结构中的成员：<br>\n结构名。成员<br>\n结构可以嵌套，例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct rect &#123; </span><br><span class=\"line\">    struct point pt1 ; </span><br><span class=\"line\">    struct point pt2 ; </span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\">struct rec screen ; </span><br></pre></td></tr></table></figure>\n<p>我们可以使用语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">screen.pt1.x ; </span><br></pre></td></tr></table></figure>\n<h3 id=\"结构与函数\"><a class=\"markdownIt-Anchor\" href=\"#结构与函数\">#</a> 结构与函数</h3>\n<p>结构的合法操作只有：</p>\n<ol>\n<li>作为一个整体赋值</li>\n<li>通过 &amp; 运算符取地址，访问其成员。</li>\n</ol>\n<p>其中复制和复制包括向函数传递参数以及从函数返回值。结构之间不可以进行比较。<br>\n可以用一个常量成员值列表初始化结构，自动结构也可以通过赋值进行初始化。<br>\n我们可以通过至少 3 种方法传递结构：</p>\n<ol>\n<li>分别传递各个结构成员</li>\n<li>传递整个结构</li>\n<li>传递指向结构的指针</li>\n</ol>\n<p>例如以下函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct point makepoint ( int x , int y ) &#123;</span><br><span class=\"line\">    struct point temp ; </span><br><span class=\"line\">    temp.x = x ; temp.y = y ; </span><br><span class=\"line\">    return temp ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">struct rect screen ; </span><br><span class=\"line\">struct point middle ; </span><br><span class=\"line\">struct point makepoint ( int , int ) ; </span><br><span class=\"line\">screen.pt1 = makepoint ( 0 , 0 ) ; </span><br><span class=\"line\">screen.pt2 = makepoint ( XMAX , YMAX ) ; </span><br><span class=\"line\">middle = makepoint ( ( screen.pt1.x + screen.pt2.x ) &gt;&gt; 1 , ( screen.pt1.y + screen.pt2.y ) &gt;&gt; 1 ) ; </span><br><span class=\"line\"></span><br><span class=\"line\">struct point addpoint ( struct point p1 , struct point p2 ) &#123; </span><br><span class=\"line\">    p1.x += p2.x ; </span><br><span class=\"line\">    p1.y += p2.y ; </span><br><span class=\"line\">    return p1 ; </span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n<p>addpoint 函数的参数和返回值都是结构类型，结构类型的参数和其它参数是一样的都是通过值传递的。</p>\n<p>如果传递给函数的结构很大，使用指针方式的效率通常比赋值整个结构的效率更高，结构指针类似于普通变量指针。声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct point * pp ; </span><br></pre></td></tr></table></figure>\n<p>如果 pp 指向一个 point 结构，那么 * pp 即为该结构，而（ * pp ).x 和 (* pp).y 则是结构成员。其中 ( * pp ).x 的圆括号是必须的，因为结构成员运算符 &quot;.“的优先级比”*&quot; 的优先级高。表达式 * pp.x 的含义等价于 *(pp.x)，因为 x 不是指针，所以该表达式是非法的。<br>\n结构指针的使用频率非常高，为了使用方便，C 语言提供了另一种简写方式。嘉定 p 是一个指向结构的指针，可以用<br>\n p-&gt; 结构成员<br>\n这种形式来引用相应的结构成员。<br>\n运算符。和 -&gt; 都是从左至右结合的，所以以下声明都是等价的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct rec r , * rp = &amp; r ; </span><br><span class=\"line\"></span><br><span class=\"line\">r.pt1.x </span><br><span class=\"line\">rp-&gt;pt1.x </span><br><span class=\"line\">(r.pt1).x </span><br><span class=\"line\">(rp-&gt;pt1).x</span><br></pre></td></tr></table></figure>\n<p>在所有运算符中，下面 4 个运算符的优先级最高：结构运算符 “.” 和 “-&gt;”、用于函数<br>\n调用的 “()” 以及用于下标的 “[]”，因此，它们同操作数之间的结合也最紧密。例如，对于<br>\n结构声明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct &#123; </span><br><span class=\"line\">    int len; </span><br><span class=\"line\">    char *str; </span><br><span class=\"line\">&#125; *p ;</span><br></pre></td></tr></table></figure>\n<p>表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">++p-&gt;len</span><br></pre></td></tr></table></figure>\n<p>将增加 len 的值，而不是增加 p 的值，这是田为，其中的隐含括号关系是 ++(p-&gt;len)。可 以使用括号改变结合次序。例如：(<ins>p)-&gt;len 将先执行 p 的加 1 操作，再对 len 执行操作； 而 (p</ins>)-&gt;len 则先对 len 执行操作，然后再将 p 加 1（该表达式中的括号可以省略）。 同样的道理，*p-&gt;str 读取的是指针 str 所指向的对象的值；*p-&gt;str<ins> 先读取指针 str 指向的对象的值，然后再将 str 加 1（与 * s</ins> 相同）；(*p-&gt;str）<ins>将指针 str 指向 的对象的值加 1；*p</ins>-&gt;str 先读取指针 str 指向的对象的值，然后再将 p 加 1。</p>\n<h3 id=\"结构数组\"><a class=\"markdownIt-Anchor\" href=\"#结构数组\">#</a> 结构数组</h3>\n<p>考虑编写一个程序，用来统计输入中各个 C 语言关键字出现的次数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct key &#123;</span><br><span class=\"line\">    char *word;</span><br><span class=\"line\">    int count;</span><br><span class=\"line\">&#125; keytab[] = &#123;</span><br><span class=\"line\">    &quot;auto&quot;, 0,</span><br><span class=\"line\">    &quot;break&quot;, 0,</span><br><span class=\"line\">    &quot;case&quot;, 0,</span><br><span class=\"line\">    &quot;char&quot;, 0,</span><br><span class=\"line\">    &quot;const&quot;, 0,</span><br><span class=\"line\">    &quot;continue&quot;, 0,</span><br><span class=\"line\">    &quot;default&quot;, 0,</span><br><span class=\"line\">    /* ... */</span><br><span class=\"line\">    &quot;unsigned&quot;, 0,</span><br><span class=\"line\">    &quot;void&quot;, 0,</span><br><span class=\"line\">    &quot;volatile&quot;, 0,</span><br><span class=\"line\">    &quot;while&quot;, 0</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>与结构成员相对应，初值也要按照成对的方式列出。更精确的做法是，将每一行（即每个结<br>\n构）的初值都括在花括号内，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;auto&quot;, 0 &#125;, </span><br><span class=\"line\">&#123; &quot;break&quot;, 0 &#125;, </span><br><span class=\"line\">&#123; &quot;case&quot;, 0 &#125;, </span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>但是，如果初值是简单变量或字符串，并且其中的任何值都不为空，则内层的花括号可以省 略。通常情况下，如果初值存在并且方括号 [ ] 中没有数值，编译程序将计算数组 keytab 中 的项数。<br>\n在统计关键字出现次数的程序中，我们首先定义了 keytab。主程序反复调用函数 getword 读取输入，每次读取一个单词。每个单词将通过折半查找函数在 keytab 中进行查找。注意，关键字列表必须按升序存储在 keytab 中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;ctype.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#define MAXWORD 100</span><br><span class=\"line\">int getword(char *, int);</span><br><span class=\"line\">int binsearch(char *, struct key *, int);</span><br><span class=\"line\">/* count C keywords */</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    char word[MAXWORD];</span><br><span class=\"line\">    while (getword(word, MAXWORD) != EOF)</span><br><span class=\"line\">        if (isalpha(word[0]))</span><br><span class=\"line\">              if ((n = binsearch(word, keytab, NKEYS)) &gt;= 0)</span><br><span class=\"line\">                    keytab[n].count++;</span><br><span class=\"line\">    for (n = 0; n &lt; NKEYS; n++)</span><br><span class=\"line\">        if (keytab[n].count &gt; 0)</span><br><span class=\"line\">            printf(&quot;%4d %s\\n&quot;,</span><br><span class=\"line\">                keytab[n].count, keytab[n].word);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* binsearch: find word in tab[0]...tab[n-1] */</span><br><span class=\"line\">int binsearch(char *word, struct key tab[], int n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int cond;</span><br><span class=\"line\">    int low, high, mid;</span><br><span class=\"line\">    low = 0;</span><br><span class=\"line\">    high = n - 1;</span><br><span class=\"line\">    while (low &lt;= high) &#123;</span><br><span class=\"line\">        mid = (low+high) / 2;</span><br><span class=\"line\">        if ((cond = strcmp(word, tab[mid].word)) &lt; 0)</span><br><span class=\"line\">            high = mid - 1;</span><br><span class=\"line\">        else if (cond &gt; 0)</span><br><span class=\"line\">            low = mid + 1;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            return mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int getword ( char * word , int lim ) &#123;</span><br><span class=\"line\">    int c , getch ( void ) ; </span><br><span class=\"line\">    void ungetch ( int ) ; </span><br><span class=\"line\">    char * w = word ; </span><br><span class=\"line\">    while ( isspace ( c = getch ( ) ) ) ; </span><br><span class=\"line\">    if ( c != EOF ) * w ++ ; </span><br><span class=\"line\">    if ( ! isalpha ( c ) ) &#123; * w = &#x27;\\0&#x27; ; return c ; &#125; </span><br><span class=\"line\">    for ( ; -- lim &gt; 0 ; w ++ ) </span><br><span class=\"line\">        if ( ! isnum ( * w = getch ( ) ) ) &#123;</span><br><span class=\"line\">            ungetch ( * w ) ; break ; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    * w = &#x27;\\0&#x27; ; </span><br><span class=\"line\">    return word[0] ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*我们可以通过如下方法计算NKEYS的值*/</span><br><span class=\"line\">#define NKEYS ( sizeof keytab / sizeof ( struct key ) ) </span><br><span class=\"line\">#define NKEYS ( sizeof keytab / sizeof keytab[0] ) </span><br></pre></td></tr></table></figure>\n<p>getchar 函数的返回值也是 int 类型的</p>\n<h3 id=\"指向结构的指针\"><a class=\"markdownIt-Anchor\" href=\"#指向结构的指针\">#</a> 指向结构的指针</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;ctype.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">#define MAXWORD 100 </span><br><span class=\"line\">int getword(char *, int); </span><br><span class=\"line\">struct key *binsearch(char *, struct key *, int); </span><br><span class=\"line\">/* count C keywords; pointer version */ </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    char word[MAXWORD]; </span><br><span class=\"line\">    struct key *p; </span><br><span class=\"line\">    while (getword(word, MAXWORD) != EOF) </span><br><span class=\"line\">        if (isalpha(word[0])) </span><br><span class=\"line\">            if ((p=binsearch(word, keytab, NKEYS)) != NULL) </span><br><span class=\"line\">                p-&gt;count++; </span><br><span class=\"line\">    for (p = keytab; p &lt; keytab + NKEYS; p++) </span><br><span class=\"line\">        if (p-&gt;count &gt; 0) </span><br><span class=\"line\">            printf(&quot;%4d %s\\n&quot;, p-&gt;count, p-&gt;word); </span><br><span class=\"line\">    return 0; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">/* binsearch: find word in tab[0]...tab[n-1] */ </span><br><span class=\"line\">struct key *binsearch(char *word, struck key *tab, int n) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    int cond; </span><br><span class=\"line\">    struct key *low = &amp;tab[0]; </span><br><span class=\"line\">    struct key *high = &amp;tab[n]; </span><br><span class=\"line\">    struct key *mid; </span><br><span class=\"line\">    while (low &lt; high) &#123; </span><br><span class=\"line\">        mid = low + (high-low) / 2; </span><br><span class=\"line\">        if ((cond = strcmp(word, mid-&gt;word)) &lt; 0) </span><br><span class=\"line\">            high = mid; </span><br><span class=\"line\">        else if (cond &gt; 0) </span><br><span class=\"line\">            low = mid + 1; </span><br><span class=\"line\">        else </span><br><span class=\"line\">            return mid; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    return NULL; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一个部分比较简单，就不细写了，上面的程序等于是改写了一下。搜索函数里面的 while 循环是为了防止死循环写的，当 high==low 的时候，如果没有 low&lt;high 这个条件会一直死循环下去。<br>\n特别需要注意的是千万不要认为结构的长度等于各成员长度的和。因为不同的对象有不同的对齐要 求，所以，结构中可能会出现未命名的 “空穴 “（hole）。例如，假设 char 类型占用一个字节，int 类型占用 4 个字节，则下列结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct &#123; </span><br><span class=\"line\">    char c; </span><br><span class=\"line\">    int i; </span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n<p>可能需要 8 个字节的存储空间，而不是 5 个字节。使用 sizeof 运算符可以返回正确的对象<br>\n长度。</p>\n<h3 id=\"自引用结构\"><a class=\"markdownIt-Anchor\" href=\"#自引用结构\">#</a> 自引用结构</h3>\n<p>假定我们需要处理一个更一般化的问题：统计输入中所有单词的出现次数。因为预先不 知道出现的单词列表，所以无法方便地排序，并使用折半查找；也不能分别对输入中的每个单词都执行一次线性查找，看它在前面是否已经出现，这样做，程序的执行将花费太长的时 间。（更准确地说，程序的执行时间是与输入单词数目的二次方成比例的。）我们该如何组织这些数据，才能够有效地处理一系列任意的单词呢？<br>\n一种解决方法是，在读取输入中任意单词的同时，就将它放置到正确的位置，从而始终 保证所有单词是按顺序排列的。虽然这可以不用通过在线性数组中移动单词来实现，但它仍 然会导致程序执行的时间过长。我们可以使用一种称为二叉树的数据结构来取而代之。 每个不同的单词在树中都是一个节点，每个节点包含：</p>\n<ol>\n<li>一个指向该单词内容的指针</li>\n<li>一个统计出现次数的计数值・一个指向左子树的指针</li>\n<li>一个指向右子树的指针<br>\n任何节点最多拥有两个子树，也可能只有一个子树或一个都没有。 对节点的所有操作要保证，任何节点的左子树只包含按字典序小于该节点中单词的那些单词，右子树只包含按字典序大于该节点中单词的那些单词。要查找一个新单词是否已经在树中，可以从根节点开始，比较新单词与该节点中的单词。若 匹配，则得到肯定的答案。若新单词小于该节点中的单词，则在左子树中继续查找，否则在 右子树中查找。如在搜寻方向上无子树，则说明新单词不在树中，并且，当前的空位置就是 存放新加入单词的正确位置。因为从任意节点出发的查找都要按照同样的方式查找它的一个子树，所以该过程是递归的。相应地，在插入和打印操作中使用递归过程也是很自然的事情。<br>\n对节点的递归的：</li>\n</ol>\n",
            "tags": [
                "C语言",
                "结构"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/11/04/%E6%8C%87%E9%92%88/",
            "url": "http://amentiraz.github.io/2021/11/04/%E6%8C%87%E9%92%88/",
            "title": "指针",
            "date_published": "2021-11-04T00:48:35.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-YMkJXQJc\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"447578836\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>指针是一种保存变量地址的变量。在存储时，内存被分为一块一块的。每一块都有一个特有的编号。而这个编号可以暂时理解为指针，就像酒店的门牌号一样。</p>\n<span id=\"more\"></span>\n<h3 id=\"指针与地址\"><a class=\"markdownIt-Anchor\" href=\"#指针与地址\">#</a> 指针与地址</h3>\n<p>一元运算符 &amp; 可用于取一个对象的地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = &amp; c ; </span><br></pre></td></tr></table></figure>\n<p>将把 c 的地址赋值给变量 p，我们称 p 为 “指向” c 的指针。地址运算符 &amp; 只能应用于内存中 的对象，即变量与数组元素。它不能作用于表达式、常量或 register 类型的变量。<br>\n一元运算符 * 是间接寻址或间接引用运算符。当它作用于指针时，将访问指针所指向的对象。下列程序介绍了 &amp; 与 * 的使用方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int x = 1 , y = 2 , z[10] ; </span><br><span class=\"line\">ip = &amp; x ; //表明表达式*ip 的结果是 int 类型。</span><br><span class=\"line\">y = * ip ; </span><br><span class=\"line\">* ip = 0 ; </span><br><span class=\"line\">ip = &amp; z[0] ; </span><br></pre></td></tr></table></figure>\n<p>对函数的声明也可以采用这种方式。<br>\n例如，声明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double *dp，atof(char *); </span><br></pre></td></tr></table></figure>\n<p>表明，在表达式中，*dp 和 atof (s) 的值都是 double 类型，且 atof 的参数是一个指向 char 类型的指针。<br>\n指针只能指向某种特定类型的对象，也就是说，每个指针都必须指向某种特定的数据类型。（一个例外情况是指向 void 类型的指针可以存放指向任何类型的指针，但它不能间接引用其自身。)<br>\n 如果指针 ip 指向整型变量，那么在 x 可以出现的任何上下文中都可以使用 * ip，因此， 语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*ip = *ip + 10; </span><br></pre></td></tr></table></figure>\n<p>将把<em> ip 的值增加 10。 一元运算符</em>和 &amp; 的优先级比算术运算符的优先级高，因此，赋值语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = *ip + 1 </span><br></pre></td></tr></table></figure>\n<p>将把 * ip 指向的对象的值取出并加 1，然后再将结果赋值给 y，而下列赋值语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*ip += 1 </span><br></pre></td></tr></table></figure>\n<p>则将 ip 指向的对象的值加 1，它等同于</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">++*ip </span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*ip)++ </span><br></pre></td></tr></table></figure>\n<p>语句的执行结果。语句 (* ip)<ins> 中的圆括号是必需的，否则，该表达式将对 ip 进行加 1 运算，<br>\n而不是对 ip 指向的对象进行加 1 运算，这是因为，类似于 * 和</ins>这样的一元运算符遵循从右 至左的结合顺序。<br>\n最后说明一点，由于指针也是变量，所以在程序中可以直接使用，而不必通过间接引用<br>\n的方法使用。例如，如果 iq 是另一个指向整型的指针，那么语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iq = ip </span><br></pre></td></tr></table></figure>\n<p>将把 ip 中的值拷贝到 iq 中，这样，指针 iq 也将指向 ip 指向的对象。</p>\n<h3 id=\"指针与指针参数\"><a class=\"markdownIt-Anchor\" href=\"#指针与指针参数\">#</a> 指针与指针参数</h3>\n<p>为了使被调用函数直接修改主调函数中的变量值，我们可以使主调程序将指向所要交换的变量的指针传递给被调用函数，即：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap ( &amp; a , &amp; b ) ; </span><br></pre></td></tr></table></figure>\n<p>由于一元运算符 &amp; 用来取变量的地址，这样 &amp; a 就是一个指向变量 a 的指针。swap 函数的所有参数都声明为指针，并且通过这些指针来间接访问它们所指向的操作数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void swap ( int * px , int * py ) &#123;</span><br><span class=\"line\">    int temp ; </span><br><span class=\"line\">    temp = * px ; </span><br><span class=\"line\">    * px = * py ; </span><br><span class=\"line\">    * py = temp ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>指针参数使得被调用函数能够访问和修改主调函数中对象的值。<br>\n我们来看一个可以接受自由格式输入，并执行转换，并同时返回得到的整数和文件结束标志（EOF）的函数。<br>\n如果你觉得你已经了解了可以不用看下面的代码，直接进入下一节。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int getch ( void ) &#123; return ( bufp &gt; 0 ) ? buf[--bufp] : getchar ( ) ; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void ungetch ( int c ) &#123; </span><br><span class=\"line\">    if ( bufp &gt;= BUFSIZE ) printf ( &quot;ungetch:too many characters\\n&quot; ) ; </span><br><span class=\"line\">    else buf[bufp++] = c ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int getint ( int * pn ) &#123;</span><br><span class=\"line\">    int c , sign ; </span><br><span class=\"line\">    while ( isspace ( c = getch ( ) ) ) ;</span><br><span class=\"line\">    if ( ! isdigit ( c ) &amp;&amp; c != EOF &amp;&amp; c != &#x27;+&#x27; &amp;&amp; c != &#x27;-&#x27; ) &#123;</span><br><span class=\"line\">        ungetch ( c ) ; return 0 ;     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sign = ( c == &#x27;-&#x27; ) ? -1 : 1 ; </span><br><span class=\"line\">    if ( c == &#x27;+&#x27; || c == &#x27;-&#x27; ) c = getch ( ) ; </span><br><span class=\"line\">    for ( * pn = 0 ; isdigit ( c ) ; c = getch ( ) ) </span><br><span class=\"line\">        * pn = 10 * * pn + c - &#x27;0&#x27; ; </span><br><span class=\"line\">    * pn *= sign ; </span><br><span class=\"line\">    if ( c != EOF ) ungetch ( c ) ; </span><br><span class=\"line\">    return c ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 getint 函数中，*pn 始终作为一个普通的整形变量使用。</p>\n<h3 id=\"指针与数组\"><a class=\"markdownIt-Anchor\" href=\"#指针与数组\">#</a> 指针与数组</h3>\n<p>一般来说，用指针编写的程序比用数组下标编写的程序执行速度快，但另一方面，用指针实现的程序理解 起来稍微困难一些。<br>\n声明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[10]; </span><br></pre></td></tr></table></figure>\n<p>定义了一个长度为 10 的数组 a。换句话说，它定义了一个由 10 个对象组成的集合，这 10 个<br>\n对象存储在相邻的内存区域中，名字分别为 a [0]、a [1]、…、a [9]<br>\n 如果 pa 指向数组中的某个特定元素，那么，根据指针运算的定义，pa+1 将指向下一个元素，pa+i 将指向 pa 所指向数组元素之后的第 i 个元素，而 pa-i 将指向 pa 所指向数组元素之前的第 i 个元素。因此，如果指针 pa 指向 a [0]，那么 * (pa+1) 引用的是数组元素 a [1] 的内容，pa+i 是数组元素 a [i] 的地址，* (pa+i) 引用的是数组元素 a [i] 的内容<br>\n无论数组 a 中元素的类型或数组长度是什么，上面的结论都成立。“指针加 1” 就意味着，pa+1 指向 pa 所指向的对象的<strong>下一个对象</strong>。相应地，pa+i 指向 pa 所指向的对象之后的第 i 个对象。<br>\n对数组元素 a [i] 的引用也可以写成 *(a+i) 这种形式。对第一次接触这种写法的人来说， 可能会觉得很奇怪。在计算数组元素 a [i] 的值时，C 语言实际上先将其转换为 *(a+i) 的形<br>\n式，然后再进行求值，因此在程序中这两种形式是等价的。如果对这两种等价的表示形式分 别施加地址运算符 &amp;，便可以得出这样的结论：&amp;a [i] 和 a+i 的含义也是相同的。a+i 是 a<br>\n 之后第 i 个元素的地址。相应地，如果 pa 是个指针，那么，在表达式中也可以在它的后面加 下标。pa [i] 与 *(pa+i) 是等价的。简而言之，一个通过数组和下标实现的表达式可等价地 通过指针和偏移量实现。<br>\n但是，我们必须记住，数组名和指针之间有一个不同之处，指针是一个变量，因此，在 C 语言中，语句 pa=a 和 pa<ins> 都是合法的。但数组名不是变量，因此，类似于 a=pa 和 a</ins> 形式的语句是非法的。<br>\n当把数组名传递给一个函数时，实际上传递的是该数组第一个元索的地址。在被调用函数中，该参数是一个局部变量，因此，数组名参数必须是一个指针，也就是一个存储地址值 的变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*return length of s */</span><br><span class=\"line\">int strlen ( char * s ) &#123;</span><br><span class=\"line\">    int n ; </span><br><span class=\"line\">    for ( n = 0 ; * s != &#x27;\\0&#x27; ; s ++ ) n ++ ; </span><br><span class=\"line\">    return n ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 s++ 运算不会影响到 strlen 函数的调用者中的字符串，它仅对该指针在 strlen 函数中的私有副本进行自增运算。<br>\n以下的函数调用均正确：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strlen ( &quot;hello world&quot; ) ;</span><br><span class=\"line\">char array[100] ; </span><br><span class=\"line\">strlen ( array ) ; </span><br><span class=\"line\">char * ptr ; </span><br><span class=\"line\">strlen ( ptr ) ; </span><br></pre></td></tr></table></figure>\n<p>在函数定义中，形式参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char s[]; </span><br></pre></td></tr></table></figure>\n<p>和</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char *s; </span><br></pre></td></tr></table></figure>\n<p>是等价的。我们通常更习惯于使用后一种形式，因为它比前者更直观地表明了该参数是一个指针。如果将数组名传递给函数，函数可以根据情况判定是按照数组处理还是按照指针处理，随后根据相应的方式操作该参数。为了直观且恰当地描述函数，在函数中甚至可以同时使用数组和指针这两种表示方法。<br>\n也可以将指向子数组起始位置的指针传递给函数，这样，就将数组的一部分传递给了函<br>\n数。例如，如果 a 是一个数组，那么下面两个函数调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(&amp;a[2]) </span><br></pre></td></tr></table></figure>\n<p>与</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(a+2) </span><br></pre></td></tr></table></figure>\n<p>都将把起始于 a [2] 的子数组的地址传递给函数 f。在函数 f 中，参数的声明形式可以为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(int arr[]) &#123; ... &#125; </span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(int *arr) &#123; ... &#125; </span><br></pre></td></tr></table></figure>\n<p>对于函数 f 来说，它并不关心所引用的是否只是一个更大数组的部分元素。 如果确信相应的元素存在，也可以通过下标访问数组第一个元素之前的元素。类似于<br>\n p [-1]、p [-2] 这样的表达式在语法上都是合法的，它们分别引用位于 p [0] 之前的两个元素。<br>\n当然，引用数组边界之外的对象是非法的。</p>\n<h3 id=\"地址算术运算\"><a class=\"markdownIt-Anchor\" href=\"#地址算术运算\">#</a> 地址算术运算</h3>\n<p>下面我们将给出函数 alloc 和 afree，他们分别对标 malloc.h 头文件中的 malloc 函数和 free 函数，只是功能相对于 malloc 和 free 更菜而已。这里就先直接贴代码，看不懂也没关系，继续往下看就行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char * alloc ( int n ) &#123;</span><br><span class=\"line\">    if ( ( allocbuf + ALLOCSIZE - allocp &gt;= n ) ) &#123;</span><br><span class=\"line\">        allocp += n ;</span><br><span class=\"line\">        return allocp - n ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else return 0 ; </span><br><span class=\"line\">    //C语言保证，0永远不是有效的数据地址，因此返回值0可用来表示发生了异常事件</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void afree ( char * p ) &#123;</span><br><span class=\"line\">    if ( p &gt;= allocbuf &amp;&amp; p &lt; allocbuf + ALLOCSIZE ) allocp = p ;</span><br><span class=\"line\">    //对指针进行比较</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先，在某些情况下对指针可以进 行比较运算。例如，如果指针 p 和 q 指向同一个数组的成员，那么它们之间就可以进行类似 于 ==、!=、&lt;、&gt;= 的关系比较运算。如果 p 指向的数组元素的位置在 q 指向的数组元素位置 之前，那么关系表达式<br>\n p &lt; q<br>\n 的值为真。任何指针与 0 进行相等或不等的比较运算都有意义。但是，指向不同数组的元素的指针之间的算术或比较运算没有定义。（这里有一个特例：指针的算术运算中可使用数组最 后一个元素的下一个元素的地址。）<br>\n其次。我们从前面可以看到，指针可以和整数进行相加或相减运算。例如，结构<br>\n p + n<br>\n 表示指针 p 当前指向的对象之后第 n 个对象的地址。无论指针 p 指向的对象是何种类型，上述结论都成立。在计算 p+n 时，n 将根据 p 指向的对象的长度按比例缩放，而 p 指向的对象的长度则取决于 p 的声明。例如，如果 int 类型占 4 个字节的存储空间，那么在 int 类型的计算中，对应的 n 将按 4 的倍数来计算。指针的减法运算也是有意义的：如果 p 和 q 指向相同数组中的元索，且 p&lt;q，那么 q-p+1 就是位于 p 和 q 指向的元索之间的元素的数目。我们由此可以编写出函数 strlen 的另一个<br>\n版本，如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int strlen ( char * s ) &#123;</span><br><span class=\"line\">    char * p = s ; </span><br><span class=\"line\">    while ( * p != &#x27;\\0&#x27; ) p ++ ; </span><br><span class=\"line\">    return p - s ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符指针与函数\"><a class=\"markdownIt-Anchor\" href=\"#字符指针与函数\">#</a> 字符指针与函数</h3>\n<p>字符串常量是一个字符数组，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;I am a string&quot; </span><br></pre></td></tr></table></figure>\n<p>在字符串的内部表示中，字符数组以空字符’\\0’结尾，所以，程序可以通过检查空字符找到 字符数组的结尾。字符串常量占据的存储单元数也因此比双引号内的字符数大 1。<br>\n字符串常量最常见的用法也许是作为函数参数，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">princf(&quot;hello, world\\n&quot;&#125;; </span><br></pre></td></tr></table></figure>\n<p>当类似于这样的一个字符串出现在程序中时，实际上是通过字符指针访问该字符串的。在上<br>\n述语句中，printf 接受的是一个指向字符数组第一个字符的指针。也就是说，字符串常量可 通过一个指向其第一个元素的指针访问。<br>\n除了作为函数参数以外，字符串常量还有其它的用法。例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char *pmessage ; </span><br><span class=\"line\">pmessage = &quot;now is the time&quot; ; </span><br></pre></td></tr></table></figure>\n<p>此操作把一个指向该字符数组的指针赋值给 pmessage。该过程并没有进行字符串的复制，而只 是涉及到指针的操作。C 语言没有提供将整个字符串作为一个整体进行处理的运算符。<br>\n下面两个定义之间有很大的差别：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char amessage[] = &quot;nw is the time&quot;; /* 定义一个数组 */ </span><br><span class=\"line\">char *pmessage = &quot;now is the time&quot;; /* 定义一个指针 */ </span><br></pre></td></tr></table></figure>\n<p>上述声明中，amessage 是一个仅仅足以存放初始化字符串以及空字符’\\0’的一维数组。数组中的单个字符可以进行修改，但 amessage 始终指向同一个存储位置。另一方面，pmessage 是一个指针，其初值指向一个字符串常量，之后它可以被修改以指向其它地址，但如果试图 修改字符串的内容，结果是没有定义的<br>\n掌握了上面的知识，我们现在可以理解下面的程序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void strcpy ( char * s , char * t ) while ( * s ++ = * t ++ ) ; </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int strcmp ( char * s , char * t ) &#123;</span><br><span class=\"line\">    for ( ; * s == * t ; s ++ , t ++ ) if ( * s == &#x27;\\0&#x27; ) return 0 ; </span><br><span class=\"line\">    return * s - * t ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组指针与指向指针的指针\"><a class=\"markdownIt-Anchor\" href=\"#数组指针与指向指针的指针\">#</a> 数组指针与指向指针的指针</h3>\n<p>下面是一个运用快速排序来实现字符串排序的程序，qsort 部分可自行使用快排实现，我自己想了想也可以用普通的 sort + 结构体实现，或许会更好点，这里就不展开了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">#define MAXLINES 5000 /* max #lines to be sorted */ </span><br><span class=\"line\">char *lineptr[MAXLINES]; /* pointers to text lines */ </span><br><span class=\"line\">int readlines(char *lineptr[], int nlines); </span><br><span class=\"line\">void writelines(char *lineptr[], int nlines); </span><br><span class=\"line\">void qsort(char *lineptr[], int left, int right); </span><br><span class=\"line\">/* sort input lines */ </span><br><span class=\"line\">main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    int nlines; /* number of input lines read */ </span><br><span class=\"line\">    if ((nlines = readlines(lineptr, MAXLINES)) &gt;= 0) &#123; </span><br><span class=\"line\">        qsort(lineptr, 0, nlines-1); </span><br><span class=\"line\">        writelines(lineptr, nlines); </span><br><span class=\"line\">        return 0; </span><br><span class=\"line\">    &#125; else &#123; </span><br><span class=\"line\">        printf(&quot;error: input too big to sort\\n&quot;); </span><br><span class=\"line\">        return 1; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">    #define MAXLEN 1000 /* max length of any input line */ </span><br><span class=\"line\">    int getline(char *, int); </span><br><span class=\"line\">    char *alloc(int); </span><br><span class=\"line\">/* readlines: read input lines */ </span><br><span class=\"line\">int readlines(char *lineptr[], int maxlines) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    int len, nlines; </span><br><span class=\"line\">    char *p, line[MAXLEN]; </span><br><span class=\"line\">    nlines = 0; </span><br><span class=\"line\">    while ((len = getline(line, MAXLEN)) &gt; 0) </span><br><span class=\"line\">        if (nlines &gt;= maxlines || p = alloc(len) == NULL) </span><br><span class=\"line\">            return -1; </span><br><span class=\"line\">        else &#123; </span><br><span class=\"line\">            line[len-1] = &#x27;\\0&#x27;; /* delete newline */ </span><br><span class=\"line\">            strcpy(p, line); </span><br><span class=\"line\">            lineptr[nlines++] = p; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    return nlines; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">/* writelines: write output lines */ </span><br><span class=\"line\">void writelines(char *lineptr[], int nlines) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    int i; </span><br><span class=\"line\">    for (i = 0; i &lt; nlines; i++) </span><br><span class=\"line\">        printf(&quot;%s\\n&quot;, lineptr[i]); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void qsort(char *v[], int left, int right) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    int i, last; </span><br><span class=\"line\">    void swap(char *v[], int i, int j); </span><br><span class=\"line\">    if (left &gt;= right) /* do nothing if array contains */ </span><br><span class=\"line\">        return; /* fewer than two elements */ </span><br><span class=\"line\">    swap(v, left, (left + right)/2); </span><br><span class=\"line\">    last = left; </span><br><span class=\"line\">    for (i = left+1; i &lt;= right; i++) </span><br><span class=\"line\">        if (strcmp(v[i], v[left]) &lt; 0) </span><br><span class=\"line\">            swap(v, ++last, i); </span><br><span class=\"line\">        swap(v, left, last); </span><br><span class=\"line\">        qsort(v, left, last-1); </span><br><span class=\"line\">        qsort(v, last+1, right); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* swap: interchange v[i] and v[j] */ </span><br><span class=\"line\">void swap(char *v[], int i, int j) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    char *temp; </span><br><span class=\"line\">    temp = v[i]; </span><br><span class=\"line\">    v[i] = v[j]; </span><br><span class=\"line\">    v[j] = temp; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在该例子中，指针数组 lineptr 的声明是新出现的重要概念：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char *lineptr[MAXLINES]; </span><br></pre></td></tr></table></figure>\n<p>它表示 lineptr 是一个具有 MAXLINES 个元素的一维数组，其中数组的每个元素是一个指向字符类型对象的指针。也就是说，lineptr [i] 是一个字符指针，而 * lineptr [i] 是该指针指向的第 i 个文本行的首字符。 由于 lineptr 本身是一个数组名，因此，可按照前面例子中相同的方法将其作为指针使用，这样，writelines 函数可以改写为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* writelines: write output lines */ </span><br><span class=\"line\">void writelines(char *lineptr[], int nlines) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    while (nlines-- &gt; 0) </span><br><span class=\"line\">        printf(&quot;%s\\n&quot;, *lineptr++); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（注意这里的数组变量 lineptr 可以改变值）<br>\n循环开始执行时，*lineptr 指向第一行，每执行一次自增运算都使得 lineptr 指向下 一行，同时对 nlines 进行自减运算。</p>\n<h3 id=\"多维数组\"><a class=\"markdownIt-Anchor\" href=\"#多维数组\">#</a> 多维数组</h3>\n<p>如果将二维数组作为参数传递给函数，那么在函数的参数声明中必须指明数组的列数。<br>\n数组的行数没有太大关系，因为前面已经讲过，函数调用时传递的是一个指针，它指向由行 向量构成的一维数组，其中每个行向量是具有 13 个整型元素的一维数组。在该例子中，传递 给函数的是一个指向很多对象的指针，其中每个对象是由 13 个整型元素构成的一维数组。因 此，如果将数组 daytab 作为参数传递给函数 f，那么 f 的声明应该写成下列形式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(int daytab[2][13]) &#123; ... &#125; </span><br></pre></td></tr></table></figure>\n<p>也可以写成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(int daytab[][13]) &#123; ... &#125; </span><br></pre></td></tr></table></figure>\n<p>因为数组的行数无关紧要，所以，该声明还可以写成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(int (*daytab)[13]) &#123; ... &#125; </span><br></pre></td></tr></table></figure>\n<p>这种声明形式表明参数是一个指针，它指向具有 13 个整型元素的一维数组。因为方括号 [] 的<br>\n优先级高于 * 的优先级，所以上述声明中必须使用圆括号。如果去掉括号，则声明变成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int *daytab[13] </span><br></pre></td></tr></table></figure>\n<p>这相当于声明了一个数组，该数组有 13 个元素，其中每个元素都是一个指向整型对象的指针。<br>\n一般来说，除数组的第一维（下标）可以不指定大小外，其余各维都必须明确指定大小。</p>\n<h3 id=\"指针数组的初始化\"><a class=\"markdownIt-Anchor\" href=\"#指针数组的初始化\">#</a> 指针数组的初始化</h3>\n<p>考虑这样一个问题：编写一个函数 month_name (n)，它返回一个指向第 n 个月名字的 字符串的指针。这是内部 static 类型数组的一种理想的应用。month_name 函数中包含一 个私有的字符串数组，当它被调用时，返回一个指向正确元素的指针。本节将说明如何初始<br>\n化该名字数组。<br>\n指针数组的初始化语法和前面所讲的其它类型对象的初始化语法类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* month_name: return name of n-th month */ </span><br><span class=\"line\">char *month_name(int n) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    static char *name[] = &#123; </span><br><span class=\"line\">        &quot;Illegal month&quot;, </span><br><span class=\"line\">        &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, </span><br><span class=\"line\">        &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, </span><br><span class=\"line\">        &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, </span><br><span class=\"line\">        &quot;October&quot;, &quot;November&quot;, &quot;December&quot; </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return name ; </span><br></pre></td></tr></table></figure>\n<p>其中，name 的声明与排序例子中 lineptr 的声明相同，是一个一维数组，数组的元素为字 符指针。name 数组的初始化通过一个字符串列表实现，列表中的每个字符串赋值给数组相应 位置的元素。第 i 个字符串的所有字符存储在存储器中的某个位置，指向它的指针存储在 name [i] 中。由于上述声明中没有指明 name 的长度，因此，编译器编译时将对初值个数进 行统计，并将这一准确数字填入数组的长度。</p>\n<h3 id=\"指针与多维数组\"><a class=\"markdownIt-Anchor\" href=\"#指针与多维数组\">#</a> 指针与多维数组</h3>\n<p>对于 C 语言的初学者来说，很容易混淆二维数组与指针数组之间的区别，比如上面例子 中的 name。假如有下面两个定义：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[10][20]; </span><br><span class=\"line\">int \\*b[10]; </span><br></pre></td></tr></table></figure>\n<p>那么，从语法角度讲，a [3][4] 和 b [3][4] 都是对一个 int 对象的合法引用。但 a 是一个真正的二维数组，它分配了 200 个 int 类型长度的存储空间，并且通过常规的矩阵下标计算公式 20×row+col（其中，row 表示行，col 表示列）计算得到元素 a [row][col] 的位置。但是，对 b 来说，该定义仅仅分配了 10 个指针，并且没有对它们初始化，它们的初始化必须以显式的方式进行，比如静态初始化或通过代码初始化。假定 b 的每个元素 (其实只取决于最大的）都指向一个具有 20 个元 素的数组，那么编译器就要为它分配 200 个 int 类型长度的存储空间以及 10 个指针的存储空间。指针数组的一个重要优点在于，数组的每一行长度可以不同，也就是说，b 的每个元素不 必都指向一个具有 20 个元素的向量，某些元素可以指向具有 2 个元素的向量，某些元素可以指向具有 50 个元素的向量，而某些元素可以不指向任何向量。</p>\n<h3 id=\"命令行参数\"><a class=\"markdownIt-Anchor\" href=\"#命令行参数\">#</a> 命令行参数</h3>\n<p>编程实际场景中感觉是不常用的，我自己也没看懂，日后补<br>\n略</p>\n<h3 id=\"指向函数的指针\"><a class=\"markdownIt-Anchor\" href=\"#指向函数的指针\">#</a> 指向函数的指针</h3>\n<p>在系统学习完指向含糊的指针后，我发现这玩意就是个纸老虎，只是听起来挺高大上的，其实非常简单。<br>\n在实际运用中就差不多减少一点代码行数而已，感觉替代性挺强的。（也可能是因为我太菜了）<br>\n那就开始吧<br>\n在 C 语言中，函数本身不是变量，但可以定义指向函数的指针。这种类型的指针可以被赋值、存放在数组中、传递给函数以及作为函数的返回值等等。我们接下来将修改排序函数，在给定可选参数 - n 的情况下，该函数将按树枝大小而非字典顺序对输入行进行排序。<br>\n排序程序通常包括 3 部分：判断任何两个对象之间次序的比较操作、颠倒对象次序的交 换操作、一个用于比较和交换对象直到所有对象都按正确次序排列的排序算法。<br>\n由于排序算法与比较、交换操作无关，因此，通过在排序算法中调用不同的比较和交换函数，便可以实 现按照不同的标准排序。这就是我们的新版本排序函数所采用的方法。<br>\n函数 strcmp 按字典顺序比较两个输入行。在这里，我们还需要一个以数值为基础来比较两个输入行，并返回与 strcmp 同样的比较结果的函数 numcmp。这些函 数在 main 之前声明，并且，指向恰当函数的指针将被传递给 qsort 函数。在这里，参数的出错处理并不是问题的重点，我们将主要考虑指向函数的指针问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#define MAXLINES 5000 /* max #lines to be sorted */</span><br><span class=\"line\">char *lineptr[MAXLINES]; /* pointers to text lines */</span><br><span class=\"line\">int readlines(char *lineptr[], int nlines);</span><br><span class=\"line\">void writelines(char *lineptr[], int nlines);</span><br><span class=\"line\">void qsort(void *lineptr[], int left, int right,</span><br><span class=\"line\">int (*comp)(void *, void *));</span><br><span class=\"line\">int numcmp(char *, char *);</span><br><span class=\"line\">/* sort input lines */</span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int nlines; /* number of input lines read */</span><br><span class=\"line\">    int numeric = 0; /* 1 if numeric sort */</span><br><span class=\"line\">    if (argc &gt; 1 &amp;&amp; strcmp(argv[1], &quot;-n&quot;) == 0)</span><br><span class=\"line\">        numeric = 1;</span><br><span class=\"line\">    if ((nlines = readlines(lineptr, MAXLINES)) &gt;= 0) &#123;</span><br><span class=\"line\">        qsort((void**) lineptr, 0, nlines-1,</span><br><span class=\"line\">            (int (*)(void*,void*))(numeric ? numcmp : strcmp));</span><br><span class=\"line\">        writelines(lineptr, nlines);</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        printf(&quot;input too big to sort\\n&quot;);</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* qsort: sort v[left]...v[right] into increasing order */</span><br><span class=\"line\">void qsort(void *v[], int left, int right,</span><br><span class=\"line\">int (*comp)(void *, void *))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i, last;</span><br><span class=\"line\">    void swap(void *v[], int, int);</span><br><span class=\"line\">    if (left &gt;= right) /* do nothing if array contains */</span><br><span class=\"line\">        return; /* fewer than two elements */</span><br><span class=\"line\">    swap(v, left, (left + right)/2);</span><br><span class=\"line\">    last = left;</span><br><span class=\"line\">    for (i = left+1; i &lt;= right; i++)</span><br><span class=\"line\">        if ((*comp)(v[i], v[left]) &lt; 0)</span><br><span class=\"line\">            swap(v, ++last, i);</span><br><span class=\"line\">    swap(v, left, last);</span><br><span class=\"line\">    qsort(v, left, last-1, comp);</span><br><span class=\"line\">    qsort(v, last+1, right, comp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在调用函数 qsort 的语句中，strcmp 和 numcmp 是函数的地址，因为它们是函数，所以前面不需要加上取地址运算符 &amp;，同样的原因，数组名前面也不需要 &amp; 运算符。<br>\n改写后的 qsort 函数能够处理任何数据类型，而不仅仅限于字符串。从函数 qsort 的 原型可以看出，它的参数表包括一个指针数组、两个整数和一个有两个指针参数的函数。其中，指针数组参数的类型为通用指针类型 void <em>。由于任何类型的指针都可以转换为 void</em> 类型，并且在将它转换回原来的类型时不会丢失信息，所以，调用 qsort 函数时可以将参数强制转换为 void * 类型。比较函数的参数也要执行这种类型的转换。这种转换通常不会影响到数据的实际表示，但要确保编译器不会报错。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int ( * comp ) ( void * , void * ) </span><br></pre></td></tr></table></figure>\n<p>它表明 comp 是一个指向函数的指针，该函数具有两个 void * 类型的参数，其返回值为 int。<br>\n值得注意的是圆括号是必须的，这样才能保证其中的各个部分正确结合，如果没有括号，如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int * comp ( void * , void * ) </span><br></pre></td></tr></table></figure>\n<p>则表明 comp 是一个函数，该函数返回一个指向 int 类型的指针<br>\n我们在前面讲过函数 strcmp，占用于比较两个字符串。这里介绍的函数 numcmp 也是比 较两个字符串，但它通过调用 atof 计算字符串对应的数值，然后在此基础上进行比较：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">/* numcmp: compare s1 and s2 numerically */</span><br><span class=\"line\">int numcmp(char *s1, char *s2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double v1, v2;</span><br><span class=\"line\">    v1 = atof(s1);</span><br><span class=\"line\">    v2 = atof(s2);</span><br><span class=\"line\">    if (v1 &lt; v2)</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    else if (v1 &gt; v2)</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>交换两个指引的 swap 函数和本章前面所述的 swap 函数相同，但它的参数声明为 void *<br>\n 类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void swap(void * v[], int i, int j;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    void *temp;</span><br><span class=\"line\">    temp = v[i];</span><br><span class=\"line\">    v[i] = v[j];</span><br><span class=\"line\">    v[j] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\">#</a> 链表</h3>\n<p>关于 malloc：</p>\n<h4 id=\"函数原型\"><a class=\"markdownIt-Anchor\" href=\"#函数原型\">#</a> 函数原型：</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern void \\*malloc(unsigned int num\\_bytes);</span><br></pre></td></tr></table></figure>\n<h4 id=\"malloc函数返回值\"><a class=\"markdownIt-Anchor\" href=\"#malloc函数返回值\">#</a> malloc 函数返回值</h4>\n<p>如果分配成功则返回指向被分配内存的指针，否则返回空指针 NULL。</p>\n<h4 id=\"malloc函数使用注意事项\"><a class=\"markdownIt-Anchor\" href=\"#malloc函数使用注意事项\">#</a> malloc 函数使用注意事项</h4>\n<p>malloc 函数的返回的是无类型指针，在使用时一定要强制转换为所需要的类型。<br>\n在使用 malloc 开辟空间时，使用完成一定要释放空间，如果不释放会造内存泄漏。<br>\n在使用 malloc 函数开辟的空间中，不要进行指针的移动，因为一旦移动之后可能出现申请的空间和释放空间大小的不匹配</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;malloc.h&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;cstring&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cmath&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std ; </span><br><span class=\"line\"></span><br><span class=\"line\">struct node &#123;</span><br><span class=\"line\">    int value ; </span><br><span class=\"line\">    struct node * next ; </span><br><span class=\"line\">&#125; ; </span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct node Node ; </span><br><span class=\"line\">//创造节点</span><br><span class=\"line\">Node * create_node ( Node * head , int value ) &#123;</span><br><span class=\"line\">    Node * t_node = ( Node * ) malloc ( sizeof ( Node ) ) ; //千万不可自己去计算数据填入!!!</span><br><span class=\"line\">    if ( ! t_node ) &#123; printf ( &quot;failed&quot; ) ; exit ( -1 ) ; &#125;</span><br><span class=\"line\">    t_node -&gt; value = value ; // ( * t_node ).value ; </span><br><span class=\"line\">    t_node -&gt; next = head ; //</span><br><span class=\"line\">    return t_node ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//搜索目标节点</span><br><span class=\"line\">Node * search_node ( int val , Node * head ) &#123;</span><br><span class=\"line\">    for ( Node * p = head ; p ; p = p -&gt; next ) &#123;</span><br><span class=\"line\">        if ( p -&gt; value == val ) return p ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0 ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//删除节点，直接越过目标节点进行连接</span><br><span class=\"line\">Node * delete_node ( Node * head , int n ) &#123;</span><br><span class=\"line\">    Node * pre , * cur ;</span><br><span class=\"line\">    for ( pre = 0 , cur = head ; cur &amp;&amp; cur -&gt; value != n ; pre = cur , cur = cur -&gt; next ) ; </span><br><span class=\"line\">    if ( ! cur ) return head ; </span><br><span class=\"line\">    if ( ! pre ) head = head -&gt; next ; </span><br><span class=\"line\">    else pre -&gt; next = cur -&gt; next ; </span><br><span class=\"line\">    free ( cur ) ; cur = NULL ; //指向NULL养成好习惯</span><br><span class=\"line\">    return head ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main ( ) &#123;</span><br><span class=\"line\">    Node * head = 0 ;  </span><br><span class=\"line\">    while ( 1 ) &#123;</span><br><span class=\"line\">        int val ; scanf ( &quot;%d&quot; , &amp; val ) ; </span><br><span class=\"line\">        if ( val == -1 ) break ; </span><br><span class=\"line\">        head = create_node ( head , val ) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int find_val ; scanf ( &quot;%d&quot; , &amp; find_val ) ; </span><br><span class=\"line\">    Node * goal = search_node ( find_val , head ) ; </span><br><span class=\"line\">    return 0 ; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "指针",
                "c语言"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/10/10/%E5%B0%8F%E7%8E%8B%E5%AD%90%E4%B9%A6%E8%AF%84/",
            "url": "http://amentiraz.github.io/2021/10/10/%E5%B0%8F%E7%8E%8B%E5%AD%90%E4%B9%A6%E8%AF%84/",
            "title": "小王子书评",
            "date_published": "2021-10-10T07:02:22.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-DCqrlQoI\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"26908739\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>国庆回家的火车上读完了《小王子》这本书，对于自从高三结束以来一直没有再阅读纸质小说的我来说，这的的确确是一种很新鲜的感觉，让我讶异的发觉，原来阅读是这么一种充实而快乐的体验。当然，打游戏远比此要快乐的多，这也是没办法的事，但以后当我没办法玩手机，也不妨多看看书吧。</p>\n<span id=\"more\"></span>\n<p>说回正题，《小王子》相比于我之前读的大部分书，都只能称作为侏儒，很难想象一本文字里面穿插了大量图画的书还没有《了不起的盖茨比》厚。两个小时不到，我就读完了它。我读到中间很多场景，都会不禁把书合上，静静的想上一会儿。这本书解决了我很多疑惑，尤其是对于现在的我来说是比较重要的一些问题，那就是如何处理与异性之间的关系，与朋友之间的关系，如何与他人建立亲密关系。<br>\n《小王子》讲述了一位坠落在沙漠的飞行员，偶遇了来自其它星球的小王子，在与小王子的交谈中，为读者展现了小王子的过往。小王子的过往大致可分为三段，与玫瑰的过往，在星球之间遨游所看到的人与事，在地球上的经历，这里尤其是与狐狸发生的故事。<br>\n这本书告诉我的一个最深刻的一个道理是：在不成熟的年纪，两情相悦不一定会带来好的结果。而在高三时，我一直以为自己足够成熟，懂得爱与被爱，可惜的是，我以为的成熟，不过仅仅达到了年轻时的小王子。这里的逻辑似乎很奇怪，如果说两个人彼此在乎，不应该主动走向彼此吗，为什么还会分离呢。在书中很生动的把它表现出来了，直接的原因是，我们并不知道对方在想什么。不知道对方在想什么，我们会猜测，对方是怎么看待我们的，我们会困惑，我们对对方做的一切是为了什么。而在这近乎上瘾的痛苦里，我们本能的会为了保护自己，选择逃避。即使我们会后悔。而根本的原因，书中也点出来了，我们太不成熟。就如同书中的玫瑰，为了让小王子心中只有她，明知这样会伤害到小王子，欺骗他说世上只有自己一朵玫瑰，无节制的使唤小王子，不把自己对小王子的爱给表露出来，直到小王子离开，就如同小王子，在悲伤中不理会玫瑰的种种，毅然决然的选择离开。我们不妨想想，是什么促使了小王子离开这个星球。长期的不理解让他们越来越远，以至于无法挽回，即使小王子当时留下来，他们恐怕也很难冰释前嫌，因为他们很难开口。<br>\n所以小王子要去旅行，他一定要去磨砺自己，他一定要完全的失去玫瑰，他才会懂得珍惜。作者这里借小王子在不同星球穿越，阐发了自己对世界的看法，这里看似好像对整个故事来说可以省略似乎也不会有影响，但它是一个过渡，更是一个调味剂，也是我们所必须经历的一个阶段 —— 我们必须去经历不同的事，见证不同的人，我们才会变得成熟。<br>\n未完</p>\n",
            "tags": [
                "书评",
                "生活"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/10/03/%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/",
            "url": "http://amentiraz.github.io/2021/10/03/%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/",
            "title": "插值算法",
            "date_published": "2021-10-03T08:21:52.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-jiymPaoF\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"502455381\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>插值算法主要运用于在数学建模竞赛中，现有的数据极少，不足以支撑分析的进行，这时候就需要使用一些数学的方法<br>\n插值的作用，“模拟产生” 一些新的但又比较靠谱的值来满足需求</p>\n<span id=\"more\"></span>\n<h3 id=\"一维插值问题\"><a class=\"markdownIt-Anchor\" href=\"#一维插值问题\">#</a> 一维插值问题</h3>\n<h4 id=\"问题如下\"><a class=\"markdownIt-Anchor\" href=\"#问题如下\">#</a> 问题如下：</h4>\n<p>已经有 n+1 个节点 (xi,yi)(i=0,1,…,n), 其中 xi 互不相同，不妨设 a &lt;= x0 &lt; x1 &lt; … &lt; xn &lt;= b , 求任一插值点 x * （不等于 xi）处的插值 y *<br>\n 思路：构造 y=f (x), 使得 f (x) 过所有节点，即可得到 y *</p>\n<h4 id=\"插值法的概念\"><a class=\"markdownIt-Anchor\" href=\"#插值法的概念\">#</a> 插值法的概念</h4>\n<p>设函数 y=f (x) 在区间 [a,b] 上有定义，且已知在点 a&lt;= x0 &lt; x1 &lt; … &lt; xn &lt;= b 上的值分别为 y0 , y1 , … , yn<br>\n 若存在一简单函数 P (x) 使 P (xi) = yi ( i = 0 , 1 , 2 , … , n ) 则称 P (x) 为 f (x) 的插值函数，点 x0,x1,…,xn 称为插值节点，包含插值节点的区间 [a,b] 称为插值区间<br>\n求插值函数 P (x) 的方法称为插值法<br>\n插值法是不唯一的<br>\n代数多项式：若 P (x) 是次数不超过 n 的代数多项式，即 P (x) = a0 + a1x + … + anx^n<br>\n 分段插值：若 P (x) 为分段多项式，就称为分段插值<br>\n三角插值：若 P (x) 为三角多项式，就称为三角插值（不予讨论）（一般要用到傅立叶变换等复杂的数学工具）<br>\n一般来讲三角插值适用于对周期函数的插值（三角函数嘛）</p>\n<h4 id=\"插值法原理\"><a class=\"markdownIt-Anchor\" href=\"#插值法原理\">#</a> 插值法原理</h4>\n<p>定理：设有 n+1 个互不相同的节点 (xi,yi)(i=0,1,2,…,n) 则存在唯一的多项式：<br>\nLn (x) = a0 + a1x + … + anx^n   使得 Ln (xj) = yj (j=0,1,2,…n)<br>\n 证 构造方程组<br>\n「a0 + a1x0 + … + anx0^n = y0<br>\na0 + a1x1 + … + anx1^n = y1<br>\n…<br>\na0 + a1xn + … + anxn^n = yn  」</p>\n<p>图片：</p>\n<h4 id=\"拉格朗日插值法\"><a class=\"markdownIt-Anchor\" href=\"#拉格朗日插值法\">#</a> 拉格朗日插值法</h4>\n<p>在数值分析中，拉格朗日插值法是以法国十八世纪数学家约瑟夫・拉格朗日命名的一种多项式插值方法。如对实践中的某个物理量进行观测，在若干个不同的地方得到相应的观测值，拉格朗日插值法可以找到一个多项式，其恰好在各个观测的点取到观测到的值。这样的多项式称为拉格朗日（插值）多项式。<br>\n对于两个点：(x0,y0) , (x1,y1)<br>\nf(x) = ( x - x1 ) y0 / ( x0 - x1 ) + ( x - x0 ) y1 / ( x1 - x0 )<br>\n 对于三个点：(x0,y0),(x1,y1),(x2,y2)<br>\nf(x) = [ ( x - x1 ) ( x - x2 ) y0 ] / [ ( x0 - x1 ) ( x0 - x2 ) ]</p>\n<ul>\n<li>[ ( x - x0 ) ( x - x2 ) y1 ] / [ ( x1 - x0 ) ( x1 - x2 ) ]</li>\n<li>[ ( x - x0 ) ( x - x1 ) y2 ] / [ ( x2 - x0 ) ( x2 - x1 ) ]<br>\n 我们可以归纳发现，这种式子如果取其中的一个 xi 取得的值必定是 yi，因为其它项为 0，对应的 xi 的 yi 的系数必定为 1<br>\n<img data-src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gv3e0n9uf2j60mt09774y02.jpg\" alt=\"\"><br>\n 然而我们实际情况中却不可能用拉格朗日插值法，他有很多问题</li>\n</ul>\n<h4 id=\"龙格现象\"><a class=\"markdownIt-Anchor\" href=\"#龙格现象\">#</a> 龙格现象</h4>\n<p>图片 1:<br>\n 图片 2:<br>\n 这引出了两个问题</p>\n<ol>\n<li>插值多项式次数高，精度未必显著提高</li>\n<li>插值多项式次数越高，摄入误差可能显著增大<br>\n我们可以得到，对于高次的多项式插值时，如果我们不确定曲线的类型，我们尽量不要使用<br>\n那么如何提高插值精度呢<br>\n采用分段线性插值</li>\n</ol>\n<h3 id=\"分段插值\"><a class=\"markdownIt-Anchor\" href=\"#分段插值\">#</a> 分段插值</h3>\n<h4 id=\"分段线性插值\"><a class=\"markdownIt-Anchor\" href=\"#分段线性插值\">#</a> 分段线性插值</h4>\n<p>如果我们要在中间找一个值，我们找距离它最近的两点，两点之间连一条线段，直接在这条线段上找 x 对应的 y 值即可<br>\n这种插值是十分简单的，也是不精准的</p>\n<h4 id=\"分段二次插值\"><a class=\"markdownIt-Anchor\" href=\"#分段二次插值\">#</a> 分段二次插值</h4>\n<p>分段二次插值也是非常简单的，我们可以寻找距离这个插入点最近的三个点，三个点可以形成一个二次函数，同理可以直接取二次函数的值<br>\n分段二次插值又称为分段抛物线插值</p>\n<h4 id=\"牛顿插值法\"><a class=\"markdownIt-Anchor\" href=\"#牛顿插值法\">#</a> 牛顿插值法・</h4>\n",
            "tags": [
                "数学建模",
                "插值算法"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/09/22/TOPSIS-MATLAB/",
            "url": "http://amentiraz.github.io/2021/09/22/TOPSIS-MATLAB/",
            "title": "TOPSIS-MATLAB",
            "date_published": "2021-09-22T10:35:13.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-NKUgVpPc\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1401456829\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>代码如下</p>\n<span id=\"more\"></span>\n<h3 id=\"主函数代码\"><a class=\"markdownIt-Anchor\" href=\"#主函数代码\">#</a> 主函数代码</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear;clc</span><br><span class=\"line\">load data_water_quality.mat</span><br><span class=\"line\">//正向化</span><br><span class=\"line\">[n,m] = size ( X ) ;</span><br><span class=\"line\">disp ( [&#x27;共有&#x27;num2str ( n ) &#x27;个评价对象,&#x27;num2str ( m ) &#x27;个评价指标] ) </span><br><span class=\"line\">Judge = input ([&#x27;这&#x27;num2str(m)&#x27;个指标是否需要经过正向化处理，需要输入1，不需要输入0:&#x27;]);</span><br><span class=\"line\">if Judge == 1 </span><br><span class=\"line\">    Position = input (&#x27;请输入需要正向化处理的指标所在的列，例如第2、3、6三列需要处理，那么你需要输入[2,3,6]:&#x27;) ; </span><br><span class=\"line\">    disp ( &#x27;请输入需要处理的这些列的指标类型（1:极小型，2:中间型，3:区间型）&#x27;) </span><br><span class=\"line\">    Type = input (&#x27;例如2极小，3区间，6中间就输入[1,3,2]:&#x27; ) ;</span><br><span class=\"line\">    for i = 1 : size ( Position , 2 ) </span><br><span class=\"line\">    X ( : , Position ( i ) ) = Positivization ( X ( : , Position ( i )  ) , Type ( i ) , Position ( i ) ) ;</span><br><span class=\"line\">    //Positization是我们定义的函数</span><br><span class=\"line\">    end</span><br><span class=\"line\">    disp (&#x27;正向化后的举证X=&#x27; ) </span><br><span class=\"line\">    disp ( X ) </span><br><span class=\"line\">end</span><br><span class=\"line\">//对正向化对举证进行标准化</span><br><span class=\"line\">Z = X ./ repmat ( sum ( X .* X ) .^ 0.5 , n , 1 ) ;</span><br><span class=\"line\">disp ( &#x27;标准化矩阵Z=&#x27; ） </span><br><span class=\"line\">disp (Z) </span><br><span class=\"line\">//计算最大值与最小值的距离，并算出得分</span><br><span class=\"line\">D_P = sum ( [Z - repmat ( max ( Z ) , n , 1 ) .^ 2 ] , 2 ) .^ 0.5 ; </span><br><span class=\"line\">D_N = sum ( [Z - repmat ( min ( Z ) , n , 1 ) .^ 2 ] , 2 ) .^ 0.5 ;   </span><br><span class=\"line\">S = D_N ./ ( D_P + D_N ) ; </span><br><span class=\"line\">disp ( &#x27;最后的得分为：&#x27; ) </span><br><span class=\"line\">stand_S = S / sum ( S ) </span><br><span class=\"line\">[sorted_S , index] = sort ( stand_S , &#x27;descend&#x27; ) </span><br></pre></td></tr></table></figure>\n<h3 id=\"positivization函数\"><a class=\"markdownIt-Anchor\" href=\"#positivization函数\">#</a> Positivization 函数</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function [ posit_x ] = Positivization ( x , type , i ) </span><br><span class=\"line\">    if type == 1 </span><br><span class=\"line\">    disp([&#x27;第&#x27;num2str ( i ) &#x27;列是极小型，正在正向化&#x27;]) </span><br><span class=\"line\">    posit_x = Min2Max ( x ) ; </span><br><span class=\"line\">    disp([&#x27;第&#x27;num2str ( i ) &#x27;列正向化处理完成])</span><br><span class=\"line\">    disp(&#x27;~~~~~~~~~~~~~~~~~~~~~分界线~~~~~~~~~~~~~~~~~~~~~~~~&#x27;)</span><br><span class=\"line\">    else if type == 2 </span><br><span class=\"line\">    dis ( [&#x27;第&#x27;num2str ( i ) &#x27;列是中间型&#x27;])</span><br><span class=\"line\">    best = input (&#x27;请输入最佳的那一个值:&#x27;) ; </span><br><span class=\"line\">    posit_x = Mid2Max ( x , best ) ; </span><br><span class=\"line\">    disp([&#x27;第&#x27;num2str ( i ) &#x27;列正向化处理完成]) ;</span><br><span class=\"line\">    disp(&#x27;~~~~~~~~~~~~~~~~~~~~~分界线~~~~~~~~~~~~~~~~~~~~~~~~&#x27;)</span><br><span class=\"line\">    else if type == 3                                          </span><br><span class=\"line\">    dis ( [&#x27;第&#x27;num2str ( i ) &#x27;列是区间型&#x27;])                    </span><br><span class=\"line\">    a = input (&#x27;请输入区间的下界&#x27;) ;                   </span><br><span class=\"line\">    b = input (&#x27;请输入区间的上界&#x27;) ;         </span><br><span class=\"line\">    posit_x = Inter2Max ( x , a , b ) ;                           </span><br><span class=\"line\">    disp([&#x27;第&#x27;num2str ( i ) &#x27;列正向化处理完成]) ;              </span><br><span class=\"line\">    disp(&#x27;~~~~~~~~~~~~~~~~~~~~~分界线~~~~~~~~~~~~~~~~~~~~~~~~&#x27;)</span><br><span class=\"line\">    else </span><br><span class=\"line\">    disp (&#x27;没有这种类型的指标请检查Type向量中是否有除了1、2、3以外的其他值&#x27;) </span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h3 id=\"min2maxx函数\"><a class=\"markdownIt-Anchor\" href=\"#min2maxx函数\">#</a> Min2Max (x) 函数</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function [ posit_x ] = Min2Max ( x ) </span><br><span class=\"line\">    posit_x = max ( x ) - x ; </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h3 id=\"mid2maxxbest函数\"><a class=\"markdownIt-Anchor\" href=\"#mid2maxxbest函数\">#</a> Mid2Max (x,best) 函数</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function [ posit_x ] = Mid2Max ( x , best )  </span><br><span class=\"line\">    M = max ( abs ( x - best ) ) ; </span><br><span class=\"line\">    posit_x = 1 - abs ( x - best ) / M ; </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h3 id=\"inter2maxxab函数\"><a class=\"markdownIt-Anchor\" href=\"#inter2maxxab函数\">#</a> Inter2Max (x,a,b) 函数</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function [ posit_x ] = Inter2Max ( x , a , b ) ; </span><br><span class=\"line\">    M = max ([ a - min ( x ) , max ( x ) - b ] ) ; </span><br><span class=\"line\">    r_x = size ( x , 1 ) ; </span><br><span class=\"line\">    posit_x = zeros ( r_x , 1 ) ; </span><br><span class=\"line\">    for i = 1 : r_x</span><br><span class=\"line\">        if x(i) &lt; a </span><br><span class=\"line\">            posit_x(i) = 1 - ( a - x(i) ) / M ;</span><br><span class=\"line\">        else if x(i) &gt; b </span><br><span class=\"line\">            posit_x(i) = 1 - ( x(i) - b ) / M ; </span><br><span class=\"line\">        else posit_x(i) = 1 ; </span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h3 id=\"原始矩阵正向化\"><a class=\"markdownIt-Anchor\" href=\"#原始矩阵正向化\">#</a> 原始矩阵正向化</h3>\n<p>将 Excel 内的数据直接粘贴进 matlab 里，赋值给变量<br>\n将此变量另存为至与代码相同的目录下<br>\n调用直接用 load xxx.mat</p>\n<h3 id=\"sort函数\"><a class=\"markdownIt-Anchor\" href=\"#sort函数\">#</a> sort 函数</h3>\n<p>sort (A) 若 A 是向量不管是列还是行向量，默认都是对 A 进行升序排序，sort (A) 是默认的升序，而 sort (A,‘descend’) 是降序<br>\n若 A 是矩阵，默认对 A 的割裂进行升序排列<br>\n sort (A , dim) ;<br>\ndim = 1 时 等效于 sort (A) ;<br>\ndim = 2 时 表示对 A 的各列进行升序排列<br>\n若欲爆裂排列前的索引，则可用 [sA,index] = sort ( A , ‘decend’ ) ;<br>\nA = [ 2 , 1 , 3 , 8 ]<br>\nsA = [ 8 , 3 , 2 , 1 ]<br>\nindex = [ 4 , 3 , 1 , 2 ]</p>\n<h3 id=\"定义函数\"><a class=\"markdownIt-Anchor\" href=\"#定义函数\">#</a> 定义函数</h3>\n<p>function [输出变量] = 函数名称（输入变量）<br>\n函数的中间部分都是函数体<br>\n函数的最后要用 end 结尾<br>\n输出变量和输入变量可以有多个，用逗号隔开<br>\n例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function [ a , b , c ] = test ( d , e , f ) </span><br><span class=\"line\">a = d + e ;</span><br><span class=\"line\">b = e + f ; </span><br><span class=\"line\">c = f + d ; </span><br><span class=\"line\">end </span><br></pre></td></tr></table></figure>\n<h3 id=\"zeros-ones函数\"><a class=\"markdownIt-Anchor\" href=\"#zeros-ones函数\">#</a> zeros, ones 函数</h3>\n<p>zeros ( 3 ) ;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans = </span><br><span class=\"line\">0 0 0 </span><br><span class=\"line\">0 0 0 </span><br><span class=\"line\">0 0 0 </span><br></pre></td></tr></table></figure>\n<p>zeros ( 3 , 1 ) ;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans = </span><br><span class=\"line\">0 </span><br><span class=\"line\">0</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<p>ones 同理</p>\n",
            "tags": [
                "数学建模",
                "TOPSIS",
                "Matlab"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/09/22/TOPSIS%E6%B3%95/",
            "url": "http://amentiraz.github.io/2021/09/22/TOPSIS%E6%B3%95/",
            "title": "TOPSIS法",
            "date_published": "2021-09-22T06:32:59.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-qujocUSI\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"537854742\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>TOPSIS 法 (Technique for Order Preference by Similarity to Ideal Solution)<br>\n 可翻译为逼近理想解排序法，也称优劣解距离法<br>\n TOPSIS 法是一种常用的综合评价方法，其能充分利用原始数据的信息，其结果能精确的反映各评价方案之间的差距</p>\n<span id=\"more\"></span>\n<h3 id=\"层次分析法的局限性\"><a class=\"markdownIt-Anchor\" href=\"#层次分析法的局限性\">#</a> 层次分析法的局限性</h3>\n<p>1） 决策层不能太多，太多 n 会很大，潘多矩阵和一致矩阵差距大<br>\n 2）对于已知的指标数据，我们如何利用数据使之更加准确</p>\n<h3 id=\"一个例子\"><a class=\"markdownIt-Anchor\" href=\"#一个例子\">#</a> 一个例子</h3>\n<p>对于如下表格</p>\n<table>\n<thead>\n<tr>\n<th>姓名</th>\n<th>成绩</th>\n<th>排名</th>\n<th>修正后的排名</th>\n<th>评分</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>小明</td>\n<td>89</td>\n<td>2</td>\n<td>3</td>\n<td>3/10=0.3</td>\n</tr>\n<tr>\n<td>小王</td>\n<td>60</td>\n<td>4</td>\n<td>1</td>\n<td>1/10=0.1</td>\n</tr>\n<tr>\n<td>小张</td>\n<td>74</td>\n<td>3</td>\n<td>2</td>\n<td>2/10=0.2</td>\n</tr>\n<tr>\n<td>我</td>\n<td>99</td>\n<td>1</td>\n<td>4</td>\n<td>4/10=0.4</td>\n</tr>\n</tbody>\n</table>\n<p>对于这种评价系统我们可以发现，只要保证排名不变，那么评分就不会改变</p>\n<h4 id=\"优化的想法\"><a class=\"markdownIt-Anchor\" href=\"#优化的想法\">#</a> 优化的想法</h4>\n<p>我们可以取最高的成绩 max = 99<br>\n 最低的成绩 min = 60<br>\n 构造计算评分的公式: (x - min) / ( max - min )<br>\n 然后对于每一个数据进行归一化处理即可<br>\n但同时最高分与最低分的评价是一定的，1&amp;0</p>\n<h4 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\">#</a> 说明</h4>\n<p>为什么不直接将各自的分数除以 100 再进行归一化处理，这样对于数据的关联性还更强<br>\n原因有三点</p>\n<ol>\n<li>比较对象一般远大于两个</li>\n<li>比较的指标往往不是一个方面的</li>\n<li>有很多指标不存在理论上的最大值和最小值，例如衡量经济增长水平的指标：GDP 增速<br>\n故我们最好使用上述优化的想法</li>\n</ol>\n<h4 id=\"拓展问题增加指标个数\"><a class=\"markdownIt-Anchor\" href=\"#拓展问题增加指标个数\">#</a> 拓展问题：增加指标个数</h4>\n<table>\n<thead>\n<tr>\n<th>姓名</th>\n<th>成绩</th>\n<th>与他人争吵的次数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>小明</td>\n<td>89</td>\n<td>2</td>\n</tr>\n<tr>\n<td>小王</td>\n<td>60</td>\n<td>0</td>\n</tr>\n<tr>\n<td>小张</td>\n<td>74</td>\n<td>1</td>\n</tr>\n<tr>\n<td>清风</td>\n<td>99</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>成绩是越大越好，这样的指标称为极大型指标（效益型指标）<br>\n与他人争吵的次数越少越好，这样的指标称为极小型指标（成本型指标）</p>\n<p>如果我们直接将这些数据加以利用显然是不合适的，因为指标类型不一样<br>\n所以我们应当统一指标类型<br>\n一般我们将所有的指标转化为极大型称为指标正向化（最常用）</p>\n<table>\n<thead>\n<tr>\n<th>姓名</th>\n<th>成绩</th>\n<th>与他人争吵的次数</th>\n<th>正向化后的争吵次数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>小明</td>\n<td>89</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>小王</td>\n<td>60</td>\n<td>0</td>\n<td>3</td>\n</tr>\n<tr>\n<td>小张</td>\n<td>74</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>清风</td>\n<td>99</td>\n<td>3</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>极小型指标转换为极大型指标的公式：max - x</p>\n<h4 id=\"标准化处理\"><a class=\"markdownIt-Anchor\" href=\"#标准化处理\">#</a> 标准化处理</h4>\n<p>显然成绩的大小与争吵次数的大小不是一个量级上的比较<br>\n为了消去不同指标量纲的影响，需要对已经正向化的矩阵进行标准化处理<br>\n图像链接：<br>\n我们得到了标准化处理后的指标，那么我们怎么去联系这些值呢</p>\n<h4 id=\"如何计算得分\"><a class=\"markdownIt-Anchor\" href=\"#如何计算得分\">#</a> 如何计算得分</h4>\n<p>我们对于最开始的式子：(x - min) / ( max - min )<br>\n 我们可以将其变形 = (x - min) / [ ( max - x ) + ( x - min ) ]<br>\n 可以看作是：x 与最小值的距离 /  (x 与最大值的距离 + x 与最小值的距离)<br>\n 类比可以得出：<br>\n图像链接：</p>\n<p>上面的一大串公式可以这样理解，我们对于只有一个指标时，我们将这一列的数据找出它的最大值和最小值，对于多个指标，同理，我们先将每一列的最大值和最小值找出来。<br>\n对于每一个评价对象，我们要找出它与最小值的距离可以看成一个平面直角坐标系，它的值所对应的点距离原点（最小值）的距离长度，也就是他的我们所要找的值<br>\n对于最大值的寻找也同理</p>\n<p>计算出未归一化的得分后我们将其进行归一化处理，就可得到他们的排名了</p>\n<p>这下子再回到 TOPSIS 算法，我们就不难理解它为什么是优劣解距离法了吧</p>\n<h3 id=\"梳理\"><a class=\"markdownIt-Anchor\" href=\"#梳理\">#</a> 梳理</h3>\n<h4 id=\"第一步将原始矩阵正向化\"><a class=\"markdownIt-Anchor\" href=\"#第一步将原始矩阵正向化\">#</a> 第一步将原始矩阵正向化</h4>\n<p>最常见的四种指标</p>\n<table>\n<thead>\n<tr>\n<th>指标</th>\n<th>名称</th>\n<th>指标特点</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>极大型（效益型）</td>\n<td>指标越大越好</td>\n<td>成绩、GDP 增速、企业利润</td>\n</tr>\n<tr>\n<td>极小型（成本型）</td>\n<td>指标越小越好</td>\n<td>费用、坏品率、污染程度</td>\n</tr>\n<tr>\n<td>中间型指标</td>\n<td>越接近某个值越好</td>\n<td>水质量评估 ph 值</td>\n</tr>\n<tr>\n<td>区间型指标</td>\n<td>落在某个区间最好</td>\n<td>体温、水中植物性营养物量</td>\n</tr>\n</tbody>\n</table>\n<p>正向化就是将所有指标类型转化为极大型指标</p>\n<p>我们介绍了极小型转化为极大型，那么另外两种指标该如何转换呢</p>\n<h5 id=\"中间型指标\"><a class=\"markdownIt-Anchor\" href=\"#中间型指标\">#</a> 中间型指标</h5>\n<p>{xi} 是一组中间型指标序列，且最佳的数值为 xbest，那么正向化的公式如下<br>\n M = max {| xi - xbest |} , xi’ = 1 - | xi - xbest | / M<br>\n 我们可以画图去理解这个公式，也是利用距离去计算，思想大致与极小型相同</p>\n<h5 id=\"区间型指标\"><a class=\"markdownIt-Anchor\" href=\"#区间型指标\">#</a> 区间型指标</h5>\n<p>我们设最佳区间为 [a,b]<br>\nM = max { a - min { xi } , max { xi } - b }<br>\nxi = 1 - ( a - x ) / M , x &lt; a<br>\n1                 , a &lt;= x &lt;= b<br>\n1 - ( x - b ) / M , x &gt; b<br>\n 思路与中间型指标也是差不多的，画图也可以理解</p>\n<h4 id=\"第二步正向化矩阵标准化\"><a class=\"markdownIt-Anchor\" href=\"#第二步正向化矩阵标准化\">#</a> 第二步：正向化矩阵标准化</h4>\n<h4 id=\"第三步归一化处理并排名\"><a class=\"markdownIt-Anchor\" href=\"#第三步归一化处理并排名\">#</a> 第三步：归一化处理并排名</h4>\n<h3 id=\"带权重的topsis\"><a class=\"markdownIt-Anchor\" href=\"#带权重的topsis\">#</a> 带权重的 TOPSIS</h3>\n<p>对于之前我们所用到的 TOPSIS 我们默认了指标之间的权重为 1 ，然而实际情况可能更为复杂<br>\n有 n 个要评价的对象，m 个评价指标的标准化矩阵<br>\n可以利用层次分析法给这 m 个评价指标确定权重，每个指标的权重加起来显然是为 1 的。<br>\n我们在计算评价对象与最大值之间的距离是可以直接针对每个 j（即每个指标）乘以响应的权重 wj 再进行开方<br>\n可能有人就要问了，那你这样加起来的距离显然是要小于之前的距离呀，会对得出正确的结论有影响吗<br>\n其实是没有影响的<br>\n我们可以理解为对于我们建立的直角坐标系对于某个轴进行了压缩，压缩后虽然大小改变了，但是并不影响我们得出正确的结论</p>\n<p>关于 TOPSIS 的代码见下一篇博客</p>\n",
            "tags": [
                "数学建模",
                "TOPSIS"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/09/19/c%E5%A4%8D%E4%B9%A0/",
            "url": "http://amentiraz.github.io/2021/09/19/c%E5%A4%8D%E4%B9%A0/",
            "title": "c复习",
            "date_published": "2021-09-19T06:32:11.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-XGhDTRyH\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"578090\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<p>这篇文章是大一刚开学对 c 的复习，十分的不全面，看看就行。</p>\n<span id=\"more\"></span>\n<p>程序设计语言<br>\n机器语言 汇编语言 高级语言<br>\n return 0 ; return 表示 main 函数结束，0 表示程序在退出时给执行此程序的操作系统返回来一个结果，即返回值。</p>\n<h3 id=\"c程序的构成\"><a class=\"markdownIt-Anchor\" href=\"#c程序的构成\">#</a> c 程序的构成</h3>\n<h4 id=\"预处理部分\"><a class=\"markdownIt-Anchor\" href=\"#预处理部分\">#</a> 预处理部分</h4>\n<ol>\n<li>宏定义：#define 指令定义一个宏，#undef 指令删除一个宏定义</li>\n<li>头文件包含：#include</li>\n<li>条件编译语句：#if、#ifdef、#ifndef、#else 和 #endif 指令根据预处理器可以测试的条件来确定是将一段文本块包含到程序还是将其排除在外</li>\n</ol>\n<h4 id=\"说明部分\"><a class=\"markdownIt-Anchor\" href=\"#说明部分\">#</a> 说明部分</h4>\n<ol>\n<li>全局变量</li>\n<li>常量：#define PI 3.1416926f \\ const float PI 3.1415926</li>\n<li>函数声明</li>\n</ol>\n<h4 id=\"执行部分\"><a class=\"markdownIt-Anchor\" href=\"#执行部分\">#</a> 执行部分</h4>\n<ol>\n<li>主函数</li>\n<li>其他函数</li>\n</ol>\n<h3 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\">#</a> 标识符</h3>\n<p>由数字、字母和下划线字符构成的一个连续序列，不能有空白字符。<br>\n区分大小写</p>\n<h3 id=\"整型数据的分类\"><a class=\"markdownIt-Anchor\" href=\"#整型数据的分类\">#</a> 整型数据的分类</h3>\n<p>基本整型（int）、短整型（short int）和长整型（long int）<br>\nint 的取值范围 - 2147483648 与 2147483647（2^31-1)、字节数 4<br>\nshort (int) 的取值范围 -32768 与 32767 之间、字节数 2<br>\nlong (int) 主流编译器一般规定其取值范围与基本 int 类型相同、字节数 4<br>\nC 语言还提供了有符号和无符号整数类型<br>\n若希望表达非负整数，可以定义无符号整型，即在类型符号前面加上修饰符 unsigned<br>\n 加上 unsigned 变成原来的两倍、字节数不变<br>\n如：unsigned int : 0 ~ 4294967295</p>\n<h3 id=\"整型常数的书写形式\"><a class=\"markdownIt-Anchor\" href=\"#整型常数的书写形式\">#</a> 整型常数的书写形式</h3>\n<ol>\n<li>十进制形式</li>\n<li>八进制形式： 以 0 开头，如 0100、0123、0123456</li>\n<li>十六进制形式：以 0x 开头，如 0x100、0x123</li>\n<li>整型数据的储存形式：在计算机内部通常采用补码形式储存</li>\n</ol>\n<h3 id=\"补码-后面再补充相应知识\"><a class=\"markdownIt-Anchor\" href=\"#补码-后面再补充相应知识\">#</a> 补码 （ 后面再补充相应知识 ）</h3>\n<h3 id=\"浮点数类型\"><a class=\"markdownIt-Anchor\" href=\"#浮点数类型\">#</a> 浮点数类型</h3>\n<p>C 语言把浮点数类型分为 float（单精度浮点型）、double（双精度浮点型）和 long double （长双精度浮点型）<br>\n如表所示</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>字节数</th>\n<th>有效位数</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>foat</td>\n<td>4</td>\n<td>6</td>\n<td>-3.4 * 10^38 ~ 3.4 * 10^38</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>15</td>\n<td>-1.7 * 10^308 ~ 3.4 * 10^308</td>\n</tr>\n<tr>\n<td>long double</td>\n<td>16</td>\n<td>19</td>\n<td>-1.2 * 10^4932 ~ 3.4 * 10^4932</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"浮点数的书写形式\"><a class=\"markdownIt-Anchor\" href=\"#浮点数的书写形式\">#</a> 浮点数的书写形式</h3>\n<ol>\n<li>当小数点前后的数是零时，可以省略 0，但是小数点不能省略如 5. 和.5 分别表示 5.0 和 0.5</li>\n<li>指数形式 ： 如 4.5678E2 代表 4.5678 * 10^2 \\ -5.7e-3 代表 - 5.7 * 10^-3 （E 和 e 本质是一样的）</li>\n</ol>\n<p>默认情况下，浮点型常数为 double 型。可以在浮点型常数后面加上 F (f) 以表示 float 型；也可以在浮点型常数后面加上 L (l）表示 long double 型</p>\n<h3 id=\"字符类型\"><a class=\"markdownIt-Anchor\" href=\"#字符类型\">#</a> 字符类型</h3>\n<p>ASCII 字符集的特征：0～9、26 个大写英文字母以及 26 哥消协的英文字母的编码各自是连续的<br>\n如：A 的编码加上 25 是 Z 的编码</p>\n<p>char 类型来描述单字节编码字符集中的字符类型数据<br>\n C 还提供了 [signed] char 和 unsigned char 类型，他们的区别在于：在参加算术运算时，把字符的编码当作有符号整数还是无符号整数来看待</p>\n<h4 id=\"字符型常量的三种书写方式\"><a class=\"markdownIt-Anchor\" href=\"#字符型常量的三种书写方式\">#</a> 字符型常量的三种书写方式：</h4>\n<ol>\n<li>以一对单引号括起来的一个字符：‘A’‘1’</li>\n<li>以字符对应的 ASCII 码来表示，这时必须用转义序列（以反斜杠开头的一串字符）</li>\n</ol>\n<ul>\n<li>八进制：’\\ddd’如’101’为字母 A 的 ASCII 码的八进制表示</li>\n<li>十六进制：’\\xhh’如’\\x41’为字母 A 的 ASCII 码的十六进制表示</li>\n</ul>\n<ol start=\"3\">\n<li>特殊的转移序列符号表示</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n<th>符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>响铃</td>\n<td>\\v</td>\n<td>纵向制表</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格</td>\n<td>’</td>\n<td>单引号</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页</td>\n<td>‘’</td>\n<td>双引号</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n<td>\\ | 反斜杠</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n<td>\\0</td>\n<td>字符串结束</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td colspan=\"2\">横向制表</td>\n</tr>\n</tbody>\n</table>\n<p>“Please enter “Y” or “N”:<br>\n 当字符串包含双引号 &quot; 时，双引号应写成：”<br>\n 字符常量表示单个字符，字符串常量可表示多个字符<br>\n字符常量用’' 表示，字符串常量用 &quot;&quot; 表示<br>\n在储存字符串时，通常在最后一个字符后面储存一个表示字符串结束的标记符号</p>\n<p>两个实数相除的结果是双精度实数，两个整数相除的结果是整数</p>\n<h3 id=\"常用运算符的优先级与结合性\"><a class=\"markdownIt-Anchor\" href=\"#常用运算符的优先级与结合性\">#</a> 常用运算符的优先级与结合性</h3>\n<p>自行百度</p>\n<h3 id=\"输入输出语句\"><a class=\"markdownIt-Anchor\" href=\"#输入输出语句\">#</a> 输入输出语句</h3>\n<p>printf ( ) ; scanf ( ) ; getchar ( ) ; putchar ( ) ; puts ( ) ; gets ( ) ;</p>\n<h3 id=\"头文件\"><a class=\"markdownIt-Anchor\" href=\"#头文件\">#</a> 头文件</h3>\n<p>/#include&lt; &gt; 表示直接去查找系统的源文件<br>\n /#include&quot; &quot; 表示先去找用户存放源文件的子目录再去找系统文件<br>\n如果是自己写的头文件必须用第二种<br>\n如果头文件不在当前目录中，可以在双引号中写出文件路径 (#include “C:\\temp\\file.h”</p>\n<h3 id=\"scanf-与-printf\"><a class=\"markdownIt-Anchor\" href=\"#scanf-与-printf\">#</a> scanf 与 printf</h3>\n<p>特别的，scanf (“%2d%2d” , &amp; a , &amp; b ) ; 输入的数据可以为 1234<br>\n 则 a = 12 , b = 34 ；<br>\n如果 scanf (“a=% d,b=% d\\n” , &amp; a , &amp; b ) ;<br>\n 则用户必须输入 a=12,b=34 ;<br>\n 如果是 scanf (“% d * % d” , &amp; a , &amp; b ) ;<br>\n 那么用户输入 12，34｜12#34 都会得到正确的结果，因为 * 为忽略输入修饰符<br>\n scanf 输入时如果是 % c 那么空格也会被读入</p>\n<h3 id=\"空语句\"><a class=\"markdownIt-Anchor\" href=\"#空语句\">#</a> 空语句</h3>\n<p>空语句不做任何事情其作用是用于语法上需要一条语句的地方，而该地方又不需要做任何事情；例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    goto end ; </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    end : ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = 1 , sum = 0 ; </span><br><span class=\"line\">for ( ; i &lt;= 100 ; sum += i , i ++ ) ; </span><br></pre></td></tr></table></figure>\n<h3 id=\"switch-语句\"><a class=\"markdownIt-Anchor\" href=\"#switch-语句\">#</a> switch 语句</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch( &lt;整式表达式&gt; ) &#123; </span><br><span class=\"line\">    case 常量1: 语句序列1 ; break ; </span><br><span class=\"line\">    case 常量2: 语句序列2 ; break ;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    default ; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>常量可为 1、2、3；‘c’、‘a’…</p>\n<p>case 常量 1: 语句序列 1 ; break ;</p>\n",
            "tags": [
                "学习笔记",
                "C语言",
                "复习资料"
            ]
        },
        {
            "id": "http://amentiraz.github.io/2021/09/18/%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95/",
            "url": "http://amentiraz.github.io/2021/09/18/%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95/",
            "title": "层次分析法",
            "date_published": "2021-09-18T07:40:58.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-KzXaMBCq\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"1447594669\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n<blockquote>\n<p>态度可以转变，生活却不可逆转。- 学层次分析法有感</p>\n</blockquote>\n<p>此文章用于记录我学习数学建模的十大模型中层次分析法的学习笔记与自己的理解，本文大多数是由清风老师的数学建模的指导归纳总结得到的，以备今后的数学建模。如果遇到了类似的题目可以尽快的找到相应的模型进行解决。<br>\n如果本文能帮助到其他阅读到此文章的同志，我也是不胜荣幸。<br>\n如果文章有所纰漏，也欢迎大家指出。</p>\n<span id=\"more\"></span>\n<h3 id=\"用途解决评价性问题\"><a class=\"markdownIt-Anchor\" href=\"#用途解决评价性问题\">#</a> 用途：解决评价性问题</h3>\n<p>层次分析法主要用于解决评价性问题，比如问你，选择哪种方案最好，哪个人或事物更为优秀。<br>\n需要注意的是，这种问题不包括已经给出具体数据的问题，更多的是比较模糊、较为主观的问题。你需要根据自己的生活经历，网络上搜集的评价资料和结合背景材料去得到相关的评价指标。<br>\n值得注意的是，我们可以在例如知网等比较权威的网站上去查找相关的论文资料并加以引用，可以让你的文章显得更为专业且结合其他人的观点可以让你的文章更为全面。</p>\n<h3 id=\"评判标准\"><a class=\"markdownIt-Anchor\" href=\"#评判标准\">#</a> 评判标准</h3>\n<p>那么评价类问题怎么去评判呢，我们使用打分来解决，根据权重表格计算得分</p>\n<table>\n<thead>\n<tr>\n<th>指标与方案</th>\n<th>指标权重</th>\n<th>方案 1</th>\n<th>方案 2</th>\n<th>…</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>指标 1</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n<tr>\n<td>指标 2</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<p>我们不妨定义 $a_{i j}&amp; 表示为第 i 行第 j 列的元素<br>\n显然针对每个因素所占的权重必定和为 1，指标权重的和为 1<br>\n 即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mn>1</mn><mo>−</mo><mi>n</mi><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{1-n 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> 之和为 1<br>\n 对于每个指标 k, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mi>k</mi><mn>2</mn><mo>−</mo><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{k 2-n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> 的和同样为 1.<br>\n 而我们评判每个方案时，是不是就可以通过计算指标权重 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>×</mo></mrow><annotation encoding=\"application/x-tex\">\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">×</span></span></span></span> 方案对应指标的值。通过比较每个方案所对应的结果，我们就可以得知最佳的方案是什么了。</p>\n<h3 id=\"重要程度表\"><a class=\"markdownIt-Anchor\" href=\"#重要程度表\">#</a> 重要程度表</h3>\n<table>\n<thead>\n<tr>\n<th>标度</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>A 对于 B 同样重要</td>\n</tr>\n<tr>\n<td>3</td>\n<td>A 对于 B 稍微重要</td>\n</tr>\n<tr>\n<td>5</td>\n<td>A 对于 B 明显重要</td>\n</tr>\n<tr>\n<td>7</td>\n<td>A 对于 B 强烈重要</td>\n</tr>\n<tr>\n<td>9</td>\n<td>A 对于 B 极端重要</td>\n</tr>\n<tr>\n<td>2,4,6,8</td>\n<td>两个相邻判断的中值</td>\n</tr>\n</tbody>\n</table>\n<p>其中，1/3 表示 B 对于 A 稍微重要，以此类推</p>\n<h3 id=\"制作判断指标权重的表格\"><a class=\"markdownIt-Anchor\" href=\"#制作判断指标权重的表格\">#</a> 制作判断指标权重的表格</h3>\n<p>通过以上的重要程度表，我们可以根据专家（自己）的判断，制定一份这样的表格</p>\n<table>\n<thead>\n<tr>\n<th>指标</th>\n<th>景色</th>\n<th>花费</th>\n<th>居住</th>\n<th>饮食</th>\n<th>交通</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>景色</td>\n<td>1</td>\n<td>1/2</td>\n<td>4</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>花费</td>\n<td>2</td>\n<td>1</td>\n<td>7</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>居住</td>\n<td>1/4</td>\n<td>1/7</td>\n<td>1</td>\n<td>1/2</td>\n<td>1/3</td>\n</tr>\n<tr>\n<td>饮食</td>\n<td>1/3</td>\n<td>1/5</td>\n<td>2</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>交通</td>\n<td>1/3</td>\n<td>1/5</td>\n<td>3</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{i j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> 表示与 j 指标相比，i 的重要程度<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{i j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> &gt;0 且 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{i j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>  * <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mi>j</mi><mi>i</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{j i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> = 1 称之为正互反矩阵。<br>\n此矩阵为判断矩阵</p>\n<h3 id=\"一致矩阵\"><a class=\"markdownIt-Anchor\" href=\"#一致矩阵\">#</a> 一致矩阵</h3>\n<p>由于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{i j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> = i 的重要程度 /j 的重要程度<br>\n我们可以知道 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{i j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> * <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mi>j</mi><mi>k</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{j k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>  = <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{i k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> ，列出数学计算公式即可得到<br>\n而满足上述关系的矩阵我们称之为一致矩阵<br>\n一致矩阵有一个特点，各行或者各列之间成倍数关系，利用这个我们可以直接得出这个矩阵是不是一致矩阵</p>\n<h3 id=\"最大特征值\"><a class=\"markdownIt-Anchor\" href=\"#最大特征值\">#</a> 最大特征值</h3>\n<p>由于本人大一，太菜，没有学过线性代数，我只能复制清风老师上课给的一个性质。<br>\n这个最大特征值你可以不用了解它究竟是个啥，怎么去计算，matlab 上面有它的计算函数<br>\n我们目前只需要知道对于特征值 λ：n 阶正互反矩阵 A 为一致矩阵时当且仅当最大特征值 λmax=n 否则 λmax 必定大于 n</p>\n<h3 id=\"一致性检验\"><a class=\"markdownIt-Anchor\" href=\"#一致性检验\">#</a> 一致性检验</h3>\n<p>步骤：</p>\n<ol>\n<li>计算一致性指标 CI = （ λmax - n ) / (n - 1)</li>\n<li>查找对应的平均随机一致性指标 RI</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>阶数</th>\n<th>RI</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0</td>\n</tr>\n<tr>\n<td>3</td>\n<td>0.52</td>\n</tr>\n<tr>\n<td>4</td>\n<td>0.89</td>\n</tr>\n<tr>\n<td>5</td>\n<td>1.12</td>\n</tr>\n<tr>\n<td>6</td>\n<td>1.26</td>\n</tr>\n<tr>\n<td>7</td>\n<td>1.36</td>\n</tr>\n<tr>\n<td>8</td>\n<td>1.41</td>\n</tr>\n<tr>\n<td>9</td>\n<td>1.46</td>\n</tr>\n<tr>\n<td>10</td>\n<td>1.49</td>\n</tr>\n<tr>\n<td>11</td>\n<td>1.52</td>\n</tr>\n<tr>\n<td>12</td>\n<td>1.54</td>\n</tr>\n<tr>\n<td>13</td>\n<td>1.56</td>\n</tr>\n<tr>\n<td>14</td>\n<td>1.58</td>\n</tr>\n<tr>\n<td>15</td>\n<td>1.59</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>计算一致性比例 CR=CI/RI<br>\n 如果 CR&lt;0.1 则一致性检验可以接受，否则需要修正<br>\n什么，你问我怎么去修正？你是专家，肯定你来修正啊。</li>\n</ol>\n<h3 id=\"计算一致矩阵的权重\"><a class=\"markdownIt-Anchor\" href=\"#计算一致矩阵的权重\">#</a> 计算一致矩阵的权重</h3>\n<p>直接对第一列进行归一化处理，因为第一列与其他列都是成比例的，直接对第一列进行归一化处理是等于其他列对<br>\n归一化处理：<br>\n比如说对于如下矩阵</p>\n<p>PD|A|B<br>\nA|1|2<br>\nB|1/2|1</p>\n<p>我们直接计算 A：1/（1+1/2） B：（1/2）/（1+1/2）即可</p>\n<h3 id=\"计算判断矩阵的权重\"><a class=\"markdownIt-Anchor\" href=\"#计算判断矩阵的权重\">#</a> 计算判断矩阵的权重</h3>\n<p>我们不妨先假设矩阵 A=<br>\na11 a12 … a1n<br>\na21 a22 … a2n<br>\n… … … …<br>\nan1 an2 … ann</p>\n<h4 id=\"算术平均法求权重\"><a class=\"markdownIt-Anchor\" href=\"#算术平均法求权重\">#</a> 算术平均法求权重</h4>\n<ol>\n<li>分别对每一列进行归一化处理</li>\n<li>把每一行的数据分别加起来</li>\n<li>把 2 得到的数据除以 n<br>\n 这种方法称之为算术平均法求权重<br>\n那么算术平均法求得得权重向量 wi</li>\n</ol>\n",
            "tags": [
                "数学建模",
                "层次分析法"
            ]
        }
    ]
}